import { ApiRequestable } from './common.ts';
import { buildProxy } from './engine.ts';

/** MODEL ActorInputBean */
export interface ActorInputBean {
  /**
   * The name of the group to add as a default actor. This parameter cannot be used with the `groupId` parameter. As a group's name can change,use of `groupId` is recommended. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`.
   */
  group?: string[];
  /**
   * The ID of the group to add as a default actor. This parameter cannot be used with the `group` parameter This parameter accepts a comma-separated list. For example, `"groupId":["77f6ab39-e755-4570-a6ae-2d7a8df0bcb8", "0c011f85-69ed-49c4-a801-3b18d0f771bc"]`.
   */
  groupId?: string[];
  /**
   * The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`.
   */
  user?: string[];
}
/** MODEL ActorsMap */
export interface ActorsMap {
  /**
   * The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
   */
  group?: string[];
  /**
   * The ID of the group to add. This parameter cannot be used with the `group` parameter.
   */
  groupId?: string[];
  /**
   * The user account ID of the user to add.
   */
  user?: string[];
}
/** MODEL AddFieldBean */
export interface AddFieldBean {
  /**
   * The ID of the field to add.
   */
  fieldId: string;
}
/** MODEL AddGroupBean */
export interface AddGroupBean {
  /**
   * The name of the group.
   */
  name: string;
}
/** MODEL AddNotificationsDetails */
export interface AddNotificationsDetails {
  /**
   * The list of notifications which should be added to the notification scheme.
   */
  notificationSchemeEvents: Array<NotificationSchemeEventDetails>;
}
/** MODEL AddSecuritySchemeLevelsRequestBean */
export interface AddSecuritySchemeLevelsRequestBean {
  /**
   * The list of scheme levels which should be added to the security scheme.
   */
  levels?: Array<SecuritySchemeLevelBean>;
}
/** MODEL AnnouncementBannerConfiguration */
export interface AnnouncementBannerConfiguration {
  /**
   * Hash of the banner data. The client detects updates by comparing hash IDs.
   */
  hashId?: string;
  /**
   * Flag indicating if the announcement banner can be dismissed by the user.
   */
  isDismissible?: boolean;
  /**
   * Flag indicating if the announcement banner is enabled or not.
   */
  isEnabled?: boolean;
  /**
   * The text on the announcement banner.
   */
  message?: string;
  /**
   * Visibility of the announcement banner.
   */
  visibility?: string;
}
/** MODEL AnnouncementBannerConfigurationUpdate */
export interface AnnouncementBannerConfigurationUpdate {
  /**
   * Flag indicating if the announcement banner can be dismissed by the user.
   */
  isDismissible?: boolean;
  /**
   * Flag indicating if the announcement banner is enabled or not.
   */
  isEnabled?: boolean;
  /**
   * The text on the announcement banner.
   */
  message?: string;
  /**
   * Visibility of the announcement banner. Can be public or private.
   */
  visibility?: string;
}
/** MODEL AppWorkflowTransitionRule */
export interface AppWorkflowTransitionRule {
  /**
   * Ref: #/components/schemas/RuleConfiguration
   */
  configuration: RuleConfiguration;
  /**
   * The ID of the transition rule.
   */
  id: string;
  /**
   * The key of the rule, as defined in the Connect or the Forge app descriptor.
   */
  key: string;
  transition?: WorkflowTransition;
}
/** MODEL Application */
export interface Application {
  /**
   * The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last.
   */
  name?: string;
  /**
   * The name-spaced type of the application, used by registered rendering apps.
   */
  type?: string;
}
/** MODEL ApplicationProperty */
export interface ApplicationProperty {
  /**
   * The allowed values, if applicable.
   */
  allowedValues?: string[];
  /**
   * The default value of the application property.
   */
  defaultValue?: string;
  /**
   * The description of the application property.
   */
  desc?: string;
  example?: string;
  /**
   * The ID of the application property. The ID and key are the same.
   */
  id?: string;
  /**
   * The key of the application property. The ID and key are the same.
   */
  key?: string;
  /**
   * The name of the application property.
   */
  name?: string;
  /**
   * The data type of the application property.
   */
  type?: string;
  /**
   * The new value.
   */
  value?: string;
}
/** MODEL ApplicationRole */
export interface ApplicationRole {
  /**
   * The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
   */
  defaultGroups?: string[];
  /**
   * The groups that are granted default access for this application role.
   */
  defaultGroupsDetails?: Array<GroupName>;
  /**
   * Deprecated.
   */
  defined?: boolean;
  /**
   * The groups associated with the application role.
   */
  groupDetails?: Array<GroupName>;
  /**
   * The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
   */
  groups?: string[];
  hasUnlimitedSeats?: boolean;
  /**
   * The key of the application role.
   */
  key?: string;
  /**
   * The display name of the application role.
   */
  name?: string;
  /**
   * The maximum count of users on your license.
   * @format: "int32"
   */
  numberOfSeats?: number;
  /**
   * Indicates if the application role belongs to Jira platform (`jira-core`).
   */
  platform?: boolean;
  /**
   * The count of users remaining on your license.
   * @format: "int32"
   */
  remainingSeats?: number;
  /**
   * Determines whether this application role should be selected by default on user creation.
   */
  selectedByDefault?: boolean;
  /**
   * The number of users counting against your license.
   * @format: "int32"
   */
  userCount?: number;
  /**
   * The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
   */
  userCountDescription?: string;
}
/** MODEL ArchiveIssueAsyncRequest */
export interface ArchiveIssueAsyncRequest {
  jql?: string;
}
/** MODEL ArchivedIssuesFilterRequest */
export interface ArchivedIssuesFilterRequest {
  /**
   * List archived issues archived by a specified account ID.
   */
  archivedBy?: string[];
  /**
   * Ref: #/components/schemas/DateRangeFilterRequest
   */
  archivedDateRange?: DateRangeFilterRequest;
  /**
   * List archived issues with a specified issue type ID.
   */
  issueTypes?: string[];
  /**
   * List archived issues with a specified project key.
   */
  projects?: string[];
  /**
   * List archived issues where the reporter is a specified account ID.
   */
  reporters?: string[];
}
/** MODEL AssociateFieldConfigurationsWithIssueTypesRequest */
export interface AssociateFieldConfigurationsWithIssueTypesRequest {
  /**
   * Field configuration to issue type mappings.
   */
  mappings: Array<FieldConfigurationToIssueTypeMapping>;
}
/** MODEL AssociateSecuritySchemeWithProjectDetails */
export interface AssociateSecuritySchemeWithProjectDetails {
  /**
   * The list of scheme levels which should be remapped to new levels of the issue security scheme.
   */
  oldToNewSecurityLevelMappings?: Array<OldToNewSecurityLevelMappingsBean>;
  /**
   * The ID of the project.
   */
  projectId: string;
  /**
   * The ID of the issue security scheme. Providing null will clear the association with the issue security scheme.
   */
  schemeId: string;
}
/** MODEL AssociatedItemBean */
export interface AssociatedItemBean {
  /**
   * The ID of the associated record.
   */
  id?: string;
  /**
   * The name of the associated record.
   */
  name?: string;
  /**
   * The ID of the associated parent record.
   */
  parentId?: string;
  /**
   * The name of the associated parent record.
   */
  parentName?: string;
  /**
   * The type of the associated record.
   */
  typeName?: string;
}
/** MODEL Attachment */
export interface Attachment {
  /**
   * Details of the user who added the attachment.
   */
  author?: UserDetails;
  /**
   * The content of the attachment.
   */
  content?: string;
  /**
   * The datetime the attachment was created.
   * @format: "date-time"
   */
  created?: string;
  /**
   * The file name of the attachment.
   */
  filename?: string;
  /**
   * The ID of the attachment.
   */
  id?: string;
  /**
   * The MIME type of the attachment.
   */
  mimeType?: string;
  /**
   * The URL of the attachment details response.
   */
  self?: string;
  /**
   * The size of the attachment.
   * @format: "int64"
   */
  size?: number;
  /**
   * The URL of a thumbnail representing the attachment.
   */
  thumbnail?: string;
}
/** MODEL AttachmentArchive */
export interface AttachmentArchive {
  entries?: Array<AttachmentArchiveEntry>;
  moreAvailable?: boolean;
  /**
   * @format: "int32"
   */
  totalEntryCount?: number;
  /**
   * @format: "int32"
   */
  totalNumberOfEntriesAvailable?: number;
}
/** MODEL AttachmentArchiveEntry */
export interface AttachmentArchiveEntry {
  abbreviatedName?: string;
  /**
   * @format: "int64"
   */
  entryIndex?: number;
  mediaType?: string;
  name?: string;
  /**
   * @format: "int64"
   */
  size?: number;
}
/** MODEL AttachmentArchiveImpl */
export interface AttachmentArchiveImpl {
  /**
   * The list of the items included in the archive.
   */
  entries?: Array<AttachmentArchiveEntry>;
  /**
   * The number of items in the archive.
   * @format: "int32"
   */
  totalEntryCount?: number;
}
/** MODEL AttachmentArchiveItemReadable */
export interface AttachmentArchiveItemReadable {
  /**
   * The position of the item within the archive.
   * @format: "int64"
   */
  index?: number;
  /**
   * The label for the archive item.
   */
  label?: string;
  /**
   * The MIME type of the archive item.
   */
  mediaType?: string;
  /**
   * The path of the archive item.
   */
  path?: string;
  /**
   * The size of the archive item.
   */
  size?: string;
}
/** MODEL AttachmentArchiveMetadataReadable */
export interface AttachmentArchiveMetadataReadable {
  /**
   * The list of the items included in the archive.
   */
  entries?: Array<AttachmentArchiveItemReadable>;
  /**
   * The ID of the attachment.
   * @format: "int64"
   */
  id?: number;
  /**
   * The MIME type of the attachment.
   */
  mediaType?: string;
  /**
   * The name of the archive file.
   */
  name?: string;
  /**
   * The number of items included in the archive.
   * @format: "int64"
   */
  totalEntryCount?: number;
}
/** MODEL AttachmentMetadata */
export interface AttachmentMetadata {
  /**
   * Details of the user who attached the file.
   */
  author?: User;
  /**
   * The URL of the attachment.
   */
  content?: string;
  /**
   * The datetime the attachment was created.
   * @format: "date-time"
   */
  created?: string;
  /**
   * The name of the attachment file.
   */
  filename?: string;
  /**
   * The ID of the attachment.
   * @format: "int64"
   */
  id?: number;
  /**
   * The MIME type of the attachment.
   */
  mimeType?: string;
  /**
   * Additional properties of the attachment.
   */
  properties?: unknown;
  /**
   * The URL of the attachment metadata details.
   * @format: "uri"
   */
  self?: string;
  /**
   * The size of the attachment.
   * @format: "int64"
   */
  size?: number;
  /**
   * The URL of a thumbnail representing the attachment.
   */
  thumbnail?: string;
}
/** MODEL AttachmentSettings */
export interface AttachmentSettings {
  /**
   * Whether the ability to add attachments is enabled.
   */
  enabled?: boolean;
  /**
   * The maximum size of attachments permitted, in bytes.
   * @format: "int64"
   */
  uploadLimit?: number;
}
/** MODEL AuditRecordBean */
export interface AuditRecordBean {
  /**
   * The list of items associated with the changed record.
   */
  associatedItems?: Array<AssociatedItemBean>;
  /**
   * Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.
   */
  authorKey?: string;
  /**
   * The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).
   */
  category?: string;
  /**
   * The list of values changed in the record event.
   */
  changedValues?: Array<ChangedValueBean>;
  /**
   * The date and time on which the audit record was created.
   * @format: "date-time"
   */
  created?: string;
  /**
   * The description of the audit record.
   */
  description?: string;
  /**
   * The event the audit record originated from.
   */
  eventSource?: string;
  /**
   * The ID of the audit record.
   * @format: "int64"
   */
  id?: number;
  /**
   * Ref: #/components/schemas/AssociatedItemBean
   */
  objectItem?: AssociatedItemBean;
  /**
   * The URL of the computer where the creation of the audit record was initiated.
   */
  remoteAddress?: string;
  /**
   * The summary of the audit record.
   */
  summary?: string;
}
/** MODEL AuditRecords */
export interface AuditRecords {
  /**
   * The requested or default limit on the number of audit items to be returned.
   * @format: "int32"
   */
  limit?: number;
  /**
   * The number of audit items skipped before the first item in this list.
   * @format: "int32"
   */
  offset?: number;
  /**
   * The list of audit items.
   */
  records?: Array<AuditRecordBean>;
  /**
   * The total number of audit items returned.
   * @format: "int64"
   */
  total?: number;
}
/** MODEL AutoCompleteSuggestion */
export interface AutoCompleteSuggestion {
  /**
   * The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag.
   */
  displayName?: string;
  /**
   * The value of a suggested item.
   */
  value?: string;
}
/** MODEL AutoCompleteSuggestions */
export interface AutoCompleteSuggestions {
  /**
   * The list of suggested item.
   */
  results?: Array<AutoCompleteSuggestion>;
}
/** MODEL AvailableDashboardGadget */
export interface AvailableDashboardGadget {
  /**
   * The module key of the gadget type.
   */
  moduleKey?: string;
  /**
   * The title of the gadget.
   */
  title: string;
  /**
   * The URI of the gadget type.
   */
  uri?: string;
}
/** MODEL AvailableDashboardGadgetsResponse */
export interface AvailableDashboardGadgetsResponse {
  /**
   * The list of available gadgets.
   */
  gadgets: Array<AvailableDashboardGadget>;
}
/** MODEL AvailableWorkflowConnectRule */
export interface AvailableWorkflowConnectRule {
  /**
   * The add-on providing the rule.
   */
  addonKey?: string;
  /**
   * The URL creation path segment defined in the Connect module.
   */
  createUrl?: string;
  /**
   * The rule description.
   */
  description?: string;
  /**
   * The URL edit path segment defined in the Connect module.
   */
  editUrl?: string;
  /**
   * The module providing the rule.
   */
  moduleKey?: string;
  /**
   * The rule name.
   */
  name?: string;
  /**
   * The rule key.
   */
  ruleKey?: string;
  /**
   * The rule type.
   */
  ruleType?: string;
  /**
   * The URL view path segment defined in the Connect module.
   */
  viewUrl?: string;
}
/** MODEL AvailableWorkflowForgeRule */
export interface AvailableWorkflowForgeRule {
  /**
   * The rule description.
   */
  description?: string;
  /**
   * The unique ARI of the forge rule type.
   */
  id?: string;
  /**
   * The rule name.
   */
  name?: string;
  /**
   * The rule key.
   */
  ruleKey?: string;
  /**
   * The rule type.
   */
  ruleType?: string;
}
/** MODEL AvailableWorkflowSystemRule */
export interface AvailableWorkflowSystemRule {
  /**
   * The rule description.
   */
  description: string;
  /**
   * List of rules that conflict with this one.
   */
  incompatibleRuleKeys: string[];
  /**
   * Whether the rule can be added added to an initial transition.
   */
  isAvailableForInitialTransition: boolean;
  /**
   * Whether the rule is visible.
   */
  isVisible: boolean;
  /**
   * The rule name.
   */
  name: string;
  /**
   * The rule key.
   */
  ruleKey: string;
  /**
   * The rule type.
   */
  ruleType: string;
}
/** MODEL AvailableWorkflowTriggerTypes */
export interface AvailableWorkflowTriggerTypes {
  /**
   * The description of the trigger rule.
   */
  description?: string;
  /**
   * The name of the trigger rule.
   */
  name?: string;
  /**
   * The type identifier of trigger rule.
   */
  type?: string;
}
/** MODEL AvailableWorkflowTriggers */
export interface AvailableWorkflowTriggers {
  /**
   * The list of available trigger types.
   */
  availableTypes: Array<AvailableWorkflowTriggerTypes>;
  /**
   * The rule key of the rule.
   */
  ruleKey: string;
}
/** MODEL Avatar */
export interface Avatar {
  /**
   * The file name of the avatar icon. Returned for system avatars.
   */
  fileName?: string;
  /**
   * The ID of the avatar.
   */
  id: string;
  /**
   * Whether the avatar can be deleted.
   */
  isDeletable?: boolean;
  /**
   * Whether the avatar is used in Jira. For example, shown as a project's avatar.
   */
  isSelected?: boolean;
  /**
   * Whether the avatar is a system avatar.
   */
  isSystemAvatar?: boolean;
  /**
   * The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
   */
  owner?: string;
  /**
   * The list of avatar icon URLs.
   */
  urls?: unknown;
}
/** MODEL AvatarUrlsBean */
export interface AvatarUrlsBean {
  /**
   * The URL of the item's 16x16 pixel avatar.
   * @format: "uri"
   */
  "16x16"?: string;
  /**
   * The URL of the item's 24x24 pixel avatar.
   * @format: "uri"
   */
  "24x24"?: string;
  /**
   * The URL of the item's 32x32 pixel avatar.
   * @format: "uri"
   */
  "32x32"?: string;
  /**
   * The URL of the item's 48x48 pixel avatar.
   * @format: "uri"
   */
  "48x48"?: string;
}
/** MODEL Avatars */
export interface Avatars {
  /**
   * Custom avatars list.
   */
  custom?: Array<Avatar>;
  /**
   * System avatars list.
   */
  system?: Array<Avatar>;
}
/** MODEL BulkChangeOwnerDetails */
export interface BulkChangeOwnerDetails {
  /**
   * Whether the name is fixed automatically if it's duplicated after changing owner.
   */
  autofixName: boolean;
  /**
   * The account id of the new owner.
   */
  newOwner: string;
}
/** MODEL BulkCustomFieldOptionCreateRequest */
export interface BulkCustomFieldOptionCreateRequest {
  /**
   * Details of options to create.
   */
  options?: Array<CustomFieldOptionCreate>;
}
/** MODEL BulkCustomFieldOptionUpdateRequest */
export interface BulkCustomFieldOptionUpdateRequest {
  /**
   * Details of the options to update.
   */
  options?: Array<CustomFieldOptionUpdate>;
}
/** MODEL BulkEditActionError */
export interface BulkEditActionError {
  /**
   * The error messages.
   */
  errorMessages: string[];
  /**
   * The errors.
   */
  errors: unknown;
}
/** MODEL BulkEditGetFields */
export interface BulkEditGetFields {
  /**
   * The end cursor for use in pagination.
   */
  endingBefore?: string;
  /**
   * List of all the fields
   */
  fields?: Array<IssueBulkEditField>;
  /**
   * The start cursor for use in pagination.
   */
  startingAfter?: string;
}
/** MODEL BulkEditShareableEntityRequest */
export interface BulkEditShareableEntityRequest {
  /**
   * Allowed action for bulk edit shareable entity
   */
  action: string;
  /**
   * The details of change owner action.
   */
  changeOwnerDetails?: BulkChangeOwnerDetails;
  /**
   * The id list of shareable entities to be changed.
   */
  entityIds: string[];
  /**
   * Whether the actions are executed by users with Administer Jira global permission.
   */
  extendAdminPermissions?: boolean;
  /**
   * The permission details to be changed.
   */
  permissionDetails?: PermissionDetails;
}
/** MODEL BulkEditShareableEntityResponse */
export interface BulkEditShareableEntityResponse {
  /**
   * Allowed action for bulk edit shareable entity
   */
  action: string;
  /**
   * The mapping dashboard id to errors if any.
   */
  entityErrors?: unknown;
}
/** MODEL BulkIssueIsWatching */
export interface BulkIssueIsWatching {
  /**
   * The map of issue ID to boolean watch status.
   */
  issuesIsWatching?: unknown;
}
/** MODEL BulkIssuePropertyUpdateRequest */
export interface BulkIssuePropertyUpdateRequest {
  /**
   * EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are `issue` and `user`. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored.
   */
  expression?: string;
  /**
   * The bulk operation filter.
   */
  filter?: IssueFilterForBulkPropertySet;
  /**
   * The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   */
  value?: string;
}
/** MODEL BulkOperationErrorResponse */
export interface BulkOperationErrorResponse {
  errors?: Array<ErrorMessage>;
}
/** MODEL BulkOperationErrorResult */
export interface BulkOperationErrorResult {
  /**
   * Ref: #/components/schemas/ErrorCollection
   */
  elementErrors?: ErrorCollection;
  /**
   * @format: "int32"
   */
  failedElementNumber?: number;
  /**
   * @format: "int32"
   */
  status?: number;
}
/** MODEL BulkOperationProgress */
export interface BulkOperationProgress {
  /**
   * A timestamp of when the task was submitted.
   * @format: "date-time"
   */
  created?: string;
  /**
   * Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons.
   */
  failedAccessibleIssues?: unknown;
  /**
   * The number of issues that are either invalid or issues that the user doesn't have permission to view, regardless of the success or failure of the operation.
   * @format: "int32"
   */
  invalidOrInaccessibleIssueCount?: number;
  /**
   * List of issue IDs for which the operation was successful and that the user has permission to view.
   */
  processedAccessibleIssues?: string[];
  /**
   * Progress of the task as a percentage.
   * @format: "int64"
   */
  progressPercent?: number;
  /**
   * A timestamp of when the task was started.
   * @format: "date-time"
   */
  started?: string;
  /**
   * The status of the task.
   */
  status?: string;
  /**
   * Ref: #/components/schemas/User
   */
  submittedBy?: User;
  /**
   * The ID of the task.
   */
  taskId?: string;
  /**
   * The number of issues that the bulk operation was attempted on.
   * @format: "int32"
   */
  totalIssueCount?: number;
  /**
   * A timestamp of when the task progress was last updated.
   * @format: "date-time"
   */
  updated?: string;
}
/** MODEL BulkPermissionGrants */
export interface BulkPermissionGrants {
  /**
   * List of permissions granted to the user.
   */
  globalPermissions: string[];
  /**
   * List of project permissions and the projects and issues those permissions provide access to.
   */
  projectPermissions: Array<BulkProjectPermissionGrants>;
}
/** MODEL BulkPermissionsRequestBean */
export interface BulkPermissionsRequestBean {
  /**
   * The account ID of a user.
   */
  accountId?: string;
  /**
   * Global permissions to look up.
   */
  globalPermissions?: string[];
  /**
   * Project permissions with associated projects and issues to look up.
   */
  projectPermissions?: Array<BulkProjectPermissions>;
}
/** MODEL BulkProjectPermissionGrants */
export interface BulkProjectPermissionGrants {
  /**
   * IDs of the issues the user has the permission for.
   */
  issues: string[];
  /**
   * A project permission,
   */
  permission: string;
  /**
   * IDs of the projects the user has the permission for.
   */
  projects: string[];
}
/** MODEL BulkProjectPermissions */
export interface BulkProjectPermissions {
  /**
   * List of issue IDs.
   */
  issues?: string[];
  /**
   * List of project permissions.
   */
  permissions: string[];
  /**
   * List of project IDs.
   */
  projects?: string[];
}
/** MODEL ChangeDetails */
export interface ChangeDetails {
  /**
   * The name of the field changed.
   */
  field?: string;
  /**
   * The ID of the field changed.
   */
  fieldId?: string;
  /**
   * The type of the field changed.
   */
  fieldtype?: string;
  /**
   * The details of the original value.
   */
  from?: string;
  /**
   * The details of the original value as a string.
   */
  fromString?: string;
  /**
   * The details of the new value.
   */
  to?: string;
}
/** MODEL ChangeFilterOwner */
export interface ChangeFilterOwner {
  /**
   * The account ID of the new owner.
   */
  accountId: string;
}
/** MODEL ChangedValueBean */
export interface ChangedValueBean {
  /**
   * The value of the field before the change.
   */
  changedFrom?: string;
  /**
   * The value of the field after the change.
   */
  changedTo?: string;
  /**
   * The name of the field changed.
   */
  fieldName?: string;
}
/** MODEL ChangedWorklog */
export interface ChangedWorklog {
  /**
   * Details of properties associated with the change.
   */
  properties?: Array<EntityProperty>;
  /**
   * The datetime of the change.
   * @format: "int64"
   */
  updatedTime?: number;
  /**
   * The ID of the worklog.
   * @format: "int64"
   */
  worklogId?: number;
}
/** MODEL ChangedWorklogs */
export interface ChangedWorklogs {
  lastPage?: boolean;
  /**
   * The URL of the next list of changed worklogs.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of this changed worklogs list.
   * @format: "uri"
   */
  self?: string;
  /**
   * The datetime of the first worklog item in the list.
   * @format: "int64"
   */
  since?: number;
  /**
   * The datetime of the last worklog item in the list.
   * @format: "int64"
   */
  until?: number;
  /**
   * Changed worklog list.
   */
  values?: Array<ChangedWorklog>;
}
/** MODEL Changelog */
export interface Changelog {
  /**
   * The user who made the change.
   */
  author?: UserDetails;
  /**
   * The date on which the change took place.
   * @format: "date-time"
   */
  created?: string;
  /**
   * The history metadata associated with the changed.
   */
  historyMetadata?: HistoryMetadata;
  /**
   * The ID of the changelog.
   */
  id?: string;
  /**
   * The list of items changed.
   */
  items?: Array<ChangeDetails>;
}
/** MODEL ColumnItem */
export interface ColumnItem {
  /**
   * The issue navigator column label.
   */
  label?: string;
  /**
   * The issue navigator column value.
   */
  value?: string;
}
/** MODEL ColumnRequestBody */
export interface ColumnRequestBody {
  columns?: string[];
}
/** MODEL Comment */
export interface Comment {
  /**
   * The ID of the user who created the comment.
   */
  author?: UserDetails;
  /**
   * The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).
   */
  body?: string;
  /**
   * The date and time at which the comment was created.
   * @format: "date-time"
   */
  created?: string;
  /**
   * The ID of the comment.
   */
  id?: string;
  /**
   * Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
   */
  jsdAuthorCanSeeRequest?: boolean;
  /**
   * Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
   */
  jsdPublic?: boolean;
  /**
   * A list of comment properties. Optional on create and update.
   */
  properties?: Array<EntityProperty>;
  /**
   * The rendered version of the comment.
   */
  renderedBody?: string;
  /**
   * The URL of the comment.
   */
  self?: string;
  /**
   * The ID of the user who updated the comment last.
   */
  updateAuthor?: UserDetails;
  /**
   * The date and time at which the comment was updated last.
   * @format: "date-time"
   */
  updated?: string;
  /**
   * The group or role to which this comment is visible. Optional on create and update.
   */
  visibility?: Visibility;
}
/** MODEL ComponentIssuesCount */
export interface ComponentIssuesCount {
  /**
   * The count of issues assigned to a component.
   * @format: "int64"
   */
  issueCount?: number;
  /**
   * The URL for this count of issues for a component.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL ComponentJsonBean */
export interface ComponentJsonBean {
  ari?: string;
  description?: string;
  id?: string;
  metadata?: unknown;
  name?: string;
  self?: string;
}
/** MODEL ComponentWithIssueCount */
export interface ComponentWithIssueCount {
  /**
   * The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
   */
  assignee?: User;
  /**
   * The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:
   * 
   *  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
   *  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
   *  *  `UNASSIGNED` an assignee is not set for issues created with this component.
   *  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
   */
  assigneeType?: string;
  /**
   * The description for the component.
   */
  description?: string;
  /**
   * The unique identifier for the component.
   */
  id?: string;
  /**
   * Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
   */
  isAssigneeTypeValid?: boolean;
  /**
   * Count of issues for the component.
   * @format: "int64"
   */
  issueCount?: number;
  /**
   * The user details for the component's lead user.
   */
  lead?: User;
  /**
   * The name for the component.
   */
  name?: string;
  /**
   * The key of the project to which the component is assigned.
   */
  project?: string;
  /**
   * Not used.
   * @format: "int64"
   */
  projectId?: number;
  /**
   * The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
   */
  realAssignee?: User;
  /**
   * The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
   * 
   *  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
   *  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
   *  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
   *  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
   */
  realAssigneeType?: string;
  /**
   * The URL for this count of the issues contained in the component.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL CompoundClause */
export interface CompoundClause {
  /**
   * The list of nested clauses.
   */
  clauses: Array<JqlQueryClause>;
  /**
   * The operator between the clauses.
   */
  operator: string;
}
/** MODEL ConditionGroupConfiguration */
export interface ConditionGroupConfiguration {
  /**
   * The nested conditions of the condition group.
   */
  conditionGroups?: Array<ConditionGroupConfiguration>;
  /**
   * The rules for this condition.
   */
  conditions?: Array<WorkflowRuleConfiguration>;
  /**
   * Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
   */
  operation?: string;
}
/** MODEL ConditionGroupUpdate */
export interface ConditionGroupUpdate {
  /**
   * The nested conditions of the condition group.
   */
  conditionGroups?: Array<ConditionGroupUpdate>;
  /**
   * The rules for this condition.
   */
  conditions?: Array<WorkflowRuleConfiguration>;
  /**
   * Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
   */
  operation: string;
}
/** MODEL Configuration */
export interface Configuration {
  /**
   * Whether the ability to add attachments to issues is enabled.
   */
  attachmentsEnabled?: boolean;
  /**
   * Whether the ability to link issues is enabled.
   */
  issueLinkingEnabled?: boolean;
  /**
   * Whether the ability to create subtasks for issues is enabled.
   */
  subTasksEnabled?: boolean;
  /**
   * The configuration of time tracking.
   */
  timeTrackingConfiguration?: TimeTrackingConfiguration;
  /**
   * Whether the ability to track time is enabled. This property is deprecated.
   */
  timeTrackingEnabled?: boolean;
  /**
   * Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   */
  unassignedIssuesAllowed?: boolean;
  /**
   * Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   */
  votingEnabled?: boolean;
  /**
   * Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   */
  watchingEnabled?: boolean;
}
/** MODEL ConnectCustomFieldValue */
export interface ConnectCustomFieldValue {
  /**
   * The type of custom field.
   */
  _type: string;
  /**
   * The custom field ID.
   */
  fieldID: number;
  /**
   * The issue ID.
   */
  issueID: number;
  /**
   * The value of number type custom field when `_type` is `NumberIssueField`.
   */
  number?: number;
  /**
   * The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.
   */
  optionID?: string;
  /**
   * The value of richText type custom field when `_type` is `RichTextIssueField`.
   */
  richText?: string;
  /**
   * The value of string type custom field when `_type` is `StringIssueField`.
   */
  string?: string;
  /**
   * The value of of text custom field type when `_type` is `TextIssueField`.
   */
  text?: string;
}
/** MODEL ConnectCustomFieldValues */
export interface ConnectCustomFieldValues {
  /**
   * The list of custom field update details.
   */
  updateValueList?: Array<ConnectCustomFieldValue>;
}
/** MODEL ConnectModule */
// deno-lint-ignore no-empty-interface
export interface ConnectModule {
}
/** MODEL ConnectModules */
export interface ConnectModules {
  /**
   * A list of app modules in the same format as the `modules` property in the
   * [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
   */
  modules: Array<ConnectModule>;
}
/** MODEL ConnectWorkflowTransitionRule */
export interface ConnectWorkflowTransitionRule {
  /**
   * Ref: #/components/schemas/RuleConfiguration
   */
  configuration: RuleConfiguration;
  /**
   * The ID of the transition rule.
   * @example: "123"
   */
  id: string;
  /**
   * The key of the rule, as defined in the Connect app descriptor.
   * @example: "WorkflowKey"
   */
  key: string;
  /**
   * Ref: #/components/schemas/WorkflowTransition
   */
  transition?: WorkflowTransition;
}
/** MODEL ContainerForProjectFeatures */
export interface ContainerForProjectFeatures {
  /**
   * The project features.
   */
  features?: Array<ProjectFeature>;
}
/** MODEL ContainerForRegisteredWebhooks */
export interface ContainerForRegisteredWebhooks {
  /**
   * A list of registered webhooks.
   */
  webhookRegistrationResult?: Array<RegisteredWebhook>;
}
/** MODEL ContainerForWebhookIDs */
export interface ContainerForWebhookIDs {
  /**
   * A list of webhook IDs.
   */
  webhookIds: string[];
}
/** MODEL ContainerOfWorkflowSchemeAssociations */
export interface ContainerOfWorkflowSchemeAssociations {
  /**
   * A list of workflow schemes together with projects they are associated with.
   */
  values: Array<WorkflowSchemeAssociations>;
}
/** MODEL Context */
export interface Context {
  /**
   * The ID of the context.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the context.
   */
  name?: string;
  /**
   * The scope of the context.
   */
  scope?: Scope;
}
/** MODEL ContextForProjectAndIssueType */
export interface ContextForProjectAndIssueType {
  /**
   * The ID of the custom field context.
   */
  contextId: string;
  /**
   * The ID of the issue type.
   */
  issueTypeId: string;
  /**
   * The ID of the project.
   */
  projectId: string;
}
/** MODEL ContextualConfiguration */
export interface ContextualConfiguration {
  /**
   * The field configuration.
   */
  configuration?: string;
  /**
   * The ID of the field context the configuration is associated with.
   */
  fieldContextId: string;
  /**
   * The ID of the configuration.
   */
  id: string;
  /**
   * The field value schema.
   */
  schema?: string;
}
/** MODEL ConvertedJQLQueries */
export interface ConvertedJQLQueries {
  /**
   * List of queries containing user information that could not be mapped to an existing user
   */
  queriesWithUnknownUsers?: Array<JQLQueryWithUnknownUsers>;
  /**
   * The list of converted query strings with account IDs in place of user identifiers.
   */
  queryStrings?: string[];
}
/** MODEL CreateCustomFieldContext */
export interface CreateCustomFieldContext {
  /**
   * The description of the context.
   */
  description?: string;
  /**
   * The ID of the context.
   */
  id?: string;
  /**
   * The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
   */
  issueTypeIds?: string[];
  /**
   * The name of the context.
   */
  name: string;
  /**
   * The list of project IDs associated with the context. If the list is empty, the context is global.
   */
  projectIds?: string[];
}
/** MODEL CreateIssueSecuritySchemeDetails */
export interface CreateIssueSecuritySchemeDetails {
  /**
   * The description of the issue security scheme.
   */
  description?: string;
  /**
   * The list of scheme levels which should be added to the security scheme.
   */
  levels?: Array<SecuritySchemeLevelBean>;
  /**
   * The name of the issue security scheme. Must be unique (case-insensitive).
   */
  name: string;
}
/** MODEL CreateNotificationSchemeDetails */
export interface CreateNotificationSchemeDetails {
  /**
   * The description of the notification scheme.
   */
  description?: string;
  /**
   * The name of the notification scheme. Must be unique (case-insensitive).
   */
  name: string;
  /**
   * The list of notifications which should be added to the notification scheme.
   */
  notificationSchemeEvents?: Array<NotificationSchemeEventDetails>;
}
/** MODEL CreatePriorityDetails */
export interface CreatePriorityDetails {
  /**
   * The description of the priority.
   */
  description?: string;
  /**
   * The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
   */
  iconUrl?: string;
  /**
   * The name of the priority. Must be unique.
   */
  name: string;
  /**
   * The status color of the priority in 3-digit or 6-digit hexadecimal format.
   */
  statusColor: string;
}
/** MODEL CreatePrioritySchemeDetails */
export interface CreatePrioritySchemeDetails {
  /**
   * The ID of the default priority for the priority scheme.
   * @format: "int64"
   */
  defaultPriorityId: number;
  /**
   * The description of the priority scheme.
   */
  description?: string;
  /**
   * Mappings of issue priorities for issues being migrated in and out of this priority scheme.
   */
  mappings?: PriorityMapping;
  /**
   * The name of the priority scheme. Must be unique.
   */
  name: string;
  /**
   * The IDs of priorities in the scheme.
   */
  priorityIds: string[];
  /**
   * The IDs of projects that will use the priority scheme.
   */
  projectIds?: string[];
}
/** MODEL CreateProjectDetails */
export interface CreateProjectDetails {
  /**
   * The default assignee when creating issues for this project.
   */
  assigneeType?: string;
  /**
   * An integer value for the project's avatar.
   * @format: "int64"
   */
  avatarId?: number;
  /**
   * The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
   * @format: "int64"
   */
  categoryId?: number;
  /**
   * A brief description of the project.
   */
  description?: string;
  /**
   * The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
   * @format: "int64"
   */
  fieldConfigurationScheme?: number;
  /**
   * The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
   * @format: "int64"
   */
  issueSecurityScheme?: number;
  /**
   * The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
   * @format: "int64"
   */
  issueTypeScheme?: number;
  /**
   * The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
   * @format: "int64"
   */
  issueTypeScreenScheme?: number;
  /**
   * Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
   */
  key: string;
  /**
   * This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.
   */
  lead?: string;
  /**
   * The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
   */
  leadAccountId?: string;
  /**
   * The name of the project.
   */
  name: string;
  /**
   * The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
   * @format: "int64"
   */
  notificationScheme?: number;
  /**
   * The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
   * @format: "int64"
   */
  permissionScheme?: number;
  /**
   * A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
   */
  projectTemplateKey?: string;
  /**
   * The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
   */
  projectTypeKey?: string;
  /**
   * A link to information about this project, such as project documentation
   */
  url?: string;
  /**
   * The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
   * @format: "int64"
   */
  workflowScheme?: number;
}
/** MODEL CreateResolutionDetails */
export interface CreateResolutionDetails {
  /**
   * The description of the resolution.
   */
  description?: string;
  /**
   * The name of the resolution. Must be unique (case-insensitive).
   */
  name: string;
}
/** MODEL CreateUiModificationDetails */
export interface CreateUiModificationDetails {
  /**
   * List of contexts of the UI modification. The maximum number of contexts is 1000.
   */
  contexts?: Array<UiModificationContextDetails>;
  /**
   * The data of the UI modification. The maximum size of the data is 50000 characters.
   */
  data?: string;
  /**
   * The description of the UI modification. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The name of the UI modification. The maximum length is 255 characters.
   */
  name: string;
}
/** MODEL CreateUpdateRoleRequestBean */
export interface CreateUpdateRoleRequestBean {
  /**
   * A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role.
   */
  description?: string;
  /**
   * The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role.
   */
  name?: string;
}
/** MODEL CreateWorkflowCondition */
export interface CreateWorkflowCondition {
  /**
   * The list of workflow conditions.
   */
  conditions?: Array<CreateWorkflowCondition>;
  /**
   * EXPERIMENTAL. The configuration of the transition rule.
   */
  configuration?: unknown;
  /**
   * The compound condition operator.
   */
  operator?: string;
  /**
   * The type of the transition rule.
   */
  type?: string;
}
/** MODEL CreateWorkflowDetails */
export interface CreateWorkflowDetails {
  /**
   * The description of the workflow. The maximum length is 1000 characters.
   */
  description?: string;
  /**
   * The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
   */
  name: string;
  /**
   * The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
   */
  statuses: Array<CreateWorkflowStatusDetails>;
  /**
   * The transitions of the workflow. For the request to be valid, these transitions must:
   * 
   *  *  include one *initial* transition.
   *  *  not use the same name for a *global* and *directed* transition.
   *  *  have a unique name for each *global* transition.
   *  *  have a unique 'to' status for each *global* transition.
   *  *  have unique names for each transition from a status.
   *  *  not have a 'from' status on *initial* and *global* transitions.
   *  *  have a 'from' status on *directed* transitions.
   * 
   * All the transition statuses must be included in `statuses`.
   */
  transitions: Array<CreateWorkflowTransitionDetails>;
}
/** MODEL CreateWorkflowStatusDetails */
export interface CreateWorkflowStatusDetails {
  /**
   * The ID of the status.
   */
  id: string;
  /**
   * The properties of the status.
   */
  properties?: unknown;
}
/** MODEL CreateWorkflowTransitionDetails */
export interface CreateWorkflowTransitionDetails {
  /**
   * The description of the transition. The maximum length is 1000 characters.
   */
  description?: string;
  /**
   * The statuses the transition can start from.
   */
  from?: string[];
  /**
   * The name of the transition. The maximum length is 60 characters.
   */
  name: string;
  /**
   * The properties of the transition.
   */
  properties?: unknown;
  /**
   * The rules of the transition.
   */
  rules?: CreateWorkflowTransitionRulesDetails;
  /**
   * The screen of the transition.
   */
  screen?: CreateWorkflowTransitionScreenDetails;
  /**
   * The status the transition goes to.
   */
  to: string;
  /**
   * The type of the transition.
   */
  type: string;
}
/** MODEL CreateWorkflowTransitionRule */
export interface CreateWorkflowTransitionRule {
  /**
   * EXPERIMENTAL. The configuration of the transition rule.
   */
  configuration?: unknown;
  /**
   * The type of the transition rule.
   */
  type: string;
}
/** MODEL CreateWorkflowTransitionRulesDetails */
export interface CreateWorkflowTransitionRulesDetails {
  /**
   * The workflow conditions.
   */
  conditions?: CreateWorkflowCondition;
  /**
   * The workflow post functions.
   * 
   * **Note:** The default post functions are always added to the *initial* transition, as in:
   * 
   *     "postFunctions": [
   *         {
   *             "type": "IssueCreateFunction"
   *         },
   *         {
   *             "type": "IssueReindexFunction"
   *         },
   *         {
   *             "type": "FireIssueEventFunction",
   *             "configuration": {
   *                 "event": {
   *                     "id": "1",
   *                     "name": "issue_created"
   *                 }
   *             }
   *         }
   *     ]
   * 
   * **Note:** The default post functions are always added to the *global* and *directed* transitions, as in:
   * 
   *     "postFunctions": [
   *         {
   *             "type": "UpdateIssueStatusFunction"
   *         },
   *         {
   *             "type": "CreateCommentFunction"
   *         },
   *         {
   *             "type": "GenerateChangeHistoryFunction"
   *         },
   *         {
   *             "type": "IssueReindexFunction"
   *         },
   *         {
   *             "type": "FireIssueEventFunction",
   *             "configuration": {
   *                 "event": {
   *                     "id": "13",
   *                     "name": "issue_generic"
   *                 }
   *             }
   *         }
   *     ]
   */
  postFunctions?: Array<CreateWorkflowTransitionRule>;
  /**
   * The workflow validators.
   * 
   * **Note:** The default permission validator is always added to the *initial* transition, as in:
   * 
   *     "validators": [
   *         {
   *             "type": "PermissionValidator",
   *             "configuration": {
   *                 "permissionKey": "CREATE_ISSUES"
   *             }
   *         }
   *     ]
   */
  validators?: Array<CreateWorkflowTransitionRule>;
}
/** MODEL CreateWorkflowTransitionScreenDetails */
export interface CreateWorkflowTransitionScreenDetails {
  /**
   * The ID of the screen.
   */
  id: string;
}
/** MODEL CreatedIssue */
export interface CreatedIssue {
  /**
   * The ID of the created issue or subtask.
   */
  id?: string;
  /**
   * The key of the created issue or subtask.
   */
  key?: string;
  /**
   * The URL of the created issue or subtask.
   */
  self?: string;
  /**
   * The response code and messages related to any requested transition.
   */
  transition?: NestedResponse;
  /**
   * The response code and messages related to any requested watchers.
   */
  watchers?: NestedResponse;
}
/** MODEL CreatedIssues */
export interface CreatedIssues {
  /**
   * Error details for failed issue creation requests.
   */
  errors?: Array<BulkOperationErrorResult>;
  /**
   * Details of the issues created.
   */
  issues?: Array<CreatedIssue>;
}
/** MODEL CustomContextVariable */
export interface CustomContextVariable {
  /**
   * Type of custom context variable.
   */
  type: string;
}
/** MODEL CustomFieldConfigurations */
export interface CustomFieldConfigurations {
  /**
   * The list of custom field configuration details.
   */
  configurations: Array<ContextualConfiguration>;
}
/** MODEL CustomFieldContext */
export interface CustomFieldContext {
  /**
   * The description of the context.
   */
  description: string;
  /**
   * The ID of the context.
   */
  id: string;
  /**
   * Whether the context apply to all issue types.
   */
  isAnyIssueType: boolean;
  /**
   * Whether the context is global.
   */
  isGlobalContext: boolean;
  /**
   * The name of the context.
   */
  name: string;
}
/** MODEL CustomFieldContextDefaultValue */
// deno-lint-ignore no-empty-interface
export interface CustomFieldContextDefaultValue {
}
/** MODEL CustomFieldContextDefaultValueCascadingOption */
export interface CustomFieldContextDefaultValueCascadingOption {
  /**
   * The ID of the default cascading option.
   */
  cascadingOptionId?: string;
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The ID of the default option.
   */
  optionId: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueDate */
export interface CustomFieldContextDefaultValueDate {
  /**
   * The default date in ISO format. Ignored if `useCurrent` is true.
   */
  date?: string;
  type: string;
  /**
   * Whether to use the current date.
   * default Value false
   */
  useCurrent?: boolean;
}
/** MODEL CustomFieldContextDefaultValueDateTime */
export interface CustomFieldContextDefaultValueDateTime {
  /**
   * The default date-time in ISO format. Ignored if `useCurrent` is true.
   */
  dateTime?: string;
  type: string;
  /**
   * Whether to use the current date.
   * default Value false
   */
  useCurrent?: boolean;
}
/** MODEL CustomFieldContextDefaultValueFloat */
export interface CustomFieldContextDefaultValueFloat {
  /**
   * The default floating-point number.
   * @format: "double"
   */
  number: number;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueForgeDateTimeField */
export interface CustomFieldContextDefaultValueForgeDateTimeField {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The default date-time in ISO format. Ignored if `useCurrent` is true.
   */
  dateTime?: string;
  type: string;
  /**
   * Whether to use the current date.
   * default Value false
   */
  useCurrent?: boolean;
}
/** MODEL CustomFieldContextDefaultValueForgeGroupField */
export interface CustomFieldContextDefaultValueForgeGroupField {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The ID of the the default group.
   */
  groupId: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueForgeMultiGroupField */
export interface CustomFieldContextDefaultValueForgeMultiGroupField {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The IDs of the default groups.
   */
  groupIds: string[];
  type: string;
}
/** MODEL CustomFieldContextDefaultValueForgeMultiStringField */
export interface CustomFieldContextDefaultValueForgeMultiStringField {
  type: string;
  /**
   * List of string values. The maximum length for a value is 254 characters.
   */
  values?: string[];
}
/** MODEL CustomFieldContextDefaultValueForgeMultiUserField */
export interface CustomFieldContextDefaultValueForgeMultiUserField {
  /**
   * The IDs of the default users.
   */
  accountIds: string[];
  /**
   * The ID of the context.
   */
  contextId: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueForgeNumberField */
export interface CustomFieldContextDefaultValueForgeNumberField {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The default floating-point number.
   * @format: "double"
   */
  number: number;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueForgeObjectField */
export interface CustomFieldContextDefaultValueForgeObjectField {
  /**
   * The default JSON object.
   */
  object?: unknown;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueForgeStringField */
export interface CustomFieldContextDefaultValueForgeStringField {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The default text. The maximum length is 254 characters.
   */
  text?: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueForgeUserField */
export interface CustomFieldContextDefaultValueForgeUserField {
  /**
   * The ID of the default user.
   */
  accountId: string;
  /**
   * The ID of the context.
   */
  contextId: string;
  type: string;
  /**
   * Ref: #/components/schemas/UserFilter
   */
  userFilter: UserFilter;
}
/** MODEL CustomFieldContextDefaultValueLabels */
export interface CustomFieldContextDefaultValueLabels {
  /**
   * The default labels value.
   */
  labels: string[];
  type: string;
}
/** MODEL CustomFieldContextDefaultValueMultiUserPicker */
export interface CustomFieldContextDefaultValueMultiUserPicker {
  /**
   * The IDs of the default users.
   */
  accountIds: string[];
  /**
   * The ID of the context.
   */
  contextId: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueMultipleGroupPicker */
export interface CustomFieldContextDefaultValueMultipleGroupPicker {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The IDs of the default groups.
   */
  groupIds: string[];
  type: string;
}
/** MODEL CustomFieldContextDefaultValueMultipleOption */
export interface CustomFieldContextDefaultValueMultipleOption {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The list of IDs of the default options.
   */
  optionIds: string[];
  type: string;
}
/** MODEL CustomFieldContextDefaultValueMultipleVersionPicker */
export interface CustomFieldContextDefaultValueMultipleVersionPicker {
  type: string;
  /**
   * The IDs of the default versions.
   */
  versionIds: string[];
  /**
   * The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
   */
  versionOrder?: string;
}
/** MODEL CustomFieldContextDefaultValueProject */
export interface CustomFieldContextDefaultValueProject {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The ID of the default project.
   */
  projectId: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueReadOnly */
export interface CustomFieldContextDefaultValueReadOnly {
  /**
   * The default text. The maximum length is 255 characters.
   */
  text?: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueSingleGroupPicker */
export interface CustomFieldContextDefaultValueSingleGroupPicker {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The ID of the the default group.
   */
  groupId: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueSingleOption */
export interface CustomFieldContextDefaultValueSingleOption {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * The ID of the default option.
   */
  optionId: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueSingleVersionPicker */
export interface CustomFieldContextDefaultValueSingleVersionPicker {
  type: string;
  /**
   * The ID of the default version.
   */
  versionId: string;
  /**
   * The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
   */
  versionOrder?: string;
}
/** MODEL CustomFieldContextDefaultValueTextArea */
export interface CustomFieldContextDefaultValueTextArea {
  /**
   * The default text. The maximum length is 32767 characters.
   */
  text?: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueTextField */
export interface CustomFieldContextDefaultValueTextField {
  /**
   * The default text. The maximum length is 254 characters.
   */
  text?: string;
  type: string;
}
/** MODEL CustomFieldContextDefaultValueURL */
export interface CustomFieldContextDefaultValueURL {
  /**
   * The ID of the context.
   */
  contextId: string;
  type: string;
  /**
   * The default URL.
   */
  url: string;
}
/** MODEL CustomFieldContextDefaultValueUpdate */
export interface CustomFieldContextDefaultValueUpdate {
  defaultValues?: Array<CustomFieldContextDefaultValue>;
}
/** MODEL CustomFieldContextOption */
export interface CustomFieldContextOption {
  /**
   * Whether the option is disabled.
   */
  disabled: boolean;
  /**
   * The ID of the custom field option.
   */
  id: string;
  /**
   * For cascading options, the ID of the custom field option containing the cascading option.
   */
  optionId?: string;
  /**
   * The value of the custom field option.
   */
  value: string;
}
/** MODEL CustomFieldContextProjectMapping */
export interface CustomFieldContextProjectMapping {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * Whether context is global.
   */
  isGlobalContext?: boolean;
  /**
   * The ID of the project.
   */
  projectId?: string;
}
/** MODEL CustomFieldContextSingleUserPickerDefaults */
export interface CustomFieldContextSingleUserPickerDefaults {
  /**
   * The ID of the default user.
   */
  accountId: string;
  /**
   * The ID of the context.
   */
  contextId: string;
  type: string;
  /**
   * Ref: #/components/schemas/UserFilter
   */
  userFilter: UserFilter;
}
/** MODEL CustomFieldContextUpdateDetails */
export interface CustomFieldContextUpdateDetails {
  /**
   * The description of the custom field context. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The name of the custom field context. The name must be unique. The maximum length is 255 characters.
   */
  name?: string;
}
/** MODEL CustomFieldCreatedContextOptionsList */
export interface CustomFieldCreatedContextOptionsList {
  /**
   * The created custom field options.
   */
  options?: Array<CustomFieldContextOption>;
}
/** MODEL CustomFieldDefinitionJsonBean */
export interface CustomFieldDefinitionJsonBean {
  /**
   * The description of the custom field, which is displayed in Jira.
   */
  description?: string;
  /**
   * The name of the custom field, which is displayed in Jira. This is not the unique identifier.
   */
  name: string;
  /**
   * The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.  
   * The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):
   * 
   *  *  `cascadingselect`: `cascadingselectsearcher`
   *  *  `datepicker`: `daterange`
   *  *  `datetime`: `datetimerange`
   *  *  `float`: `exactnumber` or `numberrange`
   *  *  `grouppicker`: `grouppickersearcher`
   *  *  `importid`: `exactnumber` or `numberrange`
   *  *  `labels`: `labelsearcher`
   *  *  `multicheckboxes`: `multiselectsearcher`
   *  *  `multigrouppicker`: `multiselectsearcher`
   *  *  `multiselect`: `multiselectsearcher`
   *  *  `multiuserpicker`: `userpickergroupsearcher`
   *  *  `multiversion`: `versionsearcher`
   *  *  `project`: `projectsearcher`
   *  *  `radiobuttons`: `multiselectsearcher`
   *  *  `readonlyfield`: `textsearcher`
   *  *  `select`: `multiselectsearcher`
   *  *  `textarea`: `textsearcher`
   *  *  `textfield`: `textsearcher`
   *  *  `url`: `exacttextsearcher`
   *  *  `userpicker`: `userpickergroupsearcher`
   *  *  `version`: `versionsearcher`
   * 
   * If no searcher is provided, the field isn't searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable.
   */
  searcherKey?: string;
  /**
   * The type of the custom field. These built-in custom field types are available:
   * 
   *  *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)
   *  *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)
   *  *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)
   *  *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)
   *  *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)
   *  *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)
   *  *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)
   *  *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)
   *  *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)
   *  *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)
   *  *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)
   *  *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)
   *  *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)
   *  *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)
   *  *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)
   *  *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)
   *  *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)
   *  *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)
   *  *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)
   *  *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)
   *  *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)
   * 
   * To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`.
   */
  type: string;
}
/** MODEL CustomFieldOption */
export interface CustomFieldOption {
  /**
   * The URL of these custom field option details.
   * @format: "uri"
   */
  self?: string;
  /**
   * The value of the custom field option.
   */
  value?: string;
}
/** MODEL CustomFieldOptionCreate */
export interface CustomFieldOptionCreate {
  /**
   * Whether the option is disabled.
   */
  disabled?: boolean;
  /**
   * For cascading options, the ID of the custom field object containing the cascading option.
   */
  optionId?: string;
  /**
   * The value of the custom field option.
   */
  value: string;
}
/** MODEL CustomFieldOptionUpdate */
export interface CustomFieldOptionUpdate {
  /**
   * Whether the option is disabled.
   */
  disabled?: boolean;
  /**
   * The ID of the custom field option.
   */
  id: string;
  /**
   * The value of the custom field option.
   */
  value?: string;
}
/** MODEL CustomFieldReplacement */
export interface CustomFieldReplacement {
  /**
   * The ID of the custom field in which to replace the version number.
   * @format: "int64"
   */
  customFieldId?: number;
  /**
   * The version number to use as a replacement for the deleted version.
   * @format: "int64"
   */
  moveTo?: number;
}
/** MODEL CustomFieldUpdatedContextOptionsList */
export interface CustomFieldUpdatedContextOptionsList {
  /**
   * The updated custom field options.
   */
  options?: Array<CustomFieldOptionUpdate>;
}
/** MODEL CustomFieldValueUpdate */
export interface CustomFieldValueUpdate {
  /**
   * The list of issue IDs.
   */
  issueIds: string[];
  /**
   * The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
   * 
   *  *  `string` the value must be a string.
   *  *  `number` the value must be a number.
   *  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
   *  *  `user` the value must be an object that contains the `accountId` field.
   *  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
   * 
   * A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
   */
  value: string;
}
/** MODEL CustomFieldValueUpdateDetails */
export interface CustomFieldValueUpdateDetails {
  /**
   * The list of custom field update details.
   */
  updates?: Array<CustomFieldValueUpdate>;
}
/** MODEL Dashboard */
export interface Dashboard {
  /**
   * The automatic refresh interval for the dashboard in milliseconds.
   * @format: "int32"
   */
  automaticRefreshMs?: number;
  description?: string;
  /**
   * The details of any edit share permissions for the dashboard.
   */
  editPermissions?: Array<SharePermission>;
  /**
   * The ID of the dashboard.
   */
  id?: string;
  /**
   * Whether the dashboard is selected as a favorite by the user.
   */
  isFavourite?: boolean;
  /**
   * Whether the current user has permission to edit the dashboard.
   */
  isWritable?: boolean;
  /**
   * The name of the dashboard.
   */
  name?: string;
  /**
   * The owner of the dashboard.
   */
  owner?: UserBean;
  /**
   * The number of users who have this dashboard as a favorite.
   * @format: "int64"
   */
  popularity?: number;
  /**
   * The rank of this dashboard.
   * @format: "int32"
   */
  rank?: number;
  /**
   * The URL of these dashboard details.
   * @format: "uri"
   */
  self?: string;
  /**
   * The details of any view share permissions for the dashboard.
   */
  sharePermissions?: Array<SharePermission>;
  /**
   * Whether the current dashboard is system dashboard.
   */
  systemDashboard?: boolean;
  /**
   * The URL of the dashboard.
   */
  view?: string;
}
/** MODEL DashboardDetails */
export interface DashboardDetails {
  /**
   * The description of the dashboard.
   */
  description?: string;
  /**
   * The edit permissions for the dashboard.
   */
  editPermissions: Array<SharePermission>;
  /**
   * The name of the dashboard.
   */
  name: string;
  /**
   * The share permissions for the dashboard.
   */
  sharePermissions: Array<SharePermission>;
}
/** MODEL DashboardGadget */
export interface DashboardGadget {
  /**
   * The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
   */
  color: string;
  /**
   * The ID of the gadget instance.
   * @format: "int64"
   */
  id: number;
  /**
   * The module key of the gadget type.
   */
  moduleKey?: string;
  /**
   * The position of the gadget.
   */
  position: DashboardGadgetPosition;
  /**
   * The title of the gadget.
   */
  title: string;
  /**
   * The URI of the gadget type.
   */
  uri?: string;
}
/** MODEL DashboardGadgetPosition */
export interface DashboardGadgetPosition {
  /**
   * @format: "int32"
   */
  "The column position of the gadget.": number;
  /**
   * @format: "int32"
   */
  "The row position of the gadget.": number;
}
/** MODEL DashboardGadgetResponse */
export interface DashboardGadgetResponse {
  /**
   * The list of gadgets.
   */
  gadgets: Array<DashboardGadget>;
}
/** MODEL DashboardGadgetSettings */
export interface DashboardGadgetSettings {
  /**
   * The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
   */
  color?: string;
  /**
   * Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
   */
  ignoreUriAndModuleKeyValidation?: boolean;
  /**
   * The module key of the gadget type. Can't be provided with `uri`.
   */
  moduleKey?: string;
  /**
   * The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.
   */
  position?: DashboardGadgetPosition;
  /**
   * The title of the gadget.
   */
  title?: string;
  /**
   * The URI of the gadget type. Can't be provided with `moduleKey`.
   */
  uri?: string;
}
/** MODEL DashboardGadgetUpdateRequest */
export interface DashboardGadgetUpdateRequest {
  /**
   * The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
   */
  color?: string;
  /**
   * The position of the gadget.
   */
  position?: DashboardGadgetPosition;
  /**
   * The title of the gadget.
   */
  title?: string;
}
/** MODEL DataClassificationLevelsBean */
export interface DataClassificationLevelsBean {
  /**
   * The data classifications.
   */
  classifications?: Array<DataClassificationTagBean>;
}
/** MODEL DataClassificationTagBean */
export interface DataClassificationTagBean {
  /**
   * The color of the data classification object.
   */
  color?: string;
  /**
   * The description of the data classification object.
   */
  description?: string;
  /**
   * The guideline of the data classification object.
   */
  guideline?: string;
  /**
   * The ID of the data classification object.
   */
  id: string;
  /**
   * The name of the data classification object.
   */
  name?: string;
  /**
   * The rank of the data classification object.
   * @format: "int32"
   */
  rank?: number;
  /**
   * The status of the data classification object.
   */
  status: string;
}
/** MODEL DateRangeFilterRequest */
export interface DateRangeFilterRequest {
  /**
   * List issues archived after a specified date, passed in the YYYY-MM-DD format.
   */
  dateAfter: string;
  /**
   * List issues archived before a specified date provided in the YYYY-MM-DD format.
   */
  dateBefore: string;
}
/** MODEL DefaultLevelValue */
export interface DefaultLevelValue {
  /**
   * The ID of the issue security level to set as default for the specified scheme. Providing null will reset the default level.
   */
  defaultLevelId: string;
  /**
   * The ID of the issue security scheme to set default level for.
   */
  issueSecuritySchemeId: string;
}
/** MODEL DefaultShareScope */
export interface DefaultShareScope {
  /**
   * The scope of the default sharing for new filters and dashboards:
   * 
   *  *  `AUTHENTICATED` Shared with all logged-in users.
   *  *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
   *  *  `PRIVATE` Not shared with any users.
   */
  scope: string;
}
/** MODEL DefaultWorkflow */
export interface DefaultWorkflow {
  /**
   * Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`.
   */
  updateDraftIfNeeded?: boolean;
  /**
   * The name of the workflow to set as the default workflow.
   */
  workflow: string;
}
/** MODEL DeleteAndReplaceVersionBean */
export interface DeleteAndReplaceVersionBean {
  /**
   * An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.
   */
  customFieldReplacementList?: Array<CustomFieldReplacement>;
  /**
   * The ID of the version to update `affectedVersion` to when the field contains the deleted version.
   * @format: "int64"
   */
  moveAffectedIssuesTo?: number;
  /**
   * The ID of the version to update `fixVersion` to when the field contains the deleted version.
   * @format: "int64"
   */
  moveFixIssuesTo?: number;
}
/** MODEL DeprecatedWorkflow */
export interface DeprecatedWorkflow {
  default?: boolean;
  /**
   * The description of the workflow.
   */
  description?: string;
  /**
   * The datetime the workflow was last modified.
   */
  lastModifiedDate?: string;
  /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  lastModifiedUser?: string;
  /**
   * The account ID of the user that last modified the workflow.
   */
  lastModifiedUserAccountId?: string;
  /**
   * The name of the workflow.
   */
  name?: string;
  /**
   * The scope where this workflow applies
   */
  scope?: Scope;
  /**
   * The number of steps included in the workflow.
   * @format: "int32"
   */
  steps?: number;
}
/** MODEL DetailedErrorCollection */
export interface DetailedErrorCollection {
  /**
   * Map of objects representing additional details for an error
   */
  details?: unknown;
  /**
   * The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
   */
  errorMessages?: string[];
  /**
   * The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
   */
  errors?: unknown;
}
/** MODEL DocumentVersion */
export interface DocumentVersion {
  /**
   * The version UUID.
   */
  id: string;
  /**
   * The version number.
   * @format: "int64"
   */
  versionNumber: number;
}
/** MODEL EntityProperty */
export interface EntityProperty {
  /**
   * The key of the property. Required on create and update.
   */
  key?: string;
  /**
   * The value of the property. Required on create and update.
   */
  value?: string;
}
/** MODEL EntityPropertyDetails */
export interface EntityPropertyDetails {
  /**
   * The entity property ID.
   * @example: "123"
   */
  entityId: number;
  /**
   * The entity property key.
   * @example: "mykey"
   */
  key: string;
  /**
   * The new value of the entity property.
   * @example: "newValue"
   */
  value: string;
}
/** MODEL Error */
export interface Error {
  /**
   * @format: "int64"
   */
  count?: number;
  issueIdsOrKeys?: string[];
  message?: string;
}
/** MODEL ErrorCollection */
export interface ErrorCollection {
  /**
   * The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
   */
  errorMessages?: string[];
  /**
   * The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
   */
  errors?: unknown;
  /**
   * @format: "int32"
   */
  status?: number;
}
/** MODEL ErrorCollections */
// deno-lint-ignore no-empty-interface
export interface ErrorCollections {
}
/** MODEL ErrorMessage */
export interface ErrorMessage {
  message?: string;
}
/** MODEL Errors */
export interface Errors {
  /**
   * Ref: #/components/schemas/Error
   */
  issueIsSubtask?: Error;
  /**
   * Ref: #/components/schemas/Error
   */
  issuesInArchivedProjects?: Error;
  /**
   * Ref: #/components/schemas/Error
   */
  issuesInUnlicensedProjects?: Error;
  /**
   * Ref: #/components/schemas/Error
   */
  issuesNotFound?: Error;
}
/** MODEL EventNotification */
export interface EventNotification {
  /**
   * The email address.
   */
  emailAddress?: string;
  /**
   * Expand options that include additional event notification details in the response.
   */
  expand?: string;
  /**
   * The custom user or group field.
   */
  field?: FieldDetails;
  /**
   * The specified group.
   */
  group?: GroupName;
  /**
   * The ID of the notification.
   * @format: "int64"
   */
  id?: number;
  /**
   * Identifies the recipients of the notification.
   */
  notificationType?: string;
  /**
   * As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:
   * 
   *  *  `User` The `parameter` is the user account ID.
   *  *  `Group` The `parameter` is the group name.
   *  *  `ProjectRole` The `parameter` is the project role ID.
   *  *  `UserCustomField` The `parameter` is the ID of the custom field.
   *  *  `GroupCustomField` The `parameter` is the ID of the custom field.
   */
  parameter?: string;
  /**
   * The specified project role.
   */
  projectRole?: ProjectRole;
  /**
   * The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:
   * 
   *  *  `User`, `recipient` is the user account ID.
   *  *  `Group`, `recipient` is the group ID.
   *  *  `ProjectRole`, `recipient` is the project role ID.
   *  *  `UserCustomField`, `recipient` is the ID of the custom field.
   *  *  `GroupCustomField`, `recipient` is the ID of the custom field.
   */
  recipient?: string;
  /**
   * The specified user.
   */
  user?: UserDetails;
}
/** MODEL ExpandPrioritySchemeBean */
export interface ExpandPrioritySchemeBean {
  /**
   * The ID of the priority scheme.
   */
  id?: string;
  /**
   * The name of the priority scheme.
   */
  name?: string;
  /**
   * The URL of the priority scheme.
   */
  self?: string;
}
/** MODEL ExpandPrioritySchemePage */
export interface ExpandPrioritySchemePage {
  /**
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * @format: "int64"
   */
  startAt?: number;
  /**
   * @format: "int64"
   */
  total?: number;
}
/** MODEL ExportArchivedIssuesTaskProgressResponse */
export interface ExportArchivedIssuesTaskProgressResponse {
  fileUrl?: string;
  payload?: string;
  /**
   * @format: "int64"
   */
  progress?: number;
  status?: string;
  /**
   * @format: "date-time"
   */
  submittedTime?: string;
  taskId?: string;
}
/** MODEL FailedWebhook */
export interface FailedWebhook {
  /**
   * The webhook body.
   */
  body?: string;
  /**
   * The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
   * @format: "int64"
   */
  failureTime: number;
  /**
   * The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook.
   */
  id: string;
  /**
   * The original webhook destination.
   */
  url: string;
}
/** MODEL FailedWebhooks */
export interface FailedWebhooks {
  /**
   * The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.
   * @format: "int32"
   */
  maxResults: number;
  /**
   * The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).
   * @format: "uri"
   */
  next?: string;
  /**
   * The list of webhooks.
   */
  values: Array<FailedWebhook>;
}
/** MODEL Field */
export interface Field {
  /**
   * Number of contexts where the field is used.
   * @format: "int64"
   */
  contextsCount?: number;
  /**
   * The description of the field.
   */
  description?: string;
  /**
   * The ID of the field.
   */
  id: string;
  /**
   * Whether the field is locked.
   */
  isLocked?: boolean;
  /**
   * Whether the field is shown on screen or not.
   */
  isUnscreenable?: boolean;
  /**
   * The key of the field.
   */
  key?: string;
  /**
   * Ref: #/components/schemas/FieldLastUsed
   */
  lastUsed?: FieldLastUsed;
  /**
   * The name of the field.
   */
  name: string;
  /**
   * Number of projects where the field is used.
   * @format: "int64"
   */
  projectsCount?: number;
  /**
   * Ref: #/components/schemas/JsonTypeBean
   */
  schema: JsonTypeBean;
  /**
   * Number of screens where the field is used.
   * @format: "int64"
   */
  screensCount?: number;
  /**
   * The searcher key of the field. Returned for custom fields.
   */
  searcherKey?: string;
  /**
   * The stable ID of the field.
   */
  stableId?: string;
}
/** MODEL FieldChangedClause */
export interface FieldChangedClause {
  /**
   * Ref: #/components/schemas/JqlQueryField
   */
  field: JqlQueryField;
  /**
   * The operator applied to the field.
   */
  operator: string;
  /**
   * The list of time predicates.
   */
  predicates: Array<JqlQueryClauseTimePredicate>;
}
/** MODEL FieldConfiguration */
export interface FieldConfiguration {
  /**
   * The description of the field configuration.
   */
  description: string;
  /**
   * The ID of the field configuration.
   * @format: "int64"
   */
  id: number;
  /**
   * Whether the field configuration is the default.
   */
  isDefault?: boolean;
  /**
   * The name of the field configuration.
   */
  name: string;
}
/** MODEL FieldConfigurationDetails */
export interface FieldConfigurationDetails {
  /**
   * The description of the field configuration.
   */
  description?: string;
  /**
   * The name of the field configuration. Must be unique.
   */
  name: string;
}
/** MODEL FieldConfigurationIssueTypeItem */
export interface FieldConfigurationIssueTypeItem {
  /**
   * The ID of the field configuration.
   */
  fieldConfigurationId: string;
  /**
   * The ID of the field configuration scheme.
   */
  fieldConfigurationSchemeId: string;
  /**
   * The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration.
   */
  issueTypeId: string;
}
/** MODEL FieldConfigurationItem */
export interface FieldConfigurationItem {
  /**
   * The description of the field within the field configuration.
   */
  description?: string;
  /**
   * The ID of the field within the field configuration.
   */
  id: string;
  /**
   * Whether the field is hidden in the field configuration.
   */
  isHidden?: boolean;
  /**
   * Whether the field is required in the field configuration.
   */
  isRequired?: boolean;
  /**
   * The renderer type for the field within the field configuration.
   */
  renderer?: string;
}
/** MODEL FieldConfigurationItemsDetails */
export interface FieldConfigurationItemsDetails {
  /**
   * Details of fields in a field configuration.
   */
  fieldConfigurationItems: Array<FieldConfigurationItem>;
}
/** MODEL FieldConfigurationScheme */
export interface FieldConfigurationScheme {
  /**
   * The description of the field configuration scheme.
   */
  description?: string;
  /**
   * The ID of the field configuration scheme.
   */
  id: string;
  /**
   * The name of the field configuration scheme.
   */
  name: string;
}
/** MODEL FieldConfigurationSchemeProjectAssociation */
export interface FieldConfigurationSchemeProjectAssociation {
  /**
   * The ID of the field configuration scheme. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
   */
  fieldConfigurationSchemeId?: string;
  /**
   * The ID of the project.
   */
  projectId: string;
}
/** MODEL FieldConfigurationSchemeProjects */
export interface FieldConfigurationSchemeProjects {
  /**
   * Ref: #/components/schemas/FieldConfigurationScheme
   */
  fieldConfigurationScheme?: FieldConfigurationScheme;
  /**
   * The IDs of projects using the field configuration scheme.
   */
  projectIds: string[];
}
/** MODEL FieldConfigurationToIssueTypeMapping */
export interface FieldConfigurationToIssueTypeMapping {
  /**
   * The ID of the field configuration.
   */
  fieldConfigurationId: string;
  /**
   * The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. An issue type can be included only once in a request.
   */
  issueTypeId: string;
}
/** MODEL FieldCreateMetadata */
export interface FieldCreateMetadata {
  /**
   * The list of values allowed in the field.
   */
  allowedValues?: string[];
  /**
   * The URL that can be used to automatically complete the field.
   */
  autoCompleteUrl?: string;
  /**
   * The configuration properties.
   */
  configuration?: unknown;
  /**
   * The default value of the field.
   */
  defaultValue?: string;
  /**
   * The field id.
   */
  fieldId: string;
  /**
   * Whether the field has a default value.
   */
  hasDefaultValue?: boolean;
  /**
   * The key of the field.
   */
  key: string;
  /**
   * The name of the field.
   */
  name: string;
  /**
   * The list of operations that can be performed on the field.
   */
  operations: string[];
  /**
   * Whether the field is required.
   */
  required: boolean;
  /**
   * The data type of the field.
   */
  schema: JsonTypeBean;
}
/** MODEL FieldDetails */
export interface FieldDetails {
  /**
   * The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
   */
  clauseNames?: string[];
  /**
   * Whether the field is a custom field.
   */
  custom?: boolean;
  /**
   * The ID of the field.
   */
  id?: string;
  /**
   * The key of the field.
   */
  key?: string;
  /**
   * The name of the field.
   */
  name?: string;
  /**
   * Whether the field can be used as a column on the issue navigator.
   */
  navigable?: boolean;
  /**
   * Whether the content of the field can be used to order lists.
   */
  orderable?: boolean;
  /**
   * The data schema for the field.
   */
  schema?: JsonTypeBean;
  /**
   * The scope of the field.
   */
  scope?: Scope;
  /**
   * Whether the content of the field can be searched.
   */
  searchable?: boolean;
}
/** MODEL FieldLastUsed */
export interface FieldLastUsed {
  /**
   * Last used value type:
   * 
   *  *  *TRACKED*: field is tracked and a last used date is available.
   *  *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
   *  *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
   */
  type?: string;
  /**
   * The date when the value of the field last changed.
   * @format: "date-time"
   */
  value?: string;
}
/** MODEL FieldMetadata */
export interface FieldMetadata {
  /**
   * The list of values allowed in the field.
   */
  allowedValues?: string[];
  /**
   * The URL that can be used to automatically complete the field.
   */
  autoCompleteUrl?: string;
  /**
   * The configuration properties.
   */
  configuration?: unknown;
  /**
   * The default value of the field.
   */
  defaultValue?: string;
  /**
   * Whether the field has a default value.
   */
  hasDefaultValue?: boolean;
  /**
   * The key of the field.
   */
  key: string;
  /**
   * The name of the field.
   */
  name: string;
  /**
   * The list of operations that can be performed on the field.
   */
  operations: string[];
  /**
   * Whether the field is required.
   */
  required: boolean;
  /**
   * The data type of the field.
   */
  schema: JsonTypeBean;
}
/** MODEL FieldReferenceData */
export interface FieldReferenceData {
  /**
   * Whether the field provide auto-complete suggestions.
   */
  auto?: string;
  /**
   * If the item is a custom field, the ID of the custom field.
   */
  cfid?: string;
  /**
   * Whether this field has been deprecated.
   */
  deprecated?: string;
  /**
   * The searcher key of the field, only passed when the field is deprecated.
   */
  deprecatedSearcherKey?: string;
  /**
   * The display name contains the following:
   * 
   *  *  for system fields, the field name. For example, `Summary`.
   *  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
   *  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
   */
  displayName?: string;
  /**
   * The valid search operators for the field.
   */
  operators?: string[];
  /**
   * Whether the field can be used in a query's `ORDER BY` clause.
   */
  orderable?: string;
  /**
   * Whether the content of this field can be searched.
   */
  searchable?: string;
  /**
   * The data types of items in the field.
   */
  types?: string[];
  /**
   * The field identifier.
   */
  value?: string;
}
/** MODEL FieldUpdateOperation */
export interface FieldUpdateOperation {
  /**
   * The value to add to the field.
   */
  add?: string;
  /**
   * The field value to copy from another issue.
   */
  copy?: string;
  /**
   * The value to edit in the field.
   */
  edit?: string;
  /**
   * The value to removed from the field.
   */
  remove?: string;
  /**
   * The value to set in the field.
   */
  set?: string;
}
/** MODEL FieldValueClause */
export interface FieldValueClause {
  /**
   * Ref: #/components/schemas/JqlQueryField
   */
  field: JqlQueryField;
  /**
   * Ref: #/components/schemas/JqlQueryClauseOperand
   */
  operand: JqlQueryClauseOperand;
  /**
   * The operator between the field and operand.
   */
  operator: string;
}
/** MODEL FieldWasClause */
export interface FieldWasClause {
  /**
   * Ref: #/components/schemas/JqlQueryField
   */
  field: JqlQueryField;
  /**
   * Ref: #/components/schemas/JqlQueryClauseOperand
   */
  operand: JqlQueryClauseOperand;
  /**
   * The operator between the field and operand.
   */
  operator: string;
  /**
   * The list of time predicates.
   */
  predicates: Array<JqlQueryClauseTimePredicate>;
}
/** MODEL Fields */
export interface Fields {
  /**
   * The assignee of the linked issue.
   */
  assignee?: UserDetails;
  /**
   * The type of the linked issue.
   */
  issueType?: IssueTypeDetails;
  /**
   * The type of the linked issue.
   * Ref: #/components/schemas/IssueTypeDetails
   */
  issuetype?: IssueTypeDetails;
  /**
   * The priority of the linked issue.
   */
  priority?: Priority;
  /**
   * The status of the linked issue.
   */
  status?: StatusDetails;
  /**
   * The summary description of the linked issue.
   */
  summary?: string;
  /**
   * The time tracking of the linked issue.
   */
  timetracking?: TimeTrackingDetails;
}
/** MODEL Filter */
export interface Filter {
  /**
   * \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
   * @format: "date-time"
   */
  approximateLastUsed?: string;
  /**
   * A description of the filter.
   */
  description?: string;
  /**
   * The groups and projects that can edit the filter.
   */
  editPermissions?: Array<SharePermission>;
  /**
   * Whether the filter is selected as a favorite.
   */
  favourite?: boolean;
  /**
   * The count of how many users have selected this filter as a favorite, including the filter owner.
   * @format: "int64"
   */
  favouritedCount?: number;
  /**
   * The unique identifier for the filter.
   */
  id?: string;
  /**
   * The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
   */
  jql?: string;
  /**
   * The name of the filter. Must be unique.
   */
  name: string;
  /**
   * The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
   */
  owner?: User;
  /**
   * A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
   * @format: "uri"
   */
  searchUrl?: string;
  /**
   * The URL of the filter.
   * @format: "uri"
   */
  self?: string;
  /**
   * The groups and projects that the filter is shared with.
   */
  sharePermissions?: Array<SharePermission>;
  /**
   * A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with.
   */
  sharedUsers?: UserList;
  /**
   * A paginated list of the users that are subscribed to the filter.
   */
  subscriptions?: FilterSubscriptionsList;
  /**
   * A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
   * @format: "uri"
   */
  viewUrl?: string;
}
/** MODEL FilterDetails */
export interface FilterDetails {
  /**
   * \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
   * @format: "date-time"
   */
  approximateLastUsed?: string;
  /**
   * The description of the filter.
   */
  description?: string;
  /**
   * The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.
   */
  editPermissions?: Array<SharePermission>;
  /**
   * Expand options that include additional filter details in the response.
   */
  expand?: string;
  /**
   * Whether the filter is selected as a favorite by any users, not including the filter owner.
   */
  favourite?: boolean;
  /**
   * The count of how many users have selected this filter as a favorite, including the filter owner.
   * @format: "int64"
   */
  favouritedCount?: number;
  /**
   * The unique identifier for the filter.
   */
  id?: string;
  /**
   * The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
   */
  jql?: string;
  /**
   * The name of the filter.
   */
  name: string;
  /**
   * The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.
   */
  owner?: User;
  /**
   * A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
   * @format: "uri"
   */
  searchUrl?: string;
  /**
   * The URL of the filter.
   * @format: "uri"
   */
  self?: string;
  /**
   * The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
   */
  sharePermissions?: Array<SharePermission>;
  /**
   * The users that are subscribed to the filter.
   */
  subscriptions?: Array<FilterSubscription>;
  /**
   * A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
   * @format: "uri"
   */
  viewUrl?: string;
}
/** MODEL FilterSubscription */
export interface FilterSubscription {
  /**
   * The group subscribing to filter.
   */
  group?: GroupName;
  /**
   * The ID of the filter subscription.
   * @format: "int64"
   */
  id?: number;
  /**
   * The user subscribing to filter.
   */
  user?: User;
}
/** MODEL FilterSubscriptionsList */
export interface FilterSubscriptionsList {
  /**
   * The index of the last item returned on the page.
   * @format: "int32"
   */
  "end-index"?: number;
  /**
   * The list of items.
   */
  items?: Array<FilterSubscription>;
  /**
   * The maximum number of results that could be on the page.
   * @format: "int32"
   */
  "max-results"?: number;
  /**
   * The number of items on the page.
   * @format: "int32"
   */
  size?: number;
  /**
   * The index of the first item returned on the page.
   * @format: "int32"
   */
  "start-index"?: number;
}
/** MODEL FoundGroup */
export interface FoundGroup {
  /**
   * The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
   */
  groupId?: string;
  /**
   * The group name with the matched query string highlighted with the HTML bold tag.
   */
  html?: string;
  labels?: Array<GroupLabel>;
  /**
   * The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`
   */
  name?: string;
}
/** MODEL FoundGroups */
export interface FoundGroups {
  groups?: Array<FoundGroup>;
  /**
   * Header text indicating the number of groups in the response and the total number of groups found in the search.
   */
  header?: string;
  /**
   * The total number of groups found in the search.
   * @format: "int32"
   */
  total?: number;
}
/** MODEL FoundUsers */
export interface FoundUsers {
  /**
   * Header text indicating the number of users in the response and the total number of users found in the search.
   */
  header?: string;
  /**
   * The total number of users found in the search.
   * @format: "int32"
   */
  total?: number;
  users?: Array<UserPickerUser>;
}
/** MODEL FoundUsersAndGroups */
export interface FoundUsersAndGroups {
  /**
   * Ref: #/components/schemas/FoundGroups
   */
  groups?: FoundGroups;
  /**
   * Ref: #/components/schemas/FoundUsers
   */
  users?: FoundUsers;
}
/** MODEL FunctionOperand */
export interface FunctionOperand {
  /**
   * The list of function arguments.
   */
  arguments: string[];
  /**
   * Encoded operand, which can be used directly in a JQL query.
   */
  encodedOperand?: string;
  /**
   * The name of the function.
   */
  function: string;
}
/** MODEL FunctionReferenceData */
export interface FunctionReferenceData {
  /**
   * The display name of the function.
   */
  displayName?: string;
  /**
   * Whether the function can take a list of arguments.
   */
  isList?: string;
  /**
   * Whether the function supports both single and list value operators.
   */
  supportsListAndSingleValueOperators?: string;
  /**
   * The data types returned by the function.
   */
  types?: string[];
  /**
   * The function identifier.
   */
  value?: string;
}
/** MODEL GlobalScopeBean */
export interface GlobalScopeBean {
  /**
   * Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
   */
  attributes?: string[];
}
/** MODEL Group */
export interface Group {
  /**
   * Expand options that include additional group details in the response.
   */
  expand?: string;
  /**
   * The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
   */
  groupId?: string;
  /**
   * The name of group.
   */
  name?: string;
  /**
   * The URL for these group details.
   * @format: "uri"
   */
  self?: string;
  /**
   * A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.
   */
  users?: PagedListUserDetailsApplicationUser;
}
/** MODEL GroupDetails */
export interface GroupDetails {
  /**
   * The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
   */
  groupId?: string;
  /**
   * The name of the group.
   */
  name?: string;
}
/** MODEL GroupLabel */
export interface GroupLabel {
  /**
   * The group label name.
   */
  text?: string;
  /**
   * The title of the group label.
   */
  title?: string;
  /**
   * The type of the group label.
   */
  type?: string;
}
/** MODEL GroupName */
export interface GroupName {
  /**
   * The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
   */
  groupId?: string;
  /**
   * The name of group.
   */
  name?: string;
  /**
   * The URL for these group details.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL HealthCheckResult */
export interface HealthCheckResult {
  /**
   * The description of the Jira health check item.
   */
  description?: string;
  /**
   * The name of the Jira health check item.
   */
  name?: string;
  /**
   * Whether the Jira health check item passed or failed.
   */
  passed?: boolean;
}
/** MODEL Hierarchy */
export interface Hierarchy {
  /**
   * The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
   * @format: "int64"
   */
  baseLevelId?: number;
  /**
   * Details about the hierarchy level.
   */
  levels?: Array<SimplifiedHierarchyLevel>;
}
/** MODEL HistoryMetadata */
export interface HistoryMetadata {
  /**
   * The activity described in the history record.
   */
  activityDescription?: string;
  /**
   * The key of the activity described in the history record.
   */
  activityDescriptionKey?: string;
  /**
   * Details of the user whose action created the history record.
   */
  actor?: HistoryMetadataParticipant;
  /**
   * Details of the cause that triggered the creation the history record.
   */
  cause?: HistoryMetadataParticipant;
  /**
   * The description of the history record.
   */
  description?: string;
  /**
   * The description key of the history record.
   */
  descriptionKey?: string;
  /**
   * The description of the email address associated the history record.
   */
  emailDescription?: string;
  /**
   * The description key of the email address associated the history record.
   */
  emailDescriptionKey?: string;
  /**
   * Additional arbitrary information about the history record.
   */
  extraData?: unknown;
  /**
   * Details of the system that generated the history record.
   */
  generator?: HistoryMetadataParticipant;
  /**
   * The type of the history record.
   */
  type?: string;
}
/** MODEL HistoryMetadataParticipant */
export interface HistoryMetadataParticipant {
  /**
   * The URL to an avatar for the user or system associated with a history record.
   */
  avatarUrl?: string;
  /**
   * The display name of the user or system associated with a history record.
   */
  displayName?: string;
  /**
   * The key of the display name of the user or system associated with a history record.
   */
  displayNameKey?: string;
  /**
   * The ID of the user or system associated with a history record.
   */
  id?: string;
  /**
   * The type of the user or system associated with a history record.
   */
  type?: string;
  /**
   * The URL of the user or system associated with a history record.
   */
  url?: string;
}
/** MODEL Icon */
export interface Icon {
  /**
   * The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable.
   */
  link?: string;
  /**
   * The title of the icon. This is used as follows:
   * 
   *  *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
   *  *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link".
   */
  title?: string;
  /**
   * The URL of an icon that displays at 16x16 pixel in Jira.
   */
  url16x16?: string;
}
/** MODEL IconBean */
export interface IconBean {
  /**
   * The URL of the tooltip, used only for a status icon.
   */
  link?: string;
  /**
   * The title of the icon, for use as a tooltip on the icon.
   */
  title?: string;
  /**
   * The URL of a 16x16 pixel icon.
   */
  url16x16?: string;
}
/** MODEL IdBean */
export interface IdBean {
  /**
   * The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to get a list of permission scheme IDs.
   * @format: "int64"
   */
  id: number;
}
/** MODEL IdOrKeyBean */
export interface IdOrKeyBean {
  /**
   * The ID of the referenced item.
   * @format: "int64"
   */
  id?: number;
  /**
   * The key of the referenced item.
   */
  key?: string;
}
/** MODEL IdSearchRequestBean */
export interface IdSearchRequestBean {
  /**
   * A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. Order by clauses are not allowed.
   */
  jql?: string;
  /**
   * The maximum number of items to return per page.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The continuation token to fetch the next page. This token is provided by the response of this endpoint.
   */
  nextPageToken?: string;
}
/** MODEL IdSearchResults */
export interface IdSearchResults {
  /**
   * The list of issue IDs found by the search.
   */
  issueIds?: string[];
  /**
   * Continuation token to fetch the next page. If this result represents the last or the only page this token will be null.
   */
  nextPageToken?: string;
}
/** MODEL IncludedFields */
export interface IncludedFields {
  actuallyIncluded?: string[];
  excluded?: string[];
  included?: string[];
}
/** MODEL InputStreamSource */
export interface InputStreamSource {
  inputStream?: unknown;
}
/** MODEL IssueArchivalSyncRequest */
export interface IssueArchivalSyncRequest {
  issueIdsOrKeys?: string[];
}
/** MODEL IssueArchivalSyncResponse */
export interface IssueArchivalSyncResponse {
  /**
   * Ref: #/components/schemas/Errors
   */
  errors?: Errors;
  /**
   * @format: "int64"
   */
  numberOfIssuesUpdated?: number;
}
/** MODEL IssueBean */
export interface IssueBean {
  /**
   * Details of changelogs associated with the issue.
   */
  changelog?: PageOfChangelogs;
  /**
   * The metadata for the fields on the issue that can be amended.
   */
  editmeta?: IssueUpdateMetadata;
  /**
   * Expand options that include additional issue details in the response.
   */
  expand?: string;
  fields?: unknown;
  /**
   * Ref: #/components/schemas/IncludedFields
   */
  fieldsToInclude?: IncludedFields;
  /**
   * The ID of the issue.
   */
  id?: string;
  /**
   * The key of the issue.
   */
  key?: string;
  /**
   * The ID and name of each field present on the issue.
   */
  names?: unknown;
  /**
   * The operations that can be performed on the issue.
   */
  operations?: Operations;
  /**
   * Details of the issue properties identified in the request.
   */
  properties?: unknown;
  /**
   * The rendered value of each field present on the issue.
   */
  renderedFields?: unknown;
  /**
   * The schema describing each field present on the issue.
   */
  schema?: unknown;
  /**
   * The URL of the issue details.
   * @format: "uri"
   */
  self?: string;
  /**
   * The transitions that can be performed on the issue.
   */
  transitions?: Array<IssueTransition>;
  /**
   * The versions of each field on the issue.
   */
  versionedRepresentations?: unknown;
}
/** MODEL IssueBulkEditField */
export interface IssueBulkEditField {
  /**
   * Description of the field.
   */
  description?: string;
  /**
   * A list of options related to the field, applicable in contexts where multiple selections are allowed.
   */
  fieldOptions?: Array<IssueBulkOperationsFieldOption>;
  /**
   * The unique ID of the field.
   */
  id?: string;
  /**
   * Indicates whether the field is mandatory for the operation.
   */
  isRequired?: boolean;
  /**
   * Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.
   */
  multiSelectFieldOptions?: string[];
  /**
   * The display name of the field.
   */
  name?: string;
  /**
   * A URL to fetch additional data for the field
   */
  searchUrl?: string;
  /**
   * The type of the field.
   */
  type?: string;
  /**
   * A message indicating why the field is unavailable for editing.
   */
  unavailableMessage?: string;
}
/** MODEL IssueBulkEditPayload */
export interface IssueBulkEditPayload {
  /**
   * An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions.
   */
  editedFieldsInput: JiraIssueFields;
  /**
   * List of all the field IDs that are to be bulk edited. Each field ID in this list corresponds to a specific attribute of an issue that is set to be modified in the bulk edit operation. The relevant field ID can be obtained by calling the Bulk Edit Get Fields REST API (documentation available on this page itself).
   */
  selectedActions: string[];
  /**
   * List of issue IDs or keys which are to be bulk edited. These IDs or keys can be from different projects and issue types.
   */
  selectedIssueIdsOrKeys: string[];
}
/** MODEL IssueBulkMovePayload */
export interface IssueBulkMovePayload {
  /**
   * An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.
   * 
   * The key is a string that is created by concatenating the following three entities in order, separated by commas. The format is `<project ID or key>,<issueType ID>,<parent ID or key>`. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won't fail, so the error may be hard to track down.
   * 
   *  *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.
   *  *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.
   *  *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask.
   */
  targetToSourcesMapping?: unknown;
}
/** MODEL IssueBulkOperationsFieldOption */
// deno-lint-ignore no-empty-interface
export interface IssueBulkOperationsFieldOption {
}
/** MODEL IssueChangelogIds */
export interface IssueChangelogIds {
  /**
   * The list of changelog IDs.
   */
  changelogIds: string[];
}
/** MODEL IssueCommentListRequestBean */
export interface IssueCommentListRequestBean {
  /**
   * The list of comment IDs. A maximum of 1000 IDs can be specified.
   */
  ids: string[];
}
/** MODEL IssueContextVariable */
export interface IssueContextVariable {
  /**
   * The issue ID.
   * @format: "int64"
   */
  id?: number;
  /**
   * The issue key.
   */
  key?: string;
  /**
   * Type of custom context variable.
   */
  type: string;
}
/** MODEL IssueCreateMetadata */
export interface IssueCreateMetadata {
  /**
   * Expand options that include additional project details in the response.
   */
  expand?: string;
  /**
   * List of projects and their issue creation metadata.
   */
  projects?: Array<ProjectIssueCreateMetadata>;
}
/** MODEL IssueEntityProperties */
export interface IssueEntityProperties {
  /**
   * A list of entity property IDs.
   */
  entitiesIds?: string[];
  /**
   * A list of entity property keys and values.
   */
  properties?: unknown;
}
/** MODEL IssueEntityPropertiesForMultiUpdate */
export interface IssueEntityPropertiesForMultiUpdate {
  /**
   * The ID of the issue.
   * @format: "int64"
   */
  issueID?: number;
  /**
   * Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.
   */
  properties?: unknown;
}
/** MODEL IssueEvent */
export interface IssueEvent {
  /**
   * The ID of the event.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the event.
   */
  name?: string;
}
/** MODEL IssueFieldOption */
export interface IssueFieldOption {
  /**
   * Ref: #/components/schemas/IssueFieldOptionConfiguration
   */
  config?: IssueFieldOptionConfiguration;
  /**
   * The unique identifier for the option. This is only unique within the select field's set of options.
   * @format: "int64"
   */
  id: number;
  /**
   * The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.
   */
  properties?: unknown;
  /**
   * The option's name, which is displayed in Jira.
   */
  value: string;
}
/** MODEL IssueFieldOptionConfiguration */
export interface IssueFieldOptionConfiguration {
  /**
   * DEPRECATED
   */
  attributes?: string[];
  /**
   * Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.
   */
  scope?: IssueFieldOptionScopeBean;
}
/** MODEL IssueFieldOptionCreateBean */
export interface IssueFieldOptionCreateBean {
  /**
   * Ref: #/components/schemas/IssueFieldOptionConfiguration
   */
  config?: IssueFieldOptionConfiguration;
  /**
   * The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.
   */
  properties?: unknown;
  /**
   * The option's name, which is displayed in Jira.
   */
  value: string;
}
/** MODEL IssueFieldOptionScopeBean */
export interface IssueFieldOptionScopeBean {
  /**
   * Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.
   */
  global?: GlobalScopeBean;
  /**
   * DEPRECATED
   */
  projects?: string[];
  /**
   * Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
   */
  projects2?: Array<ProjectScopeBean>;
}
/** MODEL IssueFilterForBulkPropertyDelete */
export interface IssueFilterForBulkPropertyDelete {
  /**
   * The value of properties to perform the bulk operation on.
   */
  currentValue?: string;
  /**
   * List of issues to perform the bulk delete operation on.
   */
  entityIds?: string[];
}
/** MODEL IssueFilterForBulkPropertySet */
export interface IssueFilterForBulkPropertySet {
  /**
   * The value of properties to perform the bulk operation on.
   */
  currentValue?: string;
  /**
   * List of issues to perform the bulk operation on.
   */
  entityIds?: string[];
  /**
   * Whether the bulk operation occurs only when the property is present on or absent from an issue.
   */
  hasProperty?: boolean;
}
/** MODEL IssueLimitReportRequest */
export interface IssueLimitReportRequest {
  /**
   * A list of fields and their respective approaching limit threshold. Required for querying issues approaching limits. Optional for querying issues breaching limits. Accepted fields are: `comment`, `worklog`, `attachment`, `remoteIssueLinks`, and `issuelinks`. Example: `{"issuesApproachingLimitParams": {"comment": 4500, "attachment": 1800}}`
   */
  issuesApproachingLimitParams?: unknown;
}
/** MODEL IssueLimitReportResponseBean */
export interface IssueLimitReportResponseBean {
  /**
   * A list of ids of issues approaching the limit and their field count
   */
  issuesApproachingLimit?: unknown;
  /**
   * A list of ids of issues breaching the limit and their field count
   */
  issuesBreachingLimit?: unknown;
  /**
   * The fields and their defined limits
   */
  limits?: unknown;
}
/** MODEL IssueLink */
export interface IssueLink {
  /**
   * The ID of the issue link.
   */
  id?: string;
  /**
   * Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.
   */
  inwardIssue: LinkedIssue;
  /**
   * Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.
   */
  outwardIssue: LinkedIssue;
  /**
   * The URL of the issue link.
   * @format: "uri"
   */
  self?: string;
  /**
   * The type of link between the issues.
   */
  type: IssueLinkType;
}
/** MODEL IssueLinkType */
export interface IssueLinkType {
  /**
   * The ID of the issue link type and is used as follows:
   * 
   *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
   *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only.
   */
  id?: string;
  /**
   * The description of the issue link type inward link and is used as follows:
   * 
   *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
   *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
   */
  inward?: string;
  /**
   * The name of the issue link type and is used as follows:
   * 
   *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
   *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
   */
  name?: string;
  /**
   * The description of the issue link type outward link and is used as follows:
   * 
   *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
   *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
   */
  outward?: string;
  /**
   * The URL of the issue link type. Read only.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL IssueLinkTypes */
export interface IssueLinkTypes {
  /**
   * The issue link type bean.
   */
  issueLinkTypes?: Array<IssueLinkType>;
}
/** MODEL IssueList */
export interface IssueList {
  /**
   * The list of issue IDs.
   */
  issueIds: string[];
}
/** MODEL IssueMatches */
export interface IssueMatches {
  matches: Array<IssueMatchesForJQL>;
}
/** MODEL IssueMatchesForJQL */
export interface IssueMatchesForJQL {
  /**
   * A list of errors.
   */
  errors: string[];
  /**
   * A list of issue IDs.
   */
  matchedIssues: string[];
}
/** MODEL IssuePickerSuggestions */
export interface IssuePickerSuggestions {
  /**
   * A list of issues for an issue type suggested for use in auto-completion.
   */
  sections?: Array<IssuePickerSuggestionsIssueType>;
}
/** MODEL IssuePickerSuggestionsIssueType */
export interface IssuePickerSuggestionsIssueType {
  /**
   * The ID of the type of issues suggested for use in auto-completion.
   */
  id?: string;
  /**
   * A list of issues suggested for use in auto-completion.
   */
  issues?: Array<SuggestedIssue>;
  /**
   * The label of the type of issues suggested for use in auto-completion.
   */
  label?: string;
  /**
   * If no issue suggestions are found, returns a message indicating no suggestions were found,
   */
  msg?: string;
  /**
   * If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
   */
  sub?: string;
}
/** MODEL IssueSecurityLevelMember */
export interface IssueSecurityLevelMember {
  /**
   * The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
   */
  holder: PermissionHolder;
  /**
   * The ID of the issue security level member.
   * @format: "int64"
   */
  id: number;
  /**
   * The ID of the issue security level.
   * @format: "int64"
   */
  issueSecurityLevelId: number;
  managed?: boolean;
}
/** MODEL IssueSecuritySchemeToProjectMapping */
export interface IssueSecuritySchemeToProjectMapping {
  issueSecuritySchemeId?: string;
  projectId?: string;
}
/** MODEL IssueTransition */
export interface IssueTransition {
  /**
   * Expand options that include additional transition details in the response.
   */
  expand?: string;
  /**
   * Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
   */
  fields?: unknown;
  /**
   * Whether there is a screen associated with the issue transition.
   */
  hasScreen?: boolean;
  /**
   * The ID of the issue transition. Required when specifying a transition to undertake.
   */
  id?: string;
  /**
   * Whether the transition is available to be performed.
   */
  isAvailable?: boolean;
  /**
   * Whether the issue has to meet criteria before the issue transition is applied.
   */
  isConditional?: boolean;
  /**
   * Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
   */
  isGlobal?: boolean;
  /**
   * Whether this is the initial issue transition for the workflow.
   */
  isInitial?: boolean;
  looped?: boolean;
  /**
   * The name of the issue transition.
   */
  name?: string;
  /**
   * Details of the issue status after the transition.
   */
  to?: StatusDetails;
}
/** MODEL IssueTypeCreateBean */
export interface IssueTypeCreateBean {
  /**
   * The description of the issue type.
   */
  description?: string;
  /**
   * The hierarchy level of the issue type. Use:
   * 
   *  *  `-1` for Subtask.
   *  *  `0` for Base.
   * 
   * Defaults to `0`.
   * @format: "int32"
   */
  hierarchyLevel?: number;
  /**
   * The unique name for the issue type. The maximum length is 60 characters.
   */
  name: string;
  /**
   * Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.
   * 
   * Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
   */
  type?: string;
}
/** MODEL IssueTypeDetails */
export interface IssueTypeDetails {
  /**
   * The ID of the issue type's avatar.
   * @format: "int64"
   */
  avatarId?: number;
  /**
   * The description of the issue type.
   */
  description?: string;
  /**
   * Unique ID for next-gen projects.
   * @format: "uuid"
   */
  entityId?: string;
  /**
   * Hierarchy level of the issue type.
   * @format: "int32"
   */
  hierarchyLevel?: number;
  /**
   * The URL of the issue type's avatar.
   */
  iconUrl?: string;
  /**
   * The ID of the issue type.
   */
  id?: string;
  /**
   * The name of the issue type.
   */
  name?: string;
  /**
   * Details of the next-gen projects the issue type is available in.
   */
  scope?: Scope;
  /**
   * The URL of these issue type details.
   */
  self?: string;
  /**
   * Whether this issue type is used to create subtasks.
   */
  subtask?: boolean;
}
/** MODEL IssueTypeIds */
export interface IssueTypeIds {
  /**
   * The list of issue type IDs.
   */
  issueTypeIds: string[];
}
/** MODEL IssueTypeIdsToRemove */
export interface IssueTypeIdsToRemove {
  /**
   * The list of issue type IDs. Must contain unique values not longer than 255 characters and not be empty. Maximum of 100 IDs.
   */
  issueTypeIds: string[];
}
/** MODEL IssueTypeInfo */
export interface IssueTypeInfo {
  /**
   * The avatar of the issue type.
   * @format: "int64"
   */
  avatarId?: number;
  /**
   * The ID of the issue type.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the issue type.
   */
  name?: string;
}
/** MODEL IssueTypeIssueCreateMetadata */
export interface IssueTypeIssueCreateMetadata {
  /**
   * The ID of the issue type's avatar.
   * @format: "int64"
   */
  avatarId?: number;
  /**
   * The description of the issue type.
   */
  description?: string;
  /**
   * Unique ID for next-gen projects.
   * @format: "uuid"
   */
  entityId?: string;
  /**
   * Expand options that include additional issue type metadata details in the response.
   */
  expand?: string;
  /**
   * List of the fields available when creating an issue for the issue type.
   */
  fields?: unknown;
  /**
   * Hierarchy level of the issue type.
   * @format: "int32"
   */
  hierarchyLevel?: number;
  /**
   * The URL of the issue type's avatar.
   */
  iconUrl?: string;
  /**
   * The ID of the issue type.
   */
  id?: string;
  /**
   * The name of the issue type.
   */
  name?: string;
  /**
   * Details of the next-gen projects the issue type is available in.
   */
  scope?: Scope;
  /**
   * The URL of these issue type details.
   */
  self?: string;
  /**
   * Whether this issue type is used to create subtasks.
   */
  subtask?: boolean;
}
/** MODEL IssueTypeScheme */
export interface IssueTypeScheme {
  /**
   * The ID of the default issue type of the issue type scheme.
   */
  defaultIssueTypeId?: string;
  /**
   * The description of the issue type scheme.
   */
  description?: string;
  /**
   * The ID of the issue type scheme.
   */
  id: string;
  /**
   * Whether the issue type scheme is the default.
   */
  isDefault?: boolean;
  /**
   * The name of the issue type scheme.
   */
  name: string;
}
/** MODEL IssueTypeSchemeDetails */
export interface IssueTypeSchemeDetails {
  /**
   * The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.
   */
  defaultIssueTypeId?: string;
  /**
   * The description of the issue type scheme. The maximum length is 4000 characters.
   */
  description?: string;
  /**
   * The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.
   */
  issueTypeIds: string[];
  /**
   * The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
   */
  name: string;
}
/** MODEL IssueTypeSchemeID */
export interface IssueTypeSchemeID {
  /**
   * The ID of the issue type scheme.
   */
  issueTypeSchemeId: string;
}
/** MODEL IssueTypeSchemeMapping */
export interface IssueTypeSchemeMapping {
  /**
   * The ID of the issue type.
   */
  issueTypeId: string;
  /**
   * The ID of the issue type scheme.
   */
  issueTypeSchemeId: string;
}
/** MODEL IssueTypeSchemeProjectAssociation */
export interface IssueTypeSchemeProjectAssociation {
  /**
   * The ID of the issue type scheme.
   */
  issueTypeSchemeId: string;
  /**
   * The ID of the project.
   */
  projectId: string;
}
/** MODEL IssueTypeSchemeProjects */
export interface IssueTypeSchemeProjects {
  /**
   * Details of an issue type scheme.
   */
  issueTypeScheme: IssueTypeScheme;
  /**
   * The IDs of the projects using the issue type scheme.
   */
  projectIds: string[];
}
/** MODEL IssueTypeSchemeUpdateDetails */
export interface IssueTypeSchemeUpdateDetails {
  /**
   * The ID of the default issue type of the issue type scheme.
   */
  defaultIssueTypeId?: string;
  /**
   * The description of the issue type scheme. The maximum length is 4000 characters.
   */
  description?: string;
  /**
   * The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
   */
  name?: string;
}
/** MODEL IssueTypeScreenScheme */
export interface IssueTypeScreenScheme {
  /**
   * The description of the issue type screen scheme.
   */
  description?: string;
  /**
   * The ID of the issue type screen scheme.
   */
  id: string;
  /**
   * The name of the issue type screen scheme.
   */
  name: string;
}
/** MODEL IssueTypeScreenSchemeDetails */
export interface IssueTypeScreenSchemeDetails {
  /**
   * The description of the issue type screen scheme. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
   */
  issueTypeMappings: Array<IssueTypeScreenSchemeMapping>;
  /**
   * The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
   */
  name: string;
}
/** MODEL IssueTypeScreenSchemeId */
export interface IssueTypeScreenSchemeId {
  /**
   * The ID of the issue type screen scheme.
   */
  id: string;
}
/** MODEL IssueTypeScreenSchemeItem */
export interface IssueTypeScreenSchemeItem {
  /**
   * The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided.
   */
  issueTypeId: string;
  /**
   * The ID of the issue type screen scheme.
   */
  issueTypeScreenSchemeId: string;
  /**
   * The ID of the screen scheme.
   */
  screenSchemeId: string;
}
/** MODEL IssueTypeScreenSchemeMapping */
export interface IssueTypeScreenSchemeMapping {
  /**
   * The ID of the issue type or *default*. Only issue types used in classic projects are accepted. An entry for *default* must be provided and defines the mapping for all issue types without a screen scheme.
   */
  issueTypeId: string;
  /**
   * The ID of the screen scheme. Only screen schemes used in classic projects are accepted.
   */
  screenSchemeId: string;
}
/** MODEL IssueTypeScreenSchemeMappingDetails */
export interface IssueTypeScreenSchemeMappingDetails {
  /**
   * The list of issue type to screen scheme mappings. A *default* entry cannot be specified because a default entry is added when an issue type screen scheme is created.
   */
  issueTypeMappings: Array<IssueTypeScreenSchemeMapping>;
}
/** MODEL IssueTypeScreenSchemeProjectAssociation */
export interface IssueTypeScreenSchemeProjectAssociation {
  /**
   * The ID of the issue type screen scheme.
   */
  issueTypeScreenSchemeId?: string;
  /**
   * The ID of the project.
   */
  projectId?: string;
}
/** MODEL IssueTypeScreenSchemeUpdateDetails */
export interface IssueTypeScreenSchemeUpdateDetails {
  /**
   * The description of the issue type screen scheme. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
   */
  name?: string;
}
/** MODEL IssueTypeScreenSchemesProjects */
export interface IssueTypeScreenSchemesProjects {
  /**
   * Details of an issue type screen scheme.
   */
  issueTypeScreenScheme: IssueTypeScreenScheme;
  /**
   * The IDs of the projects using the issue type screen scheme.
   */
  projectIds: string[];
}
/** MODEL IssueTypeToContextMapping */
export interface IssueTypeToContextMapping {
  /**
   * The ID of the context.
   */
  contextId: string;
  /**
   * Whether the context is mapped to any issue type.
   */
  isAnyIssueType?: boolean;
  /**
   * The ID of the issue type.
   */
  issueTypeId?: string;
}
/** MODEL IssueTypeUpdateBean */
export interface IssueTypeUpdateBean {
  /**
   * The ID of an issue type avatar.
   * @format: "int64"
   */
  avatarId?: number;
  /**
   * The description of the issue type.
   */
  description?: string;
  /**
   * The unique name for the issue type. The maximum length is 60 characters.
   */
  name?: string;
}
/** MODEL IssueTypeWithStatus */
export interface IssueTypeWithStatus {
  /**
   * The ID of the issue type.
   */
  id: string;
  /**
   * The name of the issue type.
   */
  name: string;
  /**
   * The URL of the issue type's status details.
   */
  self: string;
  /**
   * List of status details for the issue type.
   */
  statuses: Array<StatusDetails>;
  /**
   * Whether this issue type represents subtasks.
   */
  subtask: boolean;
}
/** MODEL IssueTypeWorkflowMapping */
export interface IssueTypeWorkflowMapping {
  /**
   * The ID of the issue type. Not required if updating the issue type-workflow mapping.
   */
  issueType?: string;
  /**
   * Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.
   */
  updateDraftIfNeeded?: boolean;
  /**
   * The name of the workflow.
   */
  workflow?: string;
}
/** MODEL IssueTypesWorkflowMapping */
export interface IssueTypesWorkflowMapping {
  /**
   * Whether the workflow is the default workflow for the workflow scheme.
   */
  defaultMapping?: boolean;
  /**
   * The list of issue type IDs.
   */
  issueTypes?: string[];
  /**
   * Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`.
   */
  updateDraftIfNeeded?: boolean;
  /**
   * The name of the workflow. Optional if updating the workflow-issue types mapping.
   */
  workflow?: string;
}
/** MODEL IssueUpdateDetails */
export interface IssueUpdateDetails {
  /**
   * List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
   */
  fields?: unknown;
  /**
   * Additional issue history details.
   */
  historyMetadata?: HistoryMetadata;
  /**
   * Details of issue properties to be add or update.
   */
  properties?: Array<EntityProperty>;
  /**
   * Details of a transition. Required when performing a transition, optional when creating or editing an issue.
   */
  transition?: IssueTransition;
  /**
   * A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
   */
  update?: unknown;
}
/** MODEL IssueUpdateMetadata */
export interface IssueUpdateMetadata {
  fields?: unknown;
}
/** MODEL IssuesAndJQLQueries */
export interface IssuesAndJQLQueries {
  /**
   * A list of issue IDs.
   */
  issueIds: string[];
  /**
   * A list of JQL queries.
   */
  jqls: string[];
}
/** MODEL IssuesJqlMetaDataBean */
export interface IssuesJqlMetaDataBean {
  /**
   * The number of issues that were loaded in this evaluation.
   * @format: "int32"
   */
  count: number;
  /**
   * The maximum number of issues that could be loaded in this evaluation.
   * @format: "int32"
   */
  maxResults: number;
  /**
   * The index of the first issue.
   * @format: "int64"
   */
  startAt: number;
  /**
   * The total number of issues the JQL returned.
   * @format: "int64"
   */
  totalCount: number;
  /**
   * Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.
   */
  validationWarnings?: string[];
}
/** MODEL IssuesMetaBean */
export interface IssuesMetaBean {
  /**
   * Ref: #/components/schemas/IssuesJqlMetaDataBean
   */
  jql?: IssuesJqlMetaDataBean;
}
/** MODEL IssuesUpdateBean */
export interface IssuesUpdateBean {
  issueUpdates?: Array<IssueUpdateDetails>;
}
/** MODEL JQLPersonalDataMigrationRequest */
export interface JQLPersonalDataMigrationRequest {
  /**
   * A list of queries with user identifiers. Maximum of 100 queries.
   */
  queryStrings?: string[];
}
/** MODEL JQLQueryWithUnknownUsers */
export interface JQLQueryWithUnknownUsers {
  /**
   * The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found
   */
  convertedQuery?: string;
  /**
   * The original query, for reference
   */
  originalQuery?: string;
}
/** MODEL JQLReferenceData */
export interface JQLReferenceData {
  /**
   * List of JQL query reserved words.
   */
  jqlReservedWords?: string[];
  /**
   * List of fields usable in JQL queries.
   */
  visibleFieldNames?: Array<FieldReferenceData>;
  /**
   * List of functions usable in JQL queries.
   */
  visibleFunctionNames?: Array<FunctionReferenceData>;
}
/** MODEL JexpIssues */
export interface JexpIssues {
  /**
   * The JQL query that specifies the set of issues available in the Jira expression.
   */
  jql?: JexpJqlIssues;
}
/** MODEL JexpJqlIssues */
export interface JexpJqlIssues {
  /**
   * The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The JQL query.
   */
  query?: string;
  /**
   * The index of the first issue to return from the JQL query.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * Determines how to validate the JQL query and treat the validation results.
   * default Value "strict"
   */
  validation?: string;
}
/** MODEL JiraCascadingSelectField */
export interface JiraCascadingSelectField {
  /**
   * Ref: #/components/schemas/JiraSelectedOptionField
   */
  childOptionValue?: JiraSelectedOptionField;
  fieldId: string;
  /**
   * Ref: #/components/schemas/JiraSelectedOptionField
   */
  parentOptionValue: JiraSelectedOptionField;
}
/** MODEL JiraColorField */
export interface JiraColorField {
  /**
   * Ref: #/components/schemas/JiraColorInput
   */
  color: JiraColorInput;
  fieldId: string;
}
/** MODEL JiraColorInput */
export interface JiraColorInput {
  name: string;
}
/** MODEL JiraComponentField */
export interface JiraComponentField {
  /**
   * @format: "int64"
   */
  componentId: number;
}
/** MODEL JiraDateField */
export interface JiraDateField {
  /**
   * Ref: #/components/schemas/JiraDateInput
   */
  date?: JiraDateInput;
  fieldId: string;
}
/** MODEL JiraDateInput */
export interface JiraDateInput {
  formattedDate: string;
}
/** MODEL JiraDateTimeField */
export interface JiraDateTimeField {
  /**
   * Ref: #/components/schemas/JiraDateTimeInput
   */
  dateTime: JiraDateTimeInput;
  fieldId: string;
}
/** MODEL JiraDateTimeInput */
export interface JiraDateTimeInput {
  formattedDateTime: string;
}
/** MODEL JiraExpressionAnalysis */
export interface JiraExpressionAnalysis {
  /**
   * Ref: #/components/schemas/JiraExpressionComplexity
   */
  complexity?: JiraExpressionComplexity;
  /**
   * A list of validation errors. Not included if the expression is valid.
   */
  errors?: Array<JiraExpressionValidationError>;
  /**
   * The analysed expression.
   */
  expression: string;
  /**
   * EXPERIMENTAL. The inferred type of the expression.
   */
  type?: string;
  /**
   * Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
   */
  valid: boolean;
}
/** MODEL JiraExpressionComplexity */
export interface JiraExpressionComplexity {
  /**
   * Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:
   * 
   *  *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.
   *  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
   */
  expensiveOperations: string;
  /**
   * Variables used in the formula, mapped to the parts of the expression they refer to.
   */
  variables?: unknown;
}
/** MODEL JiraExpressionEvalContextBean */
export interface JiraExpressionEvalContextBean {
  /**
   * The ID of the board that is available under the `board` variable when evaluating the expression.
   * @format: "int64"
   */
  board?: number;
  /**
   * Custom context variables and their types. These variable types are available for use in a custom context:
   * 
   *  *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
   *  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
   *  *  `json`: A JSON object containing custom content.
   *  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
   */
  custom?: Array<CustomContextVariable>;
  /**
   * The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
   * @format: "int64"
   */
  customerRequest?: number;
  /**
   * The issue that is available under the `issue` variable when evaluating the expression.
   */
  issue?: IdOrKeyBean;
  /**
   * The collection of issues that is available under the `issues` variable when evaluating the expression.
   */
  issues?: JexpIssues;
  /**
   * The project that is available under the `project` variable when evaluating the expression.
   */
  project?: IdOrKeyBean;
  /**
   * The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
   * @format: "int64"
   */
  serviceDesk?: number;
  /**
   * The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
   * @format: "int64"
   */
  sprint?: number;
}
/** MODEL JiraExpressionEvalRequestBean */
export interface JiraExpressionEvalRequestBean {
  /**
   * The context in which the Jira expression is evaluated.
   */
  context?: JiraExpressionEvalContextBean;
  /**
   * The Jira expression to evaluate.
   * @example: "{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id) }"
   */
  expression: string;
}
/** MODEL JiraExpressionEvaluationMetaDataBean */
export interface JiraExpressionEvaluationMetaDataBean {
  /**
   * Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.
   */
  complexity?: JiraExpressionsComplexityBean;
  /**
   * Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here.
   */
  issues?: IssuesMetaBean;
}
/** MODEL JiraExpressionForAnalysis */
export interface JiraExpressionForAnalysis {
  /**
   * Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
   */
  contextVariables?: unknown;
  /**
   * The list of Jira expressions to analyse.
   * @example: "issues.map(issue => issue.properties['property_key'])"
   */
  expressions: string[];
}
/** MODEL JiraExpressionResult */
export interface JiraExpressionResult {
  /**
   * Contains various characteristics of the performed expression evaluation.
   */
  meta?: JiraExpressionEvaluationMetaDataBean;
  /**
   * The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
   */
  value: string;
}
/** MODEL JiraExpressionValidationError */
export interface JiraExpressionValidationError {
  /**
   * The text column in which the error occurred.
   * @format: "int32"
   */
  column?: number;
  /**
   * The part of the expression in which the error occurred.
   */
  expression?: string;
  /**
   * The text line in which the error occurred.
   * @format: "int32"
   */
  line?: number;
  /**
   * Details about the error.
   * @example: "!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered."
   */
  message: string;
  /**
   * The error type.
   */
  type: string;
}
/** MODEL JiraExpressionsAnalysis */
export interface JiraExpressionsAnalysis {
  /**
   * The results of Jira expressions analysis.
   */
  results: Array<JiraExpressionAnalysis>;
}
/** MODEL JiraExpressionsComplexityBean */
export interface JiraExpressionsComplexityBean {
  /**
   * The number of Jira REST API beans returned in the response.
   */
  beans: JiraExpressionsComplexityValueBean;
  /**
   * The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
   */
  expensiveOperations: JiraExpressionsComplexityValueBean;
  /**
   * The number of primitive values returned in the response.
   */
  primitiveValues: JiraExpressionsComplexityValueBean;
  /**
   * The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
   */
  steps: JiraExpressionsComplexityValueBean;
}
/** MODEL JiraExpressionsComplexityValueBean */
export interface JiraExpressionsComplexityValueBean {
  /**
   * The maximum allowed complexity. The evaluation will fail if this value is exceeded.
   * @format: "int32"
   */
  limit: number;
  /**
   * The complexity value of the current expression.
   * @format: "int32"
   */
  value: number;
}
/** MODEL JiraGroupInput */
export interface JiraGroupInput {
  groupName: string;
}
/** MODEL JiraIssueFields */
export interface JiraIssueFields {
  /**
   * Add or clear a cascading select field:
   * 
   *  *  To add, specify `optionId` for both parent and child.
   *  *  To clear the child, set its `optionId` to null.
   *  *  To clear both, set the parent's `optionId` to null.
   */
  cascadingSelectFields?: Array<JiraCascadingSelectField>;
  /**
   * Add or clear a number field:
   * 
   *  *  To add, specify a numeric `value`.
   *  *  To clear, set `value` to `null`.
   */
  clearableNumberFields?: Array<JiraNumberField>;
  /**
   * Add or clear a color field:
   * 
   *  *  To add, specify the color `name`. Available colors are: `purple`, `blue`, `green`, `teal`, `yellow`, `orange`, `grey`, `dark purple`, `dark blue`, `dark green`, `dark teal`, `dark yellow`, `dark orange`, `dark grey`.
   *  *  To clear, set the color `name` to an empty string.
   */
  colorFields?: Array<JiraColorField>;
  /**
   * Add or clear a date picker field:
   * 
   *  *  To add, specify the date in `d/mmm/yy` format or ISO format `dd-mm-yyyy`.
   *  *  To clear, set `formattedDate` to an empty string.
   */
  datePickerFields?: Array<JiraDateField>;
  /**
   * Add or clear the planned start date and time:
   * 
   *  *  To add, specify the date and time in ISO format for `formattedDateTime`.
   *  *  To clear, provide an empty string for `formattedDateTime`.
   */
  dateTimePickerFields?: Array<JiraDateTimeField>;
  /**
   * Set the issue type field by providing an `issueTypeId`.
   */
  issueType?: JiraIssueTypeField;
  /**
   * Edit a labels field:
   * 
   *  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
   *  *  To clear labels, use the `REMOVE_ALL` option with an empty `labels` array.
   */
  labelsFields?: Array<JiraLabelsField>;
  /**
   * Add or clear a multi-group picker field:
   * 
   *  *  To add groups, provide an array of groups with `groupName`s.
   *  *  To clear all groups, use an empty `groups` array.
   */
  multipleGroupPickerFields?: Array<JiraMultipleGroupPickerField>;
  /**
   * Assign or unassign multiple users to/from a field:
   * 
   *  *  To assign, provide an array of user `accountId`s.
   *  *  To clear, set `users` to `null`.
   */
  multipleSelectClearableUserPickerFields?: Array<JiraMultipleSelectUserPickerField>;
  /**
   * Add or clear a multi-select field:
   * 
   *  *  To add, provide an array of options with `optionId`s.
   *  *  To clear, use an empty `options` array.
   */
  multipleSelectFields?: Array<JiraMultipleSelectField>;
  /**
   * Edit a multi-version picker field like Fix Versions/Affects Versions:
   * 
   *  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
   *  *  To clear the field, use the `REMOVE_ALL` option with an empty `versions` array.
   */
  multipleVersionPickerFields?: Array<JiraMultipleVersionPickerField>;
  /**
   * Edit a multi select components field:
   * 
   *  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
   *  *  To clear, use the `REMOVE_ALL` option with an empty `components` array.
   */
  multiselectComponents?: JiraMultiSelectComponentField;
  /**
   * Set the priority of an issue by specifying a `priorityId`.
   */
  priority?: JiraPriorityField;
  /**
   * Add or clear a rich text field:
   * 
   *  *  To add, provide `adfValue`. Note that rich text fields only support ADF values.
   *  *  To clear, use an empty `richText` object.
   * 
   * For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure).
   */
  richTextFields?: Array<JiraRichTextField>;
  /**
   * Add or clear a single group picker field:
   * 
   *  *  To add, specify the group with `groupName`.
   *  *  To clear, set `groupName` to an empty string.
   */
  singleGroupPickerFields?: Array<JiraSingleGroupPickerField>;
  /**
   * Add or clear a single line text field:
   * 
   *  *  To add, provide the `text` value.
   *  *  To clear, set `text` to an empty string.
   */
  singleLineTextFields?: Array<JiraSingleLineTextField>;
  /**
   * Edit assignment for single select user picker fields like Assignee/Reporter:
   * 
   *  *  To assign an issue, specify the user's `accountId`.
   *  *  To unassign an issue, set `user` to `null`.
   *  *  For automatic assignment, set `accountId` to `-1`.
   */
  singleSelectClearableUserPickerFields?: Array<JiraSingleSelectUserPickerField>;
  /**
   * Add or clear a single select field:
   * 
   *  *  To add, specify the option with an `optionId`.
   *  *  To clear, pass an option with `optionId` as `-1`.
   */
  singleSelectFields?: Array<JiraSingleSelectField>;
  /**
   * Add or clear a single version picker field:
   * 
   *  *  To add, specify the version with a `versionId`.
   *  *  To clear, set `versionId` to `-1`.
   */
  singleVersionPickerFields?: Array<JiraSingleVersionPickerField>;
  /**
   * Add or clear a URL field:
   * 
   *  *  To add, provide the `url` with the desired URL value.
   *  *  To clear, set `url` to an empty string.
   */
  urlFields?: Array<JiraUrlField>;
}
/** MODEL JiraIssueTypeField */
export interface JiraIssueTypeField {
  issueTypeId: string;
}
/** MODEL JiraLabelsField */
export interface JiraLabelsField {
  bulkEditMultiSelectFieldOption: string;
  fieldId: string;
  labels: Array<JiraLabelsInput>;
}
/** MODEL JiraLabelsInput */
export interface JiraLabelsInput {
  name: string;
}
/** MODEL JiraMultiSelectComponentField */
export interface JiraMultiSelectComponentField {
  bulkEditMultiSelectFieldOption: string;
  components: Array<JiraComponentField>;
  fieldId: string;
}
/** MODEL JiraMultipleGroupPickerField */
export interface JiraMultipleGroupPickerField {
  fieldId: string;
  groups: Array<JiraGroupInput>;
}
/** MODEL JiraMultipleSelectField */
export interface JiraMultipleSelectField {
  fieldId: string;
  options: Array<JiraSelectedOptionField>;
}
/** MODEL JiraMultipleSelectUserPickerField */
export interface JiraMultipleSelectUserPickerField {
  fieldId: string;
  users?: Array<JiraUserField>;
}
/** MODEL JiraMultipleVersionPickerField */
export interface JiraMultipleVersionPickerField {
  bulkEditMultiSelectFieldOption: string;
  fieldId: string;
  versions: Array<JiraVersionField>;
}
/** MODEL JiraNumberField */
export interface JiraNumberField {
  fieldId: string;
  /**
   * @format: "double"
   */
  value?: number;
}
/** MODEL JiraPriorityField */
export interface JiraPriorityField {
  priorityId: string;
}
/** MODEL JiraRichTextField */
export interface JiraRichTextField {
  fieldId: string;
  /**
   * Ref: #/components/schemas/JiraRichTextInput
   */
  richText: JiraRichTextInput;
}
/** MODEL JiraRichTextInput */
export interface JiraRichTextInput {
  adfValue?: unknown;
}
/** MODEL JiraSelectedOptionField */
export interface JiraSelectedOptionField {
  /**
   * @format: "int64"
   */
  optionId?: number;
}
/** MODEL JiraSingleGroupPickerField */
export interface JiraSingleGroupPickerField {
  fieldId: string;
  /**
   * Ref: #/components/schemas/JiraGroupInput
   */
  group: JiraGroupInput;
}
/** MODEL JiraSingleLineTextField */
export interface JiraSingleLineTextField {
  fieldId: string;
  text: string;
}
/** MODEL JiraSingleSelectField */
export interface JiraSingleSelectField {
  fieldId: string;
  /**
   * Ref: #/components/schemas/JiraSelectedOptionField
   */
  option: JiraSelectedOptionField;
}
/** MODEL JiraSingleSelectUserPickerField */
export interface JiraSingleSelectUserPickerField {
  fieldId: string;
  /**
   * Ref: #/components/schemas/JiraUserField
   */
  user?: JiraUserField;
}
/** MODEL JiraSingleVersionPickerField */
export interface JiraSingleVersionPickerField {
  fieldId: string;
  /**
   * Ref: #/components/schemas/JiraVersionField
   */
  version: JiraVersionField;
}
/** MODEL JiraStatus */
export interface JiraStatus {
  /**
   * The description of the status.
   */
  description?: string;
  /**
   * The ID of the status.
   */
  id?: string;
  /**
   * The name of the status.
   */
  name?: string;
  /**
   * Ref: #/components/schemas/StatusScope
   */
  scope?: StatusScope;
  /**
   * The category of the status.
   */
  statusCategory?: string;
  /**
   * Projects and issue types where the status is used. Only available if the `usages` expand is requested.
   */
  usages?: Array<ProjectIssueTypes>;
  /**
   * The workflows that use this status. Only available if the `workflowUsages` expand is requested.
   */
  workflowUsages?: Array<WorkflowUsages>;
}
/** MODEL JiraUrlField */
export interface JiraUrlField {
  fieldId: string;
  url: string;
}
/** MODEL JiraUserField */
export interface JiraUserField {
  accountId: string;
}
/** MODEL JiraVersionField */
export interface JiraVersionField {
  versionId?: string;
}
/** MODEL JiraWorkflow */
export interface JiraWorkflow {
  /**
   * The description of the workflow.
   */
  description?: string;
  /**
   * The ID of the workflow.
   */
  id?: string;
  /**
   * Indicates if the workflow can be edited.
   */
  isEditable?: boolean;
  /**
   * The name of the workflow.
   */
  name?: string;
  /**
   * Ref: #/components/schemas/WorkflowScope
   */
  scope?: WorkflowScope;
  /**
   * Ref: #/components/schemas/WorkflowLayout
   */
  startPointLayout?: WorkflowLayout;
  /**
   * The statuses referenced in this workflow.
   */
  statuses?: Array<WorkflowReferenceStatus>;
  /**
   * If there is a current [asynchronous task](#async-operations) operation for this workflow.
   */
  taskId?: string;
  /**
   * The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination.
   */
  transitions?: Array<WorkflowTransitions>;
  /**
   * Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows.
   */
  usages?: Array<ProjectIssueTypes>;
  /**
   * Ref: #/components/schemas/DocumentVersion
   */
  version?: DocumentVersion;
}
/** MODEL JiraWorkflowStatus */
export interface JiraWorkflowStatus {
  /**
   * The description of the status.
   */
  description?: string;
  /**
   * The ID of the status.
   */
  id?: string;
  /**
   * The name of the status.
   */
  name?: string;
  /**
   * Ref: #/components/schemas/WorkflowScope
   */
  scope?: WorkflowScope;
  /**
   * The category of the status.
   */
  statusCategory?: string;
  /**
   * The reference of the status.
   */
  statusReference?: string;
  /**
   * The `statuses.usages` expand is an optional parameter that can be used when reading and updating statuses in Jira. It provides additional information about the projects and issue types associated with the requested statuses.
   */
  usages?: Array<ProjectIssueTypes>;
}
/** MODEL JqlFunctionPrecomputationBean */
export interface JqlFunctionPrecomputationBean {
  /**
   * The list of arguments function was invoked with.
   */
  arguments?: string[];
  /**
   * The timestamp of the precomputation creation.
   * @format: "date-time"
   */
  created?: string;
  /**
   * The error message to be displayed to the user.
   */
  error?: string;
  /**
   * The field the function was executed against.
   */
  field?: string;
  /**
   * The function key.
   */
  functionKey?: string;
  /**
   * The name of the function.
   */
  functionName?: string;
  /**
   * The id of the precomputation.
   */
  id?: string;
  /**
   * The operator in context of which function was executed.
   */
  operator?: string;
  /**
   * The timestamp of the precomputation last update.
   * @format: "date-time"
   */
  updated?: string;
  /**
   * The timestamp of the precomputation last usage.
   * @format: "date-time"
   */
  used?: string;
  /**
   * The JQL fragment stored as the precomputation.
   */
  value?: string;
}
/** MODEL JqlFunctionPrecomputationUpdateBean */
export interface JqlFunctionPrecomputationUpdateBean {
  /**
   * The error message to be displayed to the user if the given function clause is no longer valid during recalculation of the precomputation.
   */
  error?: string;
  /**
   * The id of the precomputation to update.
   */
  id: string;
  /**
   * The new value of the precomputation.
   */
  value?: string;
}
/** MODEL JqlFunctionPrecomputationUpdateRequestBean */
export interface JqlFunctionPrecomputationUpdateRequestBean {
  values?: Array<JqlFunctionPrecomputationUpdateBean>;
}
/** MODEL JqlQueriesToParse */
export interface JqlQueriesToParse {
  /**
   * A list of queries to parse.
   */
  queries: string[];
}
/** MODEL JqlQueriesToSanitize */
export interface JqlQueriesToSanitize {
  /**
   * The list of JQL queries to sanitize. Must contain unique values. Maximum of 20 queries.
   */
  queries: Array<JqlQueryToSanitize>;
}
/** MODEL JqlQuery */
export interface JqlQuery {
  /**
   * Ref: #/components/schemas/JqlQueryOrderByClause
   */
  orderBy?: JqlQueryOrderByClause;
  /**
   * Ref: #/components/schemas/JqlQueryClause
   */
  where?: JqlQueryClause;
}
/** MODEL JqlQueryClause */
// deno-lint-ignore no-empty-interface
export interface JqlQueryClause {
}
/** MODEL JqlQueryClauseOperand */
// deno-lint-ignore no-empty-interface
export interface JqlQueryClauseOperand {
}
/** MODEL JqlQueryClauseTimePredicate */
export interface JqlQueryClauseTimePredicate {
  /**
   * Ref: #/components/schemas/JqlQueryClauseOperand
   */
  operand: JqlQueryClauseOperand;
  /**
   * The operator between the field and the operand.
   */
  operator: string;
}
/** MODEL JqlQueryField */
export interface JqlQueryField {
  /**
   * The encoded name of the field, which can be used directly in a JQL query.
   */
  encodedName?: string;
  /**
   * The name of the field.
   */
  name: string;
  /**
   * When the field refers to a value in an entity property, details of the entity property value.
   */
  property?: Array<JqlQueryFieldEntityProperty>;
}
/** MODEL JqlQueryFieldEntityProperty */
export interface JqlQueryFieldEntityProperty {
  /**
   * The object on which the property is set.
   * @example: "issue"
   */
  entity: string;
  /**
   * The key of the property.
   * @example: "stats"
   */
  key: string;
  /**
   * The path in the property value to query.
   * @example: "comments.count"
   */
  path: string;
  /**
   * The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
   * @example: "number"
   */
  type?: string;
}
/** MODEL JqlQueryOrderByClause */
export interface JqlQueryOrderByClause {
  /**
   * The list of order-by clause fields and their ordering directives.
   */
  fields: Array<JqlQueryOrderByClauseElement>;
}
/** MODEL JqlQueryOrderByClauseElement */
export interface JqlQueryOrderByClauseElement {
  /**
   * The direction in which to order the results.
   */
  direction?: string;
  /**
   * Ref: #/components/schemas/JqlQueryField
   */
  field: JqlQueryField;
}
/** MODEL JqlQueryToSanitize */
export interface JqlQueryToSanitize {
  /**
   * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
   */
  accountId?: string;
  /**
   * The query to sanitize.
   */
  query: string;
}
/** MODEL JqlQueryUnitaryOperand */
// deno-lint-ignore no-empty-interface
export interface JqlQueryUnitaryOperand {
}
/** MODEL JsonContextVariable */
export interface JsonContextVariable {
  /**
   * Type of custom context variable.
   */
  type: string;
  /**
   * A JSON object containing custom content.
   */
  value?: unknown;
}
/** MODEL JsonNode */
export interface JsonNode {
  array?: boolean;
  bigDecimal?: boolean;
  bigInteger?: boolean;
  bigIntegerValue?: number;
  binary?: boolean;
  binaryValue?: string[];
  boolean?: boolean;
  booleanValue?: boolean;
  containerNode?: boolean;
  decimalValue?: number;
  double?: boolean;
  /**
   * @format: "double"
   */
  doubleValue?: number;
  elements?: unknown;
  fieldNames?: unknown;
  fields?: unknown;
  floatingPointNumber?: boolean;
  int?: boolean;
  /**
   * @format: "int32"
   */
  intValue?: number;
  integralNumber?: boolean;
  long?: boolean;
  /**
   * @format: "int64"
   */
  longValue?: number;
  missingNode?: boolean;
  null?: boolean;
  number?: boolean;
  numberType?: string;
  numberValue?: number;
  object?: boolean;
  pojo?: boolean;
  textValue?: string;
  textual?: boolean;
  valueAsBoolean?: boolean;
  /**
   * @format: "double"
   */
  valueAsDouble?: number;
  /**
   * @format: "int32"
   */
  valueAsInt?: number;
  /**
   * @format: "int64"
   */
  valueAsLong?: number;
  valueAsText?: string;
  valueNode?: boolean;
}
/** MODEL JsonTypeBean */
export interface JsonTypeBean {
  /**
   * If the field is a custom field, the configuration of the field.
   */
  configuration?: unknown;
  /**
   * If the field is a custom field, the URI of the field.
   */
  custom?: string;
  /**
   * If the field is a custom field, the custom ID of the field.
   * @format: "int64"
   */
  customId?: number;
  /**
   * When the data type is an array, the name of the field items within the array.
   */
  items?: string;
  /**
   * If the field is a system field, the name of the field.
   */
  system?: string;
  /**
   * The data type of the field.
   */
  type: string;
}
/** MODEL KeywordOperand */
export interface KeywordOperand {
  /**
   * The keyword that is the operand value.
   */
  keyword: string;
}
/** MODEL LegacyJackson1ListAttachment */
Array<Attachment>/** MODEL LegacyJackson1ListColumnItem */
Array<ColumnItem>/** MODEL LegacyJackson1ListIssueEvent */
Array<IssueEvent>/** MODEL LegacyJackson1ListIssueTypeWithStatus */
Array<IssueTypeWithStatus>/** MODEL LegacyJackson1ListProject */
Array<Project>/** MODEL LegacyJackson1ListProjectComponent */
Array<ProjectComponent>/** MODEL LegacyJackson1ListProjectRoleDetails */
Array<ProjectRoleDetails>/** MODEL LegacyJackson1ListProjectType */
Array<ProjectType>/** MODEL LegacyJackson1ListUserMigrationBean */
Array<UserMigrationBean>/** MODEL LegacyJackson1ListVersion */
Array<Version>/** MODEL LegacyJackson1ListWorklog */
Array<Worklog>/** MODEL License */
export interface License {
  /**
   * The applications under this license.
   */
  applications: Array<LicensedApplication>;
}
/** MODEL LicenseMetric */
export interface LicenseMetric {
  /**
   * The key of a specific license metric.
   */
  key?: string;
  /**
   * The calculated value of a licence metric linked to the key. An example licence metric is the approximate number of user accounts.
   */
  value?: string;
}
/** MODEL LicensedApplication */
export interface LicensedApplication {
  /**
   * The ID of the application.
   */
  id: string;
  /**
   * The licensing plan.
   */
  plan: string;
}
/** MODEL LinkGroup */
export interface LinkGroup {
  groups?: Array<LinkGroup>;
  /**
   * Ref: #/components/schemas/SimpleLink
   */
  header?: SimpleLink;
  id?: string;
  links?: Array<SimpleLink>;
  styleClass?: string;
  /**
   * @format: "int32"
   */
  weight?: number;
}
/** MODEL LinkIssueRequestJsonBean */
export interface LinkIssueRequestJsonBean {
  /**
   * Ref: #/components/schemas/Comment
   */
  comment?: Comment;
  /**
   * Ref: #/components/schemas/LinkedIssue
   */
  inwardIssue: LinkedIssue;
  /**
   * Ref: #/components/schemas/LinkedIssue
   */
  outwardIssue: LinkedIssue;
  /**
   * Ref: #/components/schemas/IssueLinkType
   */
  type: IssueLinkType;
}
/** MODEL LinkedIssue */
export interface LinkedIssue {
  /**
   * The fields associated with the issue.
   */
  fields?: Fields;
  /**
   * The ID of an issue. Required if `key` isn't provided.
   */
  id?: string;
  /**
   * The key of an issue. Required if `id` isn't provided.
   */
  key?: string;
  /**
   * The URL of the issue.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL ListOperand */
export interface ListOperand {
  /**
   * Encoded operand, which can be used directly in a JQL query.
   */
  encodedOperand?: string;
  /**
   * The list of operand values.
   */
  values: Array<JqlQueryUnitaryOperand>;
}
/** MODEL ListWrapperCallbackApplicationRole */
// deno-lint-ignore no-empty-interface
export interface ListWrapperCallbackApplicationRole {
}
/** MODEL ListWrapperCallbackGroupName */
// deno-lint-ignore no-empty-interface
export interface ListWrapperCallbackGroupName {
}
/** MODEL Locale */
export interface Locale {
  /**
   * The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create.
   */
  locale?: string;
}
/** MODEL MandatoryFieldValue */
export interface MandatoryFieldValue {
  /**
   * If `true`, will try to retain original non-null issue field values on move.
   * default Value true
   */
  retain?: boolean;
  /**
   * Will treat as `MandatoryFieldValue` if type is `raw` or `empty`
   * default Value "raw"
   */
  type?: string;
  /**
   * Value for each field. Provide a `list of strings` for non-ADF fields.
   */
  value: string[];
}
/** MODEL MandatoryFieldValueForADF */
export interface MandatoryFieldValueForADF {
  /**
   * If `true`, will try to retain original non-null issue field values on move.
   * default Value true
   */
  retain?: boolean;
  /**
   * Will treat as `MandatoryFieldValueForADF` if type is `adf`
   * default Value "raw"
   */
  type: string;
  /**
   * Value for each field. Accepts Atlassian Document Format (ADF) for rich text fields like `description`, `environments`. For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure)
   */
  value: unknown;
}
/** MODEL MappingsByIssueTypeOverride */
export interface MappingsByIssueTypeOverride {
  /**
   * The ID of the issue type for this mapping.
   */
  issueTypeId: string;
  /**
   * The list of status mappings.
   */
  statusMappings: Array<WorkflowAssociationStatusMapping>;
}
/** MODEL MappingsByWorkflow */
export interface MappingsByWorkflow {
  /**
   * The ID of the new workflow.
   */
  newWorkflowId: string;
  /**
   * The ID of the old workflow.
   */
  oldWorkflowId: string;
  /**
   * The list of status mappings.
   */
  statusMappings: Array<WorkflowAssociationStatusMapping>;
}
/** MODEL MoveFieldBean */
export interface MoveFieldBean {
  /**
   * The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided.
   * @format: "uri"
   */
  after?: string;
  /**
   * The named position to which the screen tab field should be moved. Required if `after` isn't provided.
   */
  position?: string;
}
/** MODEL MultiIssueEntityProperties */
export interface MultiIssueEntityProperties {
  /**
   * A list of issue IDs and their respective properties.
   */
  issues?: Array<IssueEntityPropertiesForMultiUpdate>;
}
/** MODEL MultipartFile */
export interface MultipartFile {
  bytes?: string[];
  contentType?: string;
  empty?: boolean;
  inputStream?: unknown;
  name?: string;
  originalFilename?: string;
  /**
   * Ref: #/components/schemas/Resource
   */
  resource?: Resource;
  /**
   * @format: "int64"
   */
  size?: number;
}
/** MODEL MultipleCustomFieldValuesUpdate */
export interface MultipleCustomFieldValuesUpdate {
  /**
   * The ID or key of the custom field. For example, `customfield_10010`.
   */
  customField: string;
  /**
   * The list of issue IDs.
   */
  issueIds: string[];
  /**
   * The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
   * 
   *  *  `string` the value must be a string.
   *  *  `number` the value must be a number.
   *  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
   *  *  `user` the value must be an object that contains the `accountId` field.
   *  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
   * 
   * A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
   */
  value: string;
}
/** MODEL MultipleCustomFieldValuesUpdateDetails */
export interface MultipleCustomFieldValuesUpdateDetails {
  updates?: Array<MultipleCustomFieldValuesUpdate>;
}
/** MODEL NestedResponse */
export interface NestedResponse {
  /**
   * Ref: #/components/schemas/ErrorCollection
   */
  errorCollection?: ErrorCollection;
  /**
   * @format: "int32"
   */
  status?: number;
  /**
   * Ref: #/components/schemas/WarningCollection
   */
  warningCollection?: WarningCollection;
}
/** MODEL NewUserDetails */
export interface NewUserDetails {
  /**
   * Deprecated, do not use.
   */
  applicationKeys?: string[];
  /**
   * This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
   */
  displayName?: string;
  /**
   * The email address for the user.
   */
  emailAddress: string;
  /**
   * This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  key?: string;
  /**
   * This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  name?: string;
  /**
   * This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
   */
  password?: string;
  /**
   * Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. To create a user without product access, set this field to be an empty array.
   */
  products: string[];
  /**
   * The URL of the user.
   */
  self?: string;
}
/** MODEL Notification */
export interface Notification {
  /**
   * The HTML body of the email notification for the issue.
   */
  htmlBody?: string;
  /**
   * Restricts the notifications to users with the specified permissions.
   */
  restrict?: NotificationRecipientsRestrictions;
  /**
   * The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
   */
  subject?: string;
  /**
   * The plain text body of the email notification for the issue.
   */
  textBody?: string;
  /**
   * The recipients of the email notification for the issue.
   */
  to?: NotificationRecipients;
}
/** MODEL NotificationEvent */
export interface NotificationEvent {
  /**
   * The description of the event.
   */
  description?: string;
  /**
   * The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the event.
   */
  name?: string;
  /**
   * The template of the event. Only custom events configured by Jira administrators have template.
   */
  templateEvent?: NotificationEvent;
}
/** MODEL NotificationRecipients */
export interface NotificationRecipients {
  /**
   * Whether the notification should be sent to the issue's assignees.
   */
  assignee?: boolean;
  /**
   * List of groupIds to receive the notification.
   */
  groupIds?: string[];
  /**
   * List of groups to receive the notification.
   */
  groups?: Array<GroupName>;
  /**
   * Whether the notification should be sent to the issue's reporter.
   */
  reporter?: boolean;
  /**
   * List of users to receive the notification.
   */
  users?: Array<UserDetails>;
  /**
   * Whether the notification should be sent to the issue's voters.
   */
  voters?: boolean;
  /**
   * Whether the notification should be sent to the issue's watchers.
   */
  watchers?: boolean;
}
/** MODEL NotificationRecipientsRestrictions */
export interface NotificationRecipientsRestrictions {
  /**
   * List of groupId memberships required to receive the notification.
   */
  groupIds?: string[];
  /**
   * List of group memberships required to receive the notification.
   */
  groups?: Array<GroupName>;
  /**
   * List of permissions required to receive the notification.
   */
  permissions?: Array<RestrictedPermission>;
}
/** MODEL NotificationScheme */
export interface NotificationScheme {
  /**
   * The description of the notification scheme.
   */
  description?: string;
  /**
   * Expand options that include additional notification scheme details in the response.
   */
  expand?: string;
  /**
   * The ID of the notification scheme.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the notification scheme.
   */
  name?: string;
  /**
   * The notification events and associated recipients.
   */
  notificationSchemeEvents?: Array<NotificationSchemeEvent>;
  /**
   * The list of project IDs associated with the notification scheme.
   */
  projects?: string[];
  /**
   * The scope of the notification scheme.
   */
  scope?: Scope;
  self?: string;
}
/** MODEL NotificationSchemeAndProjectMappingJsonBean */
export interface NotificationSchemeAndProjectMappingJsonBean {
  notificationSchemeId?: string;
  projectId?: string;
}
/** MODEL NotificationSchemeEvent */
export interface NotificationSchemeEvent {
  /**
   * Ref: #/components/schemas/NotificationEvent
   */
  event?: NotificationEvent;
  notifications?: Array<EventNotification>;
}
/** MODEL NotificationSchemeEventDetails */
export interface NotificationSchemeEventDetails {
  /**
   * The ID of the event.
   */
  event: NotificationSchemeEventTypeId;
  /**
   * The list of notifications mapped to a specified event.
   */
  notifications: Array<NotificationSchemeNotificationDetails>;
}
/** MODEL NotificationSchemeEventTypeId */
export interface NotificationSchemeEventTypeId {
  /**
   * The ID of the notification scheme event.
   */
  id: string;
}
/** MODEL NotificationSchemeId */
export interface NotificationSchemeId {
  /**
   * The ID of a notification scheme.
   */
  id: string;
}
/** MODEL NotificationSchemeNotificationDetails */
export interface NotificationSchemeNotificationDetails {
  /**
   * The notification type, e.g `CurrentAssignee`, `Group`, `EmailAddress`.
   */
  notificationType: string;
  /**
   * The value corresponding to the specified notification type.
   */
  parameter?: string;
}
/** MODEL OldToNewSecurityLevelMappingsBean */
export interface OldToNewSecurityLevelMappingsBean {
  /**
   * The new issue security level ID. Providing null will clear the assigned old level from issues.
   */
  newLevelId: string;
  /**
   * The old issue security level ID. Providing null will remap all issues without any assigned levels.
   */
  oldLevelId: string;
}
/** MODEL OperationMessage */
export interface OperationMessage {
  /**
   * The human-readable message that describes the result.
   */
  message: string;
  /**
   * The status code of the response.
   */
  statusCode: number;
}
/** MODEL Operations */
export interface Operations {
  /**
   * Details of the link groups defining issue operations.
   */
  linkGroups?: Array<LinkGroup>;
}
/** MODEL OrderOfCustomFieldOptions */
export interface OrderOfCustomFieldOptions {
  /**
   * The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.
   */
  after?: string;
  /**
   * A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.
   */
  customFieldOptionIds: string[];
  /**
   * The position the custom field options should be moved to. Required if `after` isn't provided.
   */
  position?: string;
}
/** MODEL OrderOfIssueTypes */
export interface OrderOfIssueTypes {
  /**
   * The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
   */
  after?: string;
  /**
   * A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
   */
  issueTypeIds: string[];
  /**
   * The position the issue types should be moved to. Required if `after` isn't provided.
   */
  position?: string;
}
/** MODEL PageBean2ComponentJsonBean */
export interface PageBean2ComponentJsonBean {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<ComponentJsonBean>;
}
/** MODEL PageBeanChangelog */
export interface PageBeanChangelog {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Changelog>;
}
/** MODEL PageBeanComment */
export interface PageBeanComment {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Comment>;
}
/** MODEL PageBeanComponentWithIssueCount */
export interface PageBeanComponentWithIssueCount {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<ComponentWithIssueCount>;
}
/** MODEL PageBeanContext */
export interface PageBeanContext {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Context>;
}
/** MODEL PageBeanContextForProjectAndIssueType */
export interface PageBeanContextForProjectAndIssueType {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<ContextForProjectAndIssueType>;
}
/** MODEL PageBeanContextualConfiguration */
export interface PageBeanContextualConfiguration {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<ContextualConfiguration>;
}
/** MODEL PageBeanCustomFieldContext */
export interface PageBeanCustomFieldContext {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<CustomFieldContext>;
}
/** MODEL PageBeanCustomFieldContextDefaultValue */
export interface PageBeanCustomFieldContextDefaultValue {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<CustomFieldContextDefaultValue>;
}
/** MODEL PageBeanCustomFieldContextOption */
export interface PageBeanCustomFieldContextOption {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<CustomFieldContextOption>;
}
/** MODEL PageBeanCustomFieldContextProjectMapping */
export interface PageBeanCustomFieldContextProjectMapping {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<CustomFieldContextProjectMapping>;
}
/** MODEL PageBeanDashboard */
export interface PageBeanDashboard {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Dashboard>;
}
/** MODEL PageBeanField */
export interface PageBeanField {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Field>;
}
/** MODEL PageBeanFieldConfigurationDetails */
export interface PageBeanFieldConfigurationDetails {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<FieldConfigurationDetails>;
}
/** MODEL PageBeanFieldConfigurationIssueTypeItem */
export interface PageBeanFieldConfigurationIssueTypeItem {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<FieldConfigurationIssueTypeItem>;
}
/** MODEL PageBeanFieldConfigurationItem */
export interface PageBeanFieldConfigurationItem {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<FieldConfigurationItem>;
}
/** MODEL PageBeanFieldConfigurationScheme */
export interface PageBeanFieldConfigurationScheme {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<FieldConfigurationScheme>;
}
/** MODEL PageBeanFieldConfigurationSchemeProjects */
export interface PageBeanFieldConfigurationSchemeProjects {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<FieldConfigurationSchemeProjects>;
}
/** MODEL PageBeanFilterDetails */
export interface PageBeanFilterDetails {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<FilterDetails>;
}
/** MODEL PageBeanGroupDetails */
export interface PageBeanGroupDetails {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<GroupDetails>;
}
/** MODEL PageBeanIssueFieldOption */
export interface PageBeanIssueFieldOption {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueFieldOption>;
}
/** MODEL PageBeanIssueSecurityLevelMember */
export interface PageBeanIssueSecurityLevelMember {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueSecurityLevelMember>;
}
/** MODEL PageBeanIssueSecuritySchemeToProjectMapping */
export interface PageBeanIssueSecuritySchemeToProjectMapping {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueSecuritySchemeToProjectMapping>;
}
/** MODEL PageBeanIssueTypeScheme */
export interface PageBeanIssueTypeScheme {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueTypeScheme>;
}
/** MODEL PageBeanIssueTypeSchemeMapping */
export interface PageBeanIssueTypeSchemeMapping {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueTypeSchemeMapping>;
}
/** MODEL PageBeanIssueTypeSchemeProjects */
export interface PageBeanIssueTypeSchemeProjects {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueTypeSchemeProjects>;
}
/** MODEL PageBeanIssueTypeScreenScheme */
export interface PageBeanIssueTypeScreenScheme {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueTypeScreenScheme>;
}
/** MODEL PageBeanIssueTypeScreenSchemeItem */
export interface PageBeanIssueTypeScreenSchemeItem {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueTypeScreenSchemeItem>;
}
/** MODEL PageBeanIssueTypeScreenSchemesProjects */
export interface PageBeanIssueTypeScreenSchemesProjects {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueTypeScreenSchemesProjects>;
}
/** MODEL PageBeanIssueTypeToContextMapping */
export interface PageBeanIssueTypeToContextMapping {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<IssueTypeToContextMapping>;
}
/** MODEL PageBeanJqlFunctionPrecomputationBean */
export interface PageBeanJqlFunctionPrecomputationBean {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<JqlFunctionPrecomputationBean>;
}
/** MODEL PageBeanNotificationScheme */
export interface PageBeanNotificationScheme {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<NotificationScheme>;
}
/** MODEL PageBeanNotificationSchemeAndProjectMappingJsonBean */
export interface PageBeanNotificationSchemeAndProjectMappingJsonBean {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<NotificationSchemeAndProjectMappingJsonBean>;
}
/** MODEL PageBeanPriority */
export interface PageBeanPriority {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Priority>;
}
/** MODEL PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects */
export interface PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<PrioritySchemeWithPaginatedPrioritiesAndProjects>;
}
/** MODEL PageBeanPriorityWithSequence */
export interface PageBeanPriorityWithSequence {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<PriorityWithSequence>;
}
/** MODEL PageBeanProject */
export interface PageBeanProject {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Project>;
}
/** MODEL PageBeanProjectDetails */
export interface PageBeanProjectDetails {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<ProjectDetails>;
}
/** MODEL PageBeanResolutionJsonBean */
export interface PageBeanResolutionJsonBean {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<ResolutionJsonBean>;
}
/** MODEL PageBeanScreen */
export interface PageBeanScreen {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Screen>;
}
/** MODEL PageBeanScreenScheme */
export interface PageBeanScreenScheme {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<ScreenScheme>;
}
/** MODEL PageBeanScreenWithTab */
export interface PageBeanScreenWithTab {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<ScreenWithTab>;
}
/** MODEL PageBeanSecurityLevel */
export interface PageBeanSecurityLevel {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<SecurityLevel>;
}
/** MODEL PageBeanSecurityLevelMember */
export interface PageBeanSecurityLevelMember {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<SecurityLevelMember>;
}
/** MODEL PageBeanSecuritySchemeWithProjects */
export interface PageBeanSecuritySchemeWithProjects {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<SecuritySchemeWithProjects>;
}
/** MODEL PageBeanString */
export interface PageBeanString {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: string[];
}
/** MODEL PageBeanUiModificationDetails */
export interface PageBeanUiModificationDetails {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<UiModificationDetails>;
}
/** MODEL PageBeanUser */
export interface PageBeanUser {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<User>;
}
/** MODEL PageBeanUserDetails */
export interface PageBeanUserDetails {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<UserDetails>;
}
/** MODEL PageBeanUserKey */
export interface PageBeanUserKey {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<UserKey>;
}
/** MODEL PageBeanVersion */
export interface PageBeanVersion {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Version>;
}
/** MODEL PageBeanWebhook */
export interface PageBeanWebhook {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Webhook>;
}
/** MODEL PageBeanWorkflow */
export interface PageBeanWorkflow {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<Workflow>;
}
/** MODEL PageBeanWorkflowScheme */
export interface PageBeanWorkflowScheme {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<WorkflowScheme>;
}
/** MODEL PageBeanWorkflowTransitionRules */
export interface PageBeanWorkflowTransitionRules {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * If there is another page of results, the URL of the next page.
   * @format: "uri"
   */
  nextPage?: string;
  /**
   * The URL of the page.
   * @format: "uri"
   */
  self?: string;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<WorkflowTransitionRules>;
}
/** MODEL PageOfChangelogs */
export interface PageOfChangelogs {
  /**
   * The list of changelogs.
   */
  histories?: Array<Changelog>;
  /**
   * The maximum number of results that could be on the page.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The index of the first item returned on the page.
   * @format: "int32"
   */
  startAt?: number;
  /**
   * The number of results on the page.
   * @format: "int32"
   */
  total?: number;
}
/** MODEL PageOfComments */
export interface PageOfComments {
  /**
   * The list of comments.
   */
  comments?: Array<Comment>;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The number of items returned.
   * @format: "int64"
   */
  total?: number;
}
/** MODEL PageOfCreateMetaIssueTypeWithField */
export interface PageOfCreateMetaIssueTypeWithField {
  /**
   * The collection of FieldCreateMetaBeans.
   */
  fields?: Array<FieldCreateMetadata>;
  /**
   * The maximum number of items to return per page.
   * @format: "int32"
   */
  maxResults?: number;
  results?: Array<FieldCreateMetadata>;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The total number of items in all pages.
   * @format: "int64"
   */
  total?: number;
}
/** MODEL PageOfCreateMetaIssueTypes */
export interface PageOfCreateMetaIssueTypes {
  createMetaIssueType?: Array<IssueTypeIssueCreateMetadata>;
  /**
   * The list of CreateMetaIssueType.
   */
  issueTypes?: Array<IssueTypeIssueCreateMetadata>;
  /**
   * The maximum number of items to return per page.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The index of the first item returned.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * The total number of items in all pages.
   * @format: "int64"
   */
  total?: number;
}
/** MODEL PageOfDashboards */
export interface PageOfDashboards {
  /**
   * List of dashboards.
   */
  dashboards?: Array<Dashboard>;
  /**
   * The maximum number of results that could be on the page.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The URL of the next page of results, if any.
   */
  next?: string;
  /**
   * The URL of the previous page of results, if any.
   */
  prev?: string;
  /**
   * The index of the first item returned on the page.
   * @format: "int32"
   */
  startAt?: number;
  /**
   * The number of results on the page.
   * @format: "int32"
   */
  total?: number;
}
/** MODEL PageOfStatuses */
export interface PageOfStatuses {
  /**
   * Whether this is the last page.
   */
  isLast?: boolean;
  /**
   * The maximum number of items that could be returned.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The URL of the next page of results, if any.
   */
  nextPage?: string;
  /**
   * The URL of this page.
   */
  self?: string;
  /**
   * The index of the first item returned on the page.
   * @format: "int64"
   */
  startAt?: number;
  /**
   * Number of items that satisfy the search.
   * @format: "int64"
   */
  total?: number;
  /**
   * The list of items.
   */
  values?: Array<JiraStatus>;
}
/** MODEL PageOfWorklogs */
export interface PageOfWorklogs {
  /**
   * The maximum number of results that could be on the page.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The index of the first item returned on the page.
   * @format: "int32"
   */
  startAt?: number;
  /**
   * The number of results on the page.
   * @format: "int32"
   */
  total?: number;
  /**
   * List of worklogs.
   */
  worklogs?: Array<Worklog>;
}
/** MODEL PagedListUserDetailsApplicationUser */
export interface PagedListUserDetailsApplicationUser {
  /**
   * The index of the last item returned on the page.
   * @format: "int32"
   */
  "end-index"?: number;
  /**
   * The list of items.
   */
  items?: Array<UserDetails>;
  /**
   * The maximum number of results that could be on the page.
   * @format: "int32"
   */
  "max-results"?: number;
  /**
   * The number of items on the page.
   * @format: "int32"
   */
  size?: number;
  /**
   * The index of the first item returned on the page.
   * @format: "int32"
   */
  "start-index"?: number;
}
/** MODEL PaginatedResponseComment */
export interface PaginatedResponseComment {
  /**
   * @format: "int32"
   */
  maxResults?: number;
  results?: Array<Comment>;
  /**
   * @format: "int64"
   */
  startAt?: number;
  /**
   * @format: "int64"
   */
  total?: number;
}
/** MODEL PaginatedResponseFieldCreateMetadata */
export interface PaginatedResponseFieldCreateMetadata {
  /**
   * @format: "int32"
   */
  maxResults?: number;
  results?: Array<FieldCreateMetadata>;
  /**
   * @format: "int64"
   */
  startAt?: number;
  /**
   * @format: "int64"
   */
  total?: number;
}
/** MODEL PaginatedResponseIssueTypeIssueCreateMetadata */
export interface PaginatedResponseIssueTypeIssueCreateMetadata {
  /**
   * @format: "int32"
   */
  maxResults?: number;
  results?: Array<IssueTypeIssueCreateMetadata>;
  /**
   * @format: "int64"
   */
  startAt?: number;
  /**
   * @format: "int64"
   */
  total?: number;
}
/** MODEL ParsedJqlQueries */
export interface ParsedJqlQueries {
  /**
   * A list of parsed JQL queries.
   */
  queries: Array<ParsedJqlQuery>;
}
/** MODEL ParsedJqlQuery */
export interface ParsedJqlQuery {
  /**
   * The list of syntax or validation errors.
   */
  errors?: string[];
  /**
   * The JQL query that was parsed and validated.
   */
  query: string;
  /**
   * The syntax tree of the query. Empty if the query was invalid.
   */
  structure?: JqlQuery;
}
/** MODEL PermissionDetails */
export interface PermissionDetails {
  /**
   * The edit permissions for the shareable entities.
   */
  editPermissions: Array<SharePermission>;
  /**
   * The share permissions for the shareable entities.
   */
  sharePermissions: Array<SharePermission>;
}
/** MODEL PermissionGrant */
export interface PermissionGrant {
  /**
   * The user or group being granted the permission. It consists of a `type`, a type-dependent `parameter` and a type-dependent `value`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
   */
  holder?: PermissionHolder;
  /**
   * The ID of the permission granted details.
   * @format: "int64"
   */
  id?: number;
  /**
   * The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions.
   */
  permission?: string;
  /**
   * The URL of the permission granted details.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL PermissionGrants */
export interface PermissionGrants {
  /**
   * Expand options that include additional permission grant details in the response.
   */
  expand?: string;
  /**
   * Permission grants list.
   */
  permissions?: Array<PermissionGrant>;
}
/** MODEL PermissionHolder */
export interface PermissionHolder {
  /**
   * Expand options that include additional permission holder details in the response.
   */
  expand?: string;
  /**
   * As a group's name can change, use of `value` is recommended. The identifier associated withthe `type` value that defines the holder of the permission.
   */
  parameter?: string;
  /**
   * The type of permission holder.
   */
  type: string;
  /**
   * The identifier associated with the `type` value that defines the holder of the permission.
   */
  value?: string;
}
/** MODEL PermissionScheme */
export interface PermissionScheme {
  /**
   * A description for the permission scheme.
   */
  description?: string;
  /**
   * The expand options available for the permission scheme.
   */
  expand?: string;
  /**
   * The ID of the permission scheme.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the permission scheme. Must be unique.
   */
  name: string;
  /**
   * The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information.
   */
  permissions?: Array<PermissionGrant>;
  /**
   * The scope of the permission scheme.
   */
  scope?: Scope;
  /**
   * The URL of the permission scheme.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL PermissionSchemes */
export interface PermissionSchemes {
  /**
   * Permission schemes list.
   */
  permissionSchemes?: Array<PermissionScheme>;
}
/** MODEL Permissions */
export interface Permissions {
  /**
   * List of permissions.
   */
  permissions?: unknown;
}
/** MODEL PermissionsKeysBean */
export interface PermissionsKeysBean {
  /**
   * A list of permission keys.
   */
  permissions: string[];
}
/** MODEL PermittedProjects */
export interface PermittedProjects {
  /**
   * A list of projects.
   */
  projects?: Array<ProjectIdentifierBean>;
}
/** MODEL Priority */
export interface Priority {
  /**
   * The description of the issue priority.
   */
  description?: string;
  /**
   * The URL of the icon for the issue priority.
   */
  iconUrl?: string;
  /**
   * The ID of the issue priority.
   */
  id?: string;
  /**
   * Whether this priority is the default.
   */
  isDefault?: boolean;
  /**
   * The name of the issue priority.
   */
  name?: string;
  /**
   * Priority schemes associated with the issue priority.
   */
  schemes?: ExpandPrioritySchemePage;
  /**
   * The URL of the issue priority.
   */
  self?: string;
  /**
   * The color used to indicate the issue priority.
   */
  statusColor?: string;
}
/** MODEL PriorityId */
export interface PriorityId {
  /**
   * The ID of the issue priority.
   */
  id: string;
}
/** MODEL PriorityMapping */
export interface PriorityMapping {
  /**
   * The mapping of priorities for issues being migrated **into** this priority scheme. Key is the old priority ID, value is the new priority ID (must exist in this priority scheme).
   */
  in?: unknown;
  /**
   * The mapping of priorities for issues being migrated **out of** this priority scheme. Key is the old priority ID (must exist in this priority scheme), value is the new priority ID (must exist in the default priority scheme). Required for updating an existing priority scheme. Not used when creating a new priority scheme.
   */
  out?: unknown;
}
/** MODEL PrioritySchemeChangesWithMappings */
export interface PrioritySchemeChangesWithMappings {
  /**
   * Affected entity ids.
   */
  ids: string[];
  /**
   * Instructions to migrate issues.
   */
  mappings?: Array<PriorityMapping>;
}
/** MODEL PrioritySchemeChangesWithoutMappings */
export interface PrioritySchemeChangesWithoutMappings {
  /**
   * Affected entity ids.
   */
  ids: string[];
}
/** MODEL PrioritySchemeId */
export interface PrioritySchemeId {
  /**
   * The ID of the priority scheme.
   */
  id?: string;
  /**
   * The in-progress issue migration task.
   */
  task?: TaskProgressBeanJsonNode;
}
/** MODEL PrioritySchemeWithPaginatedPrioritiesAndProjects */
export interface PrioritySchemeWithPaginatedPrioritiesAndProjects {
  default?: boolean;
  /**
   * The ID of the default issue priority.
   */
  defaultPriorityId?: string;
  /**
   * The description of the priority scheme
   */
  description?: string;
  /**
   * The ID of the priority scheme.
   */
  id: string;
  isDefault?: boolean;
  /**
   * The name of the priority scheme
   */
  name: string;
  /**
   * The paginated list of priorities.
   */
  priorities?: PageBeanPriorityWithSequence;
  /**
   * The paginated list of projects.
   */
  projects?: PageBeanProjectDetails;
  /**
   * The URL of the priority scheme.
   */
  self?: string;
}
/** MODEL PriorityWithSequence */
export interface PriorityWithSequence {
  /**
   * The description of the issue priority.
   */
  description?: string;
  /**
   * The URL of the icon for the issue priority.
   */
  iconUrl?: string;
  /**
   * The ID of the issue priority.
   */
  id?: string;
  /**
   * Whether this priority is the default.
   */
  isDefault?: boolean;
  /**
   * The name of the issue priority.
   */
  name?: string;
  /**
   * The URL of the issue priority.
   */
  self?: string;
  /**
   * The sequence of the issue priority.
   */
  sequence?: string;
  /**
   * The color used to indicate the issue priority.
   */
  statusColor?: string;
}
/** MODEL Project */
export interface Project {
  /**
   * Whether the project is archived.
   */
  archived?: boolean;
  /**
   * The user who archived the project.
   */
  archivedBy?: User;
  /**
   * The date when the project was archived.
   * @format: "date-time"
   */
  archivedDate?: string;
  /**
   * The default assignee when creating issues for this project.
   */
  assigneeType?: string;
  /**
   * The URLs of the project's avatars.
   */
  avatarUrls?: AvatarUrlsBean;
  /**
   * List of the components contained in the project.
   */
  components?: Array<ProjectComponent>;
  /**
   * Whether the project is marked as deleted.
   */
  deleted?: boolean;
  /**
   * The user who marked the project as deleted.
   */
  deletedBy?: User;
  /**
   * The date when the project was marked as deleted.
   * @format: "date-time"
   */
  deletedDate?: string;
  /**
   * A brief description of the project.
   */
  description?: string;
  /**
   * An email address associated with the project.
   */
  email?: string;
  /**
   * Expand options that include additional project details in the response.
   */
  expand?: string;
  /**
   * Whether the project is selected as a favorite.
   */
  favourite?: boolean;
  /**
   * The ID of the project.
   */
  id?: string;
  /**
   * Insights about the project.
   */
  insight?: ProjectInsight;
  /**
   * Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues.
   */
  isPrivate?: boolean;
  /**
   * The issue type hierarchy for the project.
   */
  issueTypeHierarchy?: Hierarchy;
  /**
   * List of the issue types available in the project.
   */
  issueTypes?: Array<IssueTypeDetails>;
  /**
   * The key of the project.
   */
  key?: string;
  /**
   * The project landing page info.
   */
  landingPageInfo?: ProjectLandingPageInfo;
  /**
   * The username of the project lead.
   */
  lead?: User;
  /**
   * The name of the project.
   */
  name?: string;
  /**
   * User permissions on the project
   */
  permissions?: ProjectPermissions;
  /**
   * The category the project belongs to.
   */
  projectCategory?: ProjectCategory;
  /**
   * The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
   */
  projectTypeKey?: string;
  /**
   * Map of project properties
   */
  properties?: unknown;
  /**
   * The date when the project is deleted permanently.
   * @format: "date-time"
   */
  retentionTillDate?: string;
  /**
   * The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
   */
  roles?: unknown;
  /**
   * The URL of the project details.
   * @format: "uri"
   */
  self?: string;
  /**
   * Whether the project is simplified.
   */
  simplified?: boolean;
  /**
   * The type of the project.
   */
  style?: string;
  /**
   * A link to information about this project, such as project documentation.
   */
  url?: string;
  /**
   * Unique ID for next-gen projects.
   * @format: "uuid"
   */
  uuid?: string;
  /**
   * The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
   */
  versions?: Array<Version>;
}
/** MODEL ProjectAndIssueTypePair */
export interface ProjectAndIssueTypePair {
  /**
   * The ID of the issue type.
   */
  issueTypeId: string;
  /**
   * The ID of the project.
   */
  projectId: string;
}
/** MODEL ProjectAvatars */
export interface ProjectAvatars {
  /**
   * List of avatars added to Jira. These avatars may be deleted.
   */
  custom?: Array<Avatar>;
  /**
   * List of avatars included with Jira. These avatars cannot be deleted.
   */
  system?: Array<Avatar>;
}
/** MODEL ProjectCategory */
export interface ProjectCategory {
  /**
   * The description of the project category.
   */
  description?: string;
  /**
   * The ID of the project category.
   */
  id?: string;
  /**
   * The name of the project category. Required on create, optional on update.
   */
  name?: string;
  /**
   * The URL of the project category.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL ProjectComponent */
export interface ProjectComponent {
  /**
   * Compass component's ID. Can't be updated. Not required for creating a Project Component.
   */
  ari?: string;
  /**
   * The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
   */
  assignee?: User;
  /**
   * The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
   * 
   *  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
   *  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
   *  *  `UNASSIGNED` an assignee is not set for issues created with this component.
   *  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
   * 
   * Default value: `PROJECT_DEFAULT`.  
   * Optional when creating or updating a component.
   */
  assigneeType?: string;
  /**
   * The description for the component. Optional when creating or updating a component.
   */
  description?: string;
  /**
   * The unique identifier for the component.
   */
  id?: string;
  /**
   * Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
   */
  isAssigneeTypeValid?: boolean;
  /**
   * The user details for the component's lead user.
   */
  lead?: User;
  /**
   * The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
   */
  leadAccountId?: string;
  /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  leadUserName?: string;
  /**
   * Compass component's metadata. Can't be updated. Not required for creating a Project Component.
   */
  metadata?: unknown;
  /**
   * The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
   */
  name?: string;
  /**
   * The key of the project the component is assigned to. Required when creating a component. Can't be updated.
   */
  project?: string;
  /**
   * The ID of the project the component is assigned to.
   * @format: "int64"
   */
  projectId?: number;
  /**
   * The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
   */
  realAssignee?: User;
  /**
   * The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
   * 
   *  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
   *  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
   *  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
   *  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
   */
  realAssigneeType?: string;
  /**
   * The URL of the component.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL ProjectDataPolicies */
export interface ProjectDataPolicies {
  /**
   * List of projects with data policies.
   */
  projectDataPolicies?: Array<ProjectWithDataPolicy>;
}
/** MODEL ProjectDataPolicy */
export interface ProjectDataPolicy {
  /**
   * Whether the project contains any content inaccessible to the requesting application.
   */
  anyContentBlocked?: boolean;
}
/** MODEL ProjectDetails */
export interface ProjectDetails {
  /**
   * The URLs of the project's avatars.
   */
  avatarUrls?: AvatarUrlsBean;
  /**
   * The ID of the project.
   */
  id?: string;
  /**
   * The key of the project.
   */
  key?: string;
  /**
   * The name of the project.
   */
  name?: string;
  /**
   * The category the project belongs to.
   */
  projectCategory?: UpdatedProjectCategory;
  /**
   * The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
   */
  projectTypeKey?: string;
  /**
   * The URL of the project details.
   */
  self?: string;
  /**
   * Whether or not the project is simplified.
   */
  simplified?: boolean;
}
/** MODEL ProjectEmailAddress */
export interface ProjectEmailAddress {
  /**
   * The email address.
   */
  emailAddress?: string;
  /**
   * When using a custom domain, the status of the email address.
   */
  emailAddressStatus?: string[];
}
/** MODEL ProjectFeature */
export interface ProjectFeature {
  /**
   * The key of the feature.
   */
  feature?: string;
  /**
   * URI for the image representing the feature.
   */
  imageUri?: string;
  /**
   * Localized display description for the feature.
   */
  localisedDescription?: string;
  /**
   * Localized display name for the feature.
   */
  localisedName?: string;
  /**
   * List of keys of the features required to enable the feature.
   */
  prerequisites?: string[];
  /**
   * The ID of the project.
   * @format: "int64"
   */
  projectId?: number;
  /**
   * The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
   */
  state?: string;
  /**
   * Whether the state of the feature can be updated.
   */
  toggleLocked?: boolean;
}
/** MODEL ProjectFeatureState */
export interface ProjectFeatureState {
  /**
   * The feature state.
   */
  state?: string;
}
/** MODEL ProjectId */
export interface ProjectId {
  /**
   * The ID of the project.
   */
  id: string;
}
/** MODEL ProjectIdentifierBean */
export interface ProjectIdentifierBean {
  /**
   * The ID of the project.
   * @format: "int64"
   */
  id?: number;
  /**
   * The key of the project.
   */
  key?: string;
}
/** MODEL ProjectIdentifiers */
export interface ProjectIdentifiers {
  /**
   * The ID of the created project.
   * @format: "int64"
   */
  id: number;
  /**
   * The key of the created project.
   */
  key: string;
  /**
   * The URL of the created project.
   * @format: "uri"
   */
  self: string;
}
/** MODEL ProjectIds */
export interface ProjectIds {
  /**
   * The IDs of projects.
   */
  projectIds: string[];
}
/** MODEL ProjectInsight */
export interface ProjectInsight {
  /**
   * The last issue update time.
   * @format: "date-time"
   */
  lastIssueUpdateTime?: string;
  /**
   * Total issue count.
   * @format: "int64"
   */
  totalIssueCount?: number;
}
/** MODEL ProjectIssueCreateMetadata */
export interface ProjectIssueCreateMetadata {
  /**
   * List of the project's avatars, returning the avatar size and associated URL.
   */
  avatarUrls?: AvatarUrlsBean;
  /**
   * Expand options that include additional project issue create metadata details in the response.
   */
  expand?: string;
  /**
   * The ID of the project.
   */
  id?: string;
  /**
   * List of the issue types supported by the project.
   */
  issuetypes?: Array<IssueTypeIssueCreateMetadata>;
  /**
   * The key of the project.
   */
  key?: string;
  /**
   * The name of the project.
   */
  name?: string;
  /**
   * The URL of the project.
   */
  self?: string;
}
/** MODEL ProjectIssueSecurityLevels */
export interface ProjectIssueSecurityLevels {
  /**
   * Issue level security items list.
   */
  levels: Array<SecurityLevel>;
}
/** MODEL ProjectIssueTypeHierarchy */
export interface ProjectIssueTypeHierarchy {
  /**
   * Details of an issue type hierarchy level.
   */
  hierarchy?: Array<ProjectIssueTypesHierarchyLevel>;
  /**
   * The ID of the project.
   * @format: "int64"
   */
  projectId?: number;
}
/** MODEL ProjectIssueTypeMapping */
export interface ProjectIssueTypeMapping {
  /**
   * The ID of the issue type.
   */
  issueTypeId: string;
  /**
   * The ID of the project.
   */
  projectId: string;
}
/** MODEL ProjectIssueTypeMappings */
export interface ProjectIssueTypeMappings {
  /**
   * The project and issue type mappings.
   */
  mappings: Array<ProjectIssueTypeMapping>;
}
/** MODEL ProjectIssueTypes */
export interface ProjectIssueTypes {
  /**
   * IDs of the issue types
   */
  issueTypes?: string[];
  /**
   * Ref: #/components/schemas/ProjectId
   */
  project?: ProjectId;
}
/** MODEL ProjectIssueTypesHierarchyLevel */
export interface ProjectIssueTypesHierarchyLevel {
  /**
   * The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
   * @format: "uuid"
   */
  entityId?: string;
  /**
   * The list of issue types in the hierarchy level.
   */
  issueTypes?: Array<IssueTypeInfo>;
  /**
   * The level of the issue type hierarchy level.
   * @format: "int32"
   */
  level?: number;
  /**
   * The name of the issue type hierarchy level.
   */
  name?: string;
}
/** MODEL ProjectLandingPageInfo */
export interface ProjectLandingPageInfo {
  attributes?: unknown;
  /**
   * @format: "int64"
   */
  boardId?: number;
  boardName?: string;
  projectKey?: string;
  projectType?: string;
  queueCategory?: string;
  /**
   * @format: "int64"
   */
  queueId?: number;
  queueName?: string;
  simpleBoard?: boolean;
  simplified?: boolean;
  url?: string;
}
/** MODEL ProjectPermissions */
export interface ProjectPermissions {
  /**
   * Whether the logged user can edit the project.
   */
  canEdit?: boolean;
}
/** MODEL ProjectRole */
export interface ProjectRole {
  /**
   * The list of users who act in this role.
   */
  actors?: Array<RoleActor>;
  /**
   * Whether this role is the admin role for the project.
   */
  admin?: boolean;
  /**
   * Whether the calling user is part of this role.
   */
  currentUserRole?: boolean;
  /**
   * Whether this role is the default role for the project
   */
  default?: boolean;
  /**
   * The description of the project role.
   */
  description?: string;
  /**
   * The ID of the project role.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the project role.
   */
  name?: string;
  /**
   * Whether the roles are configurable for this project.
   */
  roleConfigurable?: boolean;
  /**
   * The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
   */
  scope?: Scope;
  /**
   * The URL the project role details.
   * @format: "uri"
   */
  self?: string;
  /**
   * The translated name of the project role.
   */
  translatedName?: string;
}
/** MODEL ProjectRoleActorsUpdateBean */
export interface ProjectRoleActorsUpdateBean {
  /**
   * The actors to add to the project role.
   * 
   * Add groups using:
   * 
   *  *  `atlassian-group-role-actor` and a list of group names.
   *  *  `atlassian-group-role-actor-id` and a list of group IDs.
   * 
   * As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `"atlassian-group-role-actor-id":["eef79f81-0b89-4fca-a736-4be531a10869","77f6ab39-e755-4570-a6ae-2d7a8df0bcb8"]`.
   * 
   * Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`.
   */
  categorisedActors?: unknown;
  /**
   * The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
   * @format: "int64"
   */
  id?: number;
}
/** MODEL ProjectRoleDetails */
export interface ProjectRoleDetails {
  /**
   * Whether this role is the admin role for the project.
   */
  admin?: boolean;
  /**
   * Whether this role is the default role for the project.
   */
  default?: boolean;
  /**
   * The description of the project role.
   */
  description?: string;
  /**
   * The ID of the project role.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the project role.
   */
  name?: string;
  /**
   * Whether the roles are configurable for this project.
   */
  roleConfigurable?: boolean;
  /**
   * The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
   */
  scope?: Scope;
  /**
   * The URL the project role details.
   * @format: "uri"
   */
  self?: string;
  /**
   * The translated name of the project role.
   */
  translatedName?: string;
}
/** MODEL ProjectRoleGroup */
export interface ProjectRoleGroup {
  /**
   * The display name of the group.
   */
  displayName?: string;
  /**
   * The ID of the group.
   */
  groupId?: string;
  /**
   * The name of the group. As a group's name can change, use of `groupId` is recommended to identify the group.
   */
  name?: string;
}
/** MODEL ProjectRoleUser */
export interface ProjectRoleUser {
  /**
   * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
   */
  accountId?: string;
}
/** MODEL ProjectScopeBean */
export interface ProjectScopeBean {
  /**
   * Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
   */
  attributes?: string[];
  /**
   * The ID of the project that the option's behavior applies to.
   * @format: "int64"
   */
  id?: number;
}
/** MODEL ProjectType */
export interface ProjectType {
  /**
   * The color of the project type.
   */
  color?: string;
  /**
   * The key of the project type's description.
   */
  descriptionI18nKey?: string;
  /**
   * The formatted key of the project type.
   */
  formattedKey?: string;
  /**
   * The icon of the project type.
   */
  icon?: string;
  /**
   * The key of the project type.
   */
  key?: string;
}
/** MODEL ProjectWithDataPolicy */
export interface ProjectWithDataPolicy {
  /**
   * Data policy.
   */
  dataPolicy?: ProjectDataPolicy;
  /**
   * The project ID.
   * @format: "int64"
   */
  id?: number;
}
/** MODEL PropertyKey */
export interface PropertyKey {
  /**
   * The key of the property.
   */
  key?: string;
  /**
   * The URL of the property.
   */
  self?: string;
}
/** MODEL PropertyKeys */
export interface PropertyKeys {
  /**
   * Property key details.
   */
  keys?: Array<PropertyKey>;
}
/** MODEL PublishDraftWorkflowScheme */
export interface PublishDraftWorkflowScheme {
  /**
   * Mappings of statuses to new statuses for issue types.
   */
  statusMappings?: Array<StatusMapping>;
}
/** MODEL PublishedWorkflowId */
export interface PublishedWorkflowId {
  /**
   * The entity ID of the workflow.
   */
  entityId?: string;
  /**
   * The name of the workflow.
   */
  name: string;
}
/** MODEL RegisteredWebhook */
export interface RegisteredWebhook {
  /**
   * The ID of the webhook. Returned if the webhook is created.
   * @format: "int64"
   */
  createdWebhookId?: number;
  /**
   * Error messages specifying why the webhook creation failed.
   */
  errors?: string[];
}
/** MODEL RemoteIssueLink */
export interface RemoteIssueLink {
  /**
   * Details of the remote application the linked item is in.
   */
  application?: Application;
  /**
   * The global ID of the link, such as the ID of the item on the remote system.
   */
  globalId?: string;
  /**
   * The ID of the link.
   * @format: "int64"
   */
  id?: number;
  /**
   * Details of the item linked to.
   */
  object?: RemoteObject;
  /**
   * Description of the relationship between the issue and the linked item.
   */
  relationship?: string;
  /**
   * The URL of the link.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL RemoteIssueLinkIdentifies */
export interface RemoteIssueLinkIdentifies {
  /**
   * The ID of the remote issue link, such as the ID of the item on the remote system.
   * @format: "int64"
   */
  id?: number;
  /**
   * The URL of the remote issue link.
   */
  self?: string;
}
/** MODEL RemoteIssueLinkRequest */
export interface RemoteIssueLinkRequest {
  /**
   * Details of the remote application the linked item is in. For example, trello.
   */
  application?: Application;
  /**
   * An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.
   * 
   * Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.
   * 
   * The maximum length is 255 characters.
   */
  globalId?: string;
  /**
   * Details of the item linked to.
   */
  object: RemoteObject;
  /**
   * Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira.
   */
  relationship?: string;
}
/** MODEL RemoteObject */
export interface RemoteObject {
  /**
   * Details of the icon for the item. If no icon is defined, the default link icon is used in Jira.
   */
  icon?: Icon;
  /**
   * The status of the item.
   */
  status?: Status;
  /**
   * The summary details of the item.
   */
  summary?: string;
  /**
   * The title of the item.
   */
  title: string;
  /**
   * The URL of the item.
   */
  url: string;
}
/** MODEL RemoveOptionFromIssuesResult */
export interface RemoveOptionFromIssuesResult {
  /**
   * A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned.
   */
  errors?: SimpleErrorCollection;
  /**
   * The IDs of the modified issues.
   */
  modifiedIssues?: string[];
  /**
   * The IDs of the unchanged issues, those issues where errors prevent modification.
   */
  unmodifiedIssues?: string[];
}
/** MODEL ReorderIssuePriorities */
export interface ReorderIssuePriorities {
  /**
   * The ID of the priority. Required if `position` isn't provided.
   */
  after?: string;
  /**
   * The list of issue IDs to be reordered. Cannot contain duplicates nor after ID.
   */
  ids: string[];
  /**
   * The position for issue priorities to be moved to. Required if `after` isn't provided.
   */
  position?: string;
}
/** MODEL ReorderIssueResolutionsRequest */
export interface ReorderIssueResolutionsRequest {
  /**
   * The ID of the resolution. Required if `position` isn't provided.
   */
  after?: string;
  /**
   * The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID.
   */
  ids: string[];
  /**
   * The position for issue resolutions to be moved to. Required if `after` isn't provided.
   */
  position?: string;
}
/** MODEL RequiredMappingByIssueType */
export interface RequiredMappingByIssueType {
  /**
   * The ID of the issue type.
   */
  issueTypeId?: string;
  /**
   * The status IDs requiring mapping.
   */
  statusIds?: string[];
}
/** MODEL RequiredMappingByWorkflows */
export interface RequiredMappingByWorkflows {
  /**
   * The ID of the source workflow.
   */
  sourceWorkflowId?: string;
  /**
   * The status IDs requiring mapping.
   */
  statusIds?: string[];
  /**
   * The ID of the target workflow.
   */
  targetWorkflowId?: string;
}
/** MODEL Resolution */
export interface Resolution {
  /**
   * The description of the issue resolution.
   */
  description?: string;
  /**
   * The ID of the issue resolution.
   */
  id?: string;
  /**
   * The name of the issue resolution.
   */
  name?: string;
  /**
   * The URL of the issue resolution.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL ResolutionId */
export interface ResolutionId {
  /**
   * The ID of the issue resolution.
   */
  id: string;
}
/** MODEL ResolutionJsonBean */
export interface ResolutionJsonBean {
  default?: boolean;
  description?: string;
  iconUrl?: string;
  id?: string;
  name?: string;
  self?: string;
}
/** MODEL Resource */
export interface Resource {
  description?: string;
  /**
   * @format: "binary"
   */
  file?: string;
  filename?: string;
  inputStream?: unknown;
  open?: boolean;
  readable?: boolean;
  /**
   * @format: "uri"
   */
  uri?: string;
  /**
   * @format: "url"
   */
  url?: string;
}
/** MODEL RestrictedPermission */
export interface RestrictedPermission {
  /**
   * The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
   */
  id?: string;
  /**
   * The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
   */
  key?: string;
}
/** MODEL RichText */
export interface RichText {
  empty?: boolean;
  emptyAdf?: boolean;
  finalised?: boolean;
  valueSet?: boolean;
}
/** MODEL RoleActor */
export interface RoleActor {
  actorGroup?: ProjectRoleGroup;
  actorUser?: ProjectRoleUser;
  /**
   * The avatar of the role actor.
   * @format: "uri"
   */
  avatarUrl?: string;
  /**
   * The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.
   */
  displayName?: string;
  /**
   * The ID of the role actor.
   * @format: "int64"
   */
  id?: number;
  /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  name?: string;
  /**
   * The type of role actor.
   */
  type?: string;
}
/** MODEL RuleConfiguration */
export interface RuleConfiguration {
  /**
   * Whether the rule is disabled.
   * default Value false
   */
  disabled?: boolean;
  /**
   * A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
   */
  tag?: string;
  /**
   * Configuration of the rule, as it is stored by the Connect or the Forge app on the rule configuration page.
   */
  value: string;
}
/** MODEL SanitizedJqlQueries */
export interface SanitizedJqlQueries {
  /**
   * The list of sanitized JQL queries.
   */
  queries?: Array<SanitizedJqlQuery>;
}
/** MODEL SanitizedJqlQuery */
export interface SanitizedJqlQuery {
  /**
   * The account ID of the user for whom sanitization was performed.
   */
  accountId?: string;
  /**
   * The list of errors.
   */
  errors?: ErrorCollection;
  /**
   * The initial query.
   */
  initialQuery?: string;
  /**
   * The sanitized query, if there were no errors.
   */
  sanitizedQuery?: string;
}
/** MODEL Scope */
export interface Scope {
  /**
   * The project the item has scope in.
   */
  project?: ProjectDetails;
  /**
   * The type of scope.
   */
  type?: string;
}
/** MODEL Screen */
export interface Screen {
  /**
   * The description of the screen.
   */
  description?: string;
  /**
   * The ID of the screen.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the screen.
   */
  name?: string;
  /**
   * The scope of the screen.
   */
  scope?: Scope;
}
/** MODEL ScreenDetails */
export interface ScreenDetails {
  /**
   * The description of the screen. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The name of the screen. The name must be unique. The maximum length is 255 characters.
   */
  name: string;
}
/** MODEL ScreenScheme */
export interface ScreenScheme {
  /**
   * The description of the screen scheme.
   */
  description?: string;
  /**
   * The ID of the screen scheme.
   * @format: "int64"
   */
  id?: number;
  /**
   * Details of the issue type screen schemes associated with the screen scheme.
   */
  issueTypeScreenSchemes?: PageBeanIssueTypeScreenScheme;
  /**
   * The name of the screen scheme.
   */
  name?: string;
  /**
   * The IDs of the screens for the screen types of the screen scheme.
   */
  screens?: ScreenTypes;
}
/** MODEL ScreenSchemeDetails */
export interface ScreenSchemeDetails {
  /**
   * The description of the screen scheme. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
   */
  name: string;
  /**
   * The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
   */
  screens: ScreenTypes;
}
/** MODEL ScreenSchemeId */
export interface ScreenSchemeId {
  /**
   * The ID of the screen scheme.
   * @format: "int64"
   */
  id: number;
}
/** MODEL ScreenTypes */
export interface ScreenTypes {
  /**
   * The ID of the create screen.
   * @format: "int64"
   */
  create?: number;
  /**
   * The ID of the default screen. Required when creating a screen scheme.
   * @format: "int64"
   */
  default: number;
  /**
   * The ID of the edit screen.
   * @format: "int64"
   */
  edit?: number;
  /**
   * The ID of the view screen.
   * @format: "int64"
   */
  view?: number;
}
/** MODEL ScreenWithTab */
export interface ScreenWithTab {
  /**
   * The description of the screen.
   */
  description?: string;
  /**
   * The ID of the screen.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the screen.
   */
  name?: string;
  /**
   * The scope of the screen.
   */
  scope?: Scope;
  /**
   * The tab for the screen.
   */
  tab?: ScreenableTab;
}
/** MODEL ScreenableField */
export interface ScreenableField {
  /**
   * The ID of the screen tab field.
   */
  id?: string;
  /**
   * The name of the screen tab field. Required on create and update. The maximum length is 255 characters.
   */
  name?: string;
}
/** MODEL ScreenableTab */
export interface ScreenableTab {
  /**
   * The ID of the screen tab.
   * @format: "int64"
   */
  id?: number;
  /**
   * The name of the screen tab. The maximum length is 255 characters.
   */
  name: string;
}
/** MODEL SearchAutoCompleteFilter */
export interface SearchAutoCompleteFilter {
  /**
   * Include collapsed fields for fields that have non-unique names.
   * default Value false
   */
  includeCollapsedFields?: boolean;
  /**
   * List of project IDs used to filter the visible field details returned.
   */
  projectIds?: string[];
}
/** MODEL SearchRequestBean */
export interface SearchRequestBean {
  /**
   * Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
   * 
   *  *  `renderedFields` Returns field values rendered in HTML format.
   *  *  `names` Returns the display name of each field.
   *  *  `schema` Returns the schema describing a field type.
   *  *  `transitions` Returns all possible transitions for the issue.
   *  *  `operations` Returns all possible operations for the issue.
   *  *  `editmeta` Returns information about how each field can be edited.
   *  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
   *  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
   */
  expand?: string[];
  /**
   * A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
   * 
   *  *  `*all` Returns all fields.
   *  *  `*navigable` Returns navigable fields.
   *  *  Any issue field, prefixed with a minus to exclude.
   * 
   * The default is `*navigable`.
   * 
   * Examples:
   * 
   *  *  `summary,comment` Returns the summary and comments fields only.
   *  *  `-description` Returns all navigable (default) fields except description.
   *  *  `*all,-comment` Returns all fields except comments.
   * 
   * Multiple `fields` parameters can be included in a request.
   * 
   * Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
   */
  fields?: string[];
  /**
   * Reference fields by their key (rather than ID). The default is `false`.
   */
  fieldsByKeys?: boolean;
  /**
   * A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.
   */
  jql?: string;
  /**
   * The maximum number of items to return per page.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
   */
  properties?: string[];
  /**
   * The index of the first item to return in the page of results (page offset). The base index is `0`.
   * @format: "int32"
   */
  startAt?: number;
  /**
   * Determines how to validate the JQL query and treat the validation results. Supported values:
   * 
   *  *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
   *  *  `warn` Returns all errors as warnings.
   *  *  `none` No validation is performed.
   *  *  `true` *Deprecated* A legacy synonym for `strict`.
   *  *  `false` *Deprecated* A legacy synonym for `warn`.
   * 
   * The default is `strict`.
   * 
   * Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
   */
  validateQuery?: string;
}
/** MODEL SearchResults */
export interface SearchResults {
  /**
   * Expand options that include additional search result details in the response.
   */
  expand?: string;
  /**
   * The list of issues found by the search.
   */
  issues?: Array<IssueBean>;
  /**
   * The maximum number of results that could be on the page.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The ID and name of each field in the search results.
   */
  names?: unknown;
  /**
   * The schema describing the field types in the search results.
   */
  schema?: unknown;
  /**
   * The index of the first item returned on the page.
   * @format: "int32"
   */
  startAt?: number;
  /**
   * The number of results on the page.
   * @format: "int32"
   */
  total?: number;
  /**
   * Any warnings related to the JQL query.
   */
  warningMessages?: string[];
}
/** MODEL SecurityLevel */
export interface SecurityLevel {
  /**
   * The description of the issue level security item.
   */
  description?: string;
  /**
   * The ID of the issue level security item.
   */
  id?: string;
  /**
   * Whether the issue level security item is the default.
   */
  isDefault?: boolean;
  /**
   * The ID of the issue level security scheme.
   */
  issueSecuritySchemeId?: string;
  /**
   * The name of the issue level security item.
   */
  name?: string;
  /**
   * The URL of the issue level security item.
   */
  self?: string;
}
/** MODEL SecurityLevelMember */
export interface SecurityLevelMember {
  /**
   * The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
   */
  holder: PermissionHolder;
  /**
   * The ID of the issue security level member.
   */
  id: string;
  /**
   * The ID of the issue security level.
   */
  issueSecurityLevelId: string;
  /**
   * The ID of the issue security scheme.
   */
  issueSecuritySchemeId: string;
  managed?: boolean;
}
/** MODEL SecurityScheme */
export interface SecurityScheme {
  /**
   * The ID of the default security level.
   * @format: "int64"
   */
  defaultSecurityLevelId?: number;
  /**
   * The description of the issue security scheme.
   */
  description?: string;
  /**
   * The ID of the issue security scheme.
   * @format: "int64"
   */
  id?: number;
  levels?: Array<SecurityLevel>;
  /**
   * The name of the issue security scheme.
   */
  name?: string;
  /**
   * The URL of the issue security scheme.
   */
  self?: string;
}
/** MODEL SecuritySchemeId */
export interface SecuritySchemeId {
  /**
   * The ID of the issue security scheme.
   */
  id: string;
}
/** MODEL SecuritySchemeLevelBean */
export interface SecuritySchemeLevelBean {
  /**
   * The description of the issue security scheme level.
   */
  description?: string;
  /**
   * Specifies whether the level is the default level. False by default.
   */
  isDefault?: boolean;
  /**
   * The list of level members which should be added to the issue security scheme level.
   */
  members?: Array<SecuritySchemeLevelMemberBean>;
  /**
   * The name of the issue security scheme level. Must be unique.
   */
  name: string;
}
/** MODEL SecuritySchemeLevelMemberBean */
export interface SecuritySchemeLevelMemberBean {
  /**
   * The value corresponding to the specified member type.
   */
  parameter?: string;
  /**
   * The issue security level member type, e.g `reporter`, `group`, `user`.
   */
  type: string;
}
/** MODEL SecuritySchemeMembersRequest */
export interface SecuritySchemeMembersRequest {
  /**
   * The list of level members which should be added to the issue security scheme level.
   */
  members?: Array<SecuritySchemeLevelMemberBean>;
}
/** MODEL SecuritySchemeWithProjects */
export interface SecuritySchemeWithProjects {
  /**
   * The default level ID of the issue security scheme.
   * @format: "int64"
   */
  defaultLevel?: number;
  /**
   * The description of the issue security scheme.
   */
  description?: string;
  /**
   * The ID of the issue security scheme.
   * @format: "int64"
   */
  id: number;
  /**
   * The name of the issue security scheme.
   */
  name: string;
  /**
   * The list of project IDs associated with the issue security scheme.
   */
  projectIds?: string[];
  /**
   * The URL of the issue security scheme.
   */
  self: string;
}
/** MODEL SecuritySchemes */
export interface SecuritySchemes {
  /**
   * List of security schemes.
   */
  issueSecuritySchemes?: Array<SecurityScheme>;
}
/** MODEL ServerInformation */
export interface ServerInformation {
  /**
   * The base URL of the Jira instance.
   */
  baseUrl?: string;
  /**
   * The timestamp when the Jira version was built.
   * @format: "date-time"
   */
  buildDate?: string;
  /**
   * The build number of the Jira version.
   * @format: "int32"
   */
  buildNumber?: number;
  /**
   * The type of server deployment. This is always returned as *Cloud*.
   */
  deploymentType?: string;
  /**
   * The display URL of the Jira instance.
   */
  displayUrl?: string;
  /**
   * The display URL of the Servicedesk Help Center.
   */
  displayUrlServicedeskHelpCenter?: string;
  /**
   * Jira instance health check results. Deprecated and no longer returned.
   */
  healthChecks?: Array<HealthCheckResult>;
  /**
   * The unique identifier of the Jira version.
   */
  scmInfo?: string;
  /**
   * The time in Jira when this request was responded to.
   * @format: "date-time"
   */
  serverTime?: string;
  /**
   * The default timezone of the Jira server. In a format known as Olson Time Zones, IANA Time Zones or TZ Database Time Zones.
   */
  serverTimeZone?: unknown;
  /**
   * The name of the Jira instance.
   */
  serverTitle?: string;
  /**
   * The version of Jira.
   */
  version?: string;
  /**
   * The major, minor, and revision version numbers of the Jira version.
   */
  versionNumbers?: string[];
}
/** MODEL ServiceManagementNavigationInfo */
export interface ServiceManagementNavigationInfo {
  queueCategory?: string;
  /**
   * @format: "int64"
   */
  queueId?: number;
  queueName?: string;
}
/** MODEL ServiceRegistry */
export interface ServiceRegistry {
  /**
   * service description
   */
  description?: string;
  /**
   * service ID
   * @format: "uuid"
   */
  id?: string;
  /**
   * service name
   */
  name?: string;
  /**
   * organization ID
   */
  organizationId?: string;
  /**
   * service revision
   */
  revision?: string;
  /**
   * Ref: #/components/schemas/ServiceRegistryTier
   */
  serviceTier?: ServiceRegistryTier;
}
/** MODEL ServiceRegistryTier */
export interface ServiceRegistryTier {
  /**
   * tier description
   */
  description?: string;
  /**
   * tier ID
   * @format: "uuid"
   */
  id?: string;
  /**
   * tier level
   */
  level?: number;
  /**
   * tier name
   */
  name?: string;
  /**
   * name key of the tier
   * @example: "service-registry.tier1.name"
   */
  nameKey?: string;
}
/** MODEL SetDefaultLevelsRequest */
export interface SetDefaultLevelsRequest {
  /**
   * List of objects with issue security scheme ID and new default level ID.
   */
  defaultValues: Array<DefaultLevelValue>;
}
/** MODEL SetDefaultPriorityRequest */
export interface SetDefaultPriorityRequest {
  /**
   * The ID of the new default issue priority. Must be an existing ID or null. Setting this to null erases the default priority setting.
   */
  id: string;
}
/** MODEL SetDefaultResolutionRequest */
export interface SetDefaultResolutionRequest {
  /**
   * The ID of the new default issue resolution. Must be an existing ID or null. Setting this to null erases the default resolution setting.
   */
  id: string;
}
/** MODEL SharePermission */
export interface SharePermission {
  /**
   * The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended.
   */
  group?: GroupName;
  /**
   * The unique identifier of the share permission.
   * @format: "int64"
   */
  id?: number;
  /**
   * The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.  
   * For a request, specify the `id` for the project.
   */
  project?: Project;
  /**
   * The project role that the filter is shared with.  
   * For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
   */
  role?: ProjectRole;
  /**
   * The type of share permission:
   * 
   *  *  `user` Shared with a user.
   *  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
   *  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
   *  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
   *  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
   *  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
   *  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
   */
  type: string;
  /**
   * The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
   */
  user?: UserBean;
}
/** MODEL SharePermissionInputBean */
export interface SharePermissionInputBean {
  /**
   * The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
   */
  accountId?: string;
  /**
   * The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.
   */
  groupId?: string;
  /**
   * The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.
   */
  groupname?: string;
  /**
   * The ID of the project to share the filter with. Set `type` to `project`.
   */
  projectId?: string;
  /**
   * The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
   */
  projectRoleId?: string;
  /**
   * The rights for the share permission.
   * @format: "int32"
   */
  rights?: number;
  /**
   * The type of the share permission.Specify the type as follows:
   * 
   *  *  `user` Share with a user.
   *  *  `group` Share with a group. Specify `groupname` as well.
   *  *  `project` Share with a project. Specify `projectId` as well.
   *  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
   *  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
   *  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
   */
  type: string;
}
/** MODEL SimpleApplicationPropertyBean */
export interface SimpleApplicationPropertyBean {
  /**
   * The ID of the application property.
   */
  id?: string;
  /**
   * The new value.
   */
  value?: string;
}
/** MODEL SimpleErrorCollection */
export interface SimpleErrorCollection {
  /**
   * The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
   */
  errorMessages?: string[];
  /**
   * The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
   */
  errors?: unknown;
  /**
   * @format: "int32"
   */
  httpStatusCode?: number;
}
/** MODEL SimpleLink */
export interface SimpleLink {
  href?: string;
  iconClass?: string;
  id?: string;
  label?: string;
  styleClass?: string;
  title?: string;
  /**
   * @format: "int32"
   */
  weight?: number;
}
/** MODEL SimpleListWrapperApplicationRole */
export interface SimpleListWrapperApplicationRole {
  /**
   * Ref: #/components/schemas/ListWrapperCallbackApplicationRole
   */
  callback?: ListWrapperCallbackApplicationRole;
  items?: Array<ApplicationRole>;
  /**
   * @format: "int32"
   */
  "max-results"?: number;
  /**
   * Ref: #/components/schemas/ListWrapperCallbackApplicationRole
   */
  pagingCallback?: ListWrapperCallbackApplicationRole;
  /**
   * @format: "int32"
   */
  size?: number;
}
/** MODEL SimpleListWrapperGroupName */
export interface SimpleListWrapperGroupName {
  /**
   * Ref: #/components/schemas/ListWrapperCallbackGroupName
   */
  callback?: ListWrapperCallbackGroupName;
  items?: Array<GroupName>;
  /**
   * @format: "int32"
   */
  "max-results"?: number;
  /**
   * Ref: #/components/schemas/ListWrapperCallbackGroupName
   */
  pagingCallback?: ListWrapperCallbackGroupName;
  /**
   * @format: "int32"
   */
  size?: number;
}
/** MODEL SimpleUsage */
export interface SimpleUsage {
  /**
   * The issue type IDs for the usage.
   */
  issueTypeIds: string[];
  /**
   * The project ID for the usage.
   */
  projectId: string;
}
/** MODEL SimplifiedHierarchyLevel */
export interface SimplifiedHierarchyLevel {
  /**
   * The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
   * @format: "int64"
   */
  aboveLevelId?: number;
  /**
   * The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
   * @format: "int64"
   */
  belowLevelId?: number;
  /**
   * The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
   * @format: "uuid"
   */
  externalUuid?: string;
  /**
   * @format: "int32"
   */
  hierarchyLevelNumber?: number;
  /**
   * The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
   * @format: "int64"
   */
  id?: number;
  /**
   * The issue types available in this hierarchy level.
   */
  issueTypeIds?: string[];
  /**
   * The level of this item in the hierarchy.
   * @format: "int32"
   */
  level?: number;
  /**
   * The name of this hierarchy level.
   */
  name?: string;
  /**
   * The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
   * @format: "int64"
   */
  projectConfigurationId?: number;
}
/** MODEL SoftwareNavigationInfo */
export interface SoftwareNavigationInfo {
  /**
   * @format: "int64"
   */
  boardId?: number;
  boardName?: string;
  simpleBoard?: boolean;
  /**
   * @format: "int64"
   */
  totalBoardsInProject?: number;
}
/** MODEL Status */
export interface Status {
  /**
   * Details of the icon representing the status. If not provided, no status icon displays in Jira.
   */
  icon?: Icon;
  /**
   * Whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.
   */
  resolved?: boolean;
}
/** MODEL StatusCategory */
export interface StatusCategory {
  /**
   * The name of the color used to represent the status category.
   */
  colorName?: string;
  /**
   * The ID of the status category.
   * @format: "int64"
   */
  id?: number;
  /**
   * The key of the status category.
   */
  key?: string;
  /**
   * The name of the status category.
   */
  name?: string;
  /**
   * The URL of the status category.
   */
  self?: string;
}
/** MODEL StatusCreate */
export interface StatusCreate {
  /**
   * The description of the status.
   */
  description?: string;
  /**
   * The name of the status.
   */
  name: string;
  /**
   * The category of the status.
   */
  statusCategory: string;
}
/** MODEL StatusCreateRequest */
export interface StatusCreateRequest {
  /**
   * Ref: #/components/schemas/StatusScope
   */
  scope: StatusScope;
  /**
   * Details of the statuses being created.
   */
  statuses: Array<StatusCreate>;
}
/** MODEL StatusDetails */
export interface StatusDetails {
  /**
   * The description of the status.
   */
  description?: string;
  /**
   * The URL of the icon used to represent the status.
   */
  iconUrl?: string;
  /**
   * The ID of the status.
   */
  id?: string;
  /**
   * The name of the status.
   */
  name?: string;
  /**
   * The scope of the field.
   */
  scope?: Scope;
  /**
   * The URL of the status.
   */
  self?: string;
  /**
   * The category assigned to the status.
   */
  statusCategory?: StatusCategory;
}
/** MODEL StatusLayoutUpdate */
export interface StatusLayoutUpdate {
  /**
   * Ref: #/components/schemas/WorkflowLayout
   */
  layout?: WorkflowLayout;
  /**
   * The properties for this status layout.
   */
  properties: unknown;
  /**
   * A unique ID which the status will use to refer to this layout configuration.
   */
  statusReference: string;
}
/** MODEL StatusMapping */
export interface StatusMapping {
  /**
   * The ID of the issue type.
   */
  issueTypeId: string;
  /**
   * The ID of the new status.
   */
  newStatusId: string;
  /**
   * The ID of the status.
   */
  statusId: string;
}
/** MODEL StatusMappingDTO */
export interface StatusMappingDTO {
  /**
   * The issue type for the status mapping.
   */
  issueTypeId: string;
  /**
   * The project for the status mapping.
   */
  projectId: string;
  /**
   * The list of old and new status ID mappings for the specified project and issue type.
   */
  statusMigrations: Array<StatusMigration>;
}
/** MODEL StatusMetadata */
export interface StatusMetadata {
  /**
   * The category of the status.
   */
  category?: string;
  /**
   * The ID of the status.
   */
  id?: string;
  /**
   * The name of the status.
   */
  name?: string;
}
/** MODEL StatusMigration */
export interface StatusMigration {
  /**
   * The new status ID.
   */
  newStatusReference: string;
  /**
   * The old status ID.
   */
  oldStatusReference: string;
}
/** MODEL StatusReferenceAndPort */
export interface StatusReferenceAndPort {
  /**
   * The port this transition uses to connect to this status.
   * @format: "int32"
   */
  port?: number;
  /**
   * The reference of this status.
   */
  statusReference: string;
}
/** MODEL StatusScope */
export interface StatusScope {
  /**
   * Ref: #/components/schemas/ProjectId
   */
  project?: ProjectId;
  /**
   * The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
   */
  type: string;
}
/** MODEL StatusUpdate */
export interface StatusUpdate {
  /**
   * The description of the status.
   */
  description?: string;
  /**
   * The ID of the status.
   */
  id: string;
  /**
   * The name of the status.
   */
  name: string;
  /**
   * The category of the status.
   */
  statusCategory: string;
}
/** MODEL StatusUpdateRequest */
export interface StatusUpdateRequest {
  /**
   * The list of statuses that will be updated.
   */
  statuses: Array<StatusUpdate>;
}
/** MODEL StatusesPerWorkflow */
export interface StatusesPerWorkflow {
  /**
   * The ID of the initial status for the workflow.
   */
  initialStatusId?: string;
  /**
   * The status IDs associated with the workflow.
   */
  statuses?: string[];
  /**
   * The ID of the workflow.
   */
  workflowId?: string;
}
/** MODEL StreamingResponseBody */
// deno-lint-ignore no-empty-interface
export interface StreamingResponseBody {
}
/** MODEL StringList */
// deno-lint-ignore no-empty-interface
export interface StringList {
}
/** MODEL SubmittedBulkOperation */
export interface SubmittedBulkOperation {
  taskId?: string;
}
/** MODEL SuggestedIssue */
export interface SuggestedIssue {
  /**
   * The ID of the issue.
   * @format: "int64"
   */
  id?: number;
  /**
   * The URL of the issue type's avatar.
   */
  img?: string;
  /**
   * The key of the issue.
   */
  key?: string;
  /**
   * The key of the issue in HTML format.
   */
  keyHtml?: string;
  /**
   * The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.
   */
  summary?: string;
  /**
   * The phrase containing the query string, as plain text.
   */
  summaryText?: string;
}
/** MODEL SuggestedMappingsForPrioritiesRequestBean */
export interface SuggestedMappingsForPrioritiesRequestBean {
  /**
   * The ids of priorities being removed from the scheme.
   */
  add?: string[];
  /**
   * The ids of priorities being removed from the scheme.
   */
  remove?: string[];
}
/** MODEL SuggestedMappingsForProjectsRequestBean */
export interface SuggestedMappingsForProjectsRequestBean {
  /**
   * The ids of projects being added to the scheme.
   */
  add?: string[];
}
/** MODEL SuggestedMappingsRequestBean */
export interface SuggestedMappingsRequestBean {
  /**
   * The maximum number of results that could be on the page.
   * @format: "int32"
   */
  maxResults?: number;
  /**
   * The priority changes in the scheme.
   */
  priorities?: SuggestedMappingsForPrioritiesRequestBean;
  /**
   * The project changes in the scheme.
   */
  projects?: SuggestedMappingsForProjectsRequestBean;
  /**
   * The id of the priority scheme.
   * @format: "int64"
   */
  schemeId?: number;
  /**
   * The index of the first item returned on the page.
   * @format: "int64"
   */
  startAt?: number;
}
/** MODEL SystemAvatars */
export interface SystemAvatars {
  /**
   * A list of avatar details.
   */
  system?: Array<Avatar>;
}
/** MODEL TaskProgressBeanJsonNode */
export interface TaskProgressBeanJsonNode {
  /**
   * The description of the task.
   */
  description?: string;
  /**
   * The execution time of the task, in milliseconds.
   * @format: "int64"
   */
  elapsedRuntime: number;
  /**
   * A timestamp recording when the task was finished.
   * @format: "int64"
   */
  finished?: number;
  /**
   * The ID of the task.
   */
  id: string;
  /**
   * A timestamp recording when the task progress was last updated.
   * @format: "int64"
   */
  lastUpdate: number;
  /**
   * Information about the progress of the task.
   */
  message?: string;
  /**
   * The progress of the task, as a percentage complete.
   * @format: "int64"
   */
  progress: number;
  /**
   * The result of the task execution.
   */
  result?: JsonNode;
  /**
   * The URL of the task.
   * @format: "uri"
   */
  self: string;
  /**
   * A timestamp recording when the task was started.
   * @format: "int64"
   */
  started?: number;
  /**
   * The status of the task.
   */
  status: string;
  /**
   * A timestamp recording when the task was submitted.
   * @format: "int64"
   */
  submitted: number;
  /**
   * The ID of the user who submitted the task.
   * @format: "int64"
   */
  submittedBy: number;
}
/** MODEL TaskProgressBeanObject */
export interface TaskProgressBeanObject {
  /**
   * The description of the task.
   */
  description?: string;
  /**
   * The execution time of the task, in milliseconds.
   * @format: "int64"
   */
  elapsedRuntime: number;
  /**
   * A timestamp recording when the task was finished.
   * @format: "int64"
   */
  finished?: number;
  /**
   * The ID of the task.
   */
  id: string;
  /**
   * A timestamp recording when the task progress was last updated.
   * @format: "int64"
   */
  lastUpdate: number;
  /**
   * Information about the progress of the task.
   */
  message?: string;
  /**
   * The progress of the task, as a percentage complete.
   * @format: "int64"
   */
  progress: number;
  /**
   * The result of the task execution.
   */
  result?: string;
  /**
   * The URL of the task.
   * @format: "uri"
   */
  self: string;
  /**
   * A timestamp recording when the task was started.
   * @format: "int64"
   */
  started?: number;
  /**
   * The status of the task.
   */
  status: string;
  /**
   * A timestamp recording when the task was submitted.
   * @format: "int64"
   */
  submitted: number;
  /**
   * The ID of the user who submitted the task.
   * @format: "int64"
   */
  submittedBy: number;
}
/** MODEL TaskProgressBeanRemoveOptionFromIssuesResult */
export interface TaskProgressBeanRemoveOptionFromIssuesResult {
  /**
   * The description of the task.
   */
  description?: string;
  /**
   * The execution time of the task, in milliseconds.
   * @format: "int64"
   */
  elapsedRuntime: number;
  /**
   * A timestamp recording when the task was finished.
   * @format: "int64"
   */
  finished?: number;
  /**
   * The ID of the task.
   */
  id: string;
  /**
   * A timestamp recording when the task progress was last updated.
   * @format: "int64"
   */
  lastUpdate: number;
  /**
   * Information about the progress of the task.
   */
  message?: string;
  /**
   * The progress of the task, as a percentage complete.
   * @format: "int64"
   */
  progress: number;
  /**
   * The result of the task execution.
   */
  result?: RemoveOptionFromIssuesResult;
  /**
   * The URL of the task.
   * @format: "uri"
   */
  self: string;
  /**
   * A timestamp recording when the task was started.
   * @format: "int64"
   */
  started?: number;
  /**
   * The status of the task.
   */
  status: string;
  /**
   * A timestamp recording when the task was submitted.
   * @format: "int64"
   */
  submitted: number;
  /**
   * The ID of the user who submitted the task.
   * @format: "int64"
   */
  submittedBy: number;
}
/** MODEL TimeTrackingConfiguration */
export interface TimeTrackingConfiguration {
  /**
   * The default unit of time applied to logged time.
   */
  defaultUnit: string;
  /**
   * The format that will appear on an issue's *Time Spent* field.
   */
  timeFormat: string;
  /**
   * The number of days in a working week.
   * @format: "double"
   */
  workingDaysPerWeek: number;
  /**
   * The number of hours in a working day.
   * @format: "double"
   */
  workingHoursPerDay: number;
}
/** MODEL TimeTrackingDetails */
export interface TimeTrackingDetails {
  /**
   * The original estimate of time needed for this issue in readable format.
   */
  originalEstimate?: string;
  /**
   * The original estimate of time needed for this issue in seconds.
   * @format: "int64"
   */
  originalEstimateSeconds?: number;
  /**
   * The remaining estimate of time needed for this issue in readable format.
   */
  remainingEstimate?: string;
  /**
   * The remaining estimate of time needed for this issue in seconds.
   * @format: "int64"
   */
  remainingEstimateSeconds?: number;
  /**
   * Time worked on this issue in readable format.
   */
  timeSpent?: string;
  /**
   * Time worked on this issue in seconds.
   * @format: "int64"
   */
  timeSpentSeconds?: number;
}
/** MODEL TimeTrackingProvider */
export interface TimeTrackingProvider {
  /**
   * The key for the time tracking provider. For example, *JIRA*.
   */
  key: string;
  /**
   * The name of the time tracking provider. For example, *JIRA provided time tracking*.
   */
  name?: string;
  /**
   * The URL of the configuration page for the time tracking provider app. For example, * /example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app.
   */
  url?: string;
}
/** MODEL Transition */
export interface Transition {
  /**
   * The description of the transition.
   */
  description: string;
  /**
   * The statuses the transition can start from.
   */
  from: string[];
  /**
   * The ID of the transition.
   */
  id: string;
  /**
   * The name of the transition.
   */
  name: string;
  /**
   * The properties of the transition.
   */
  properties?: unknown;
  /**
   * Ref: #/components/schemas/WorkflowRules
   */
  rules?: WorkflowRules;
  /**
   * Ref: #/components/schemas/TransitionScreenDetails
   */
  screen?: TransitionScreenDetails;
  /**
   * The status the transition goes to.
   */
  to: string;
  /**
   * The type of the transition.
   */
  type: string;
}
/** MODEL TransitionScreenDetails */
export interface TransitionScreenDetails {
  /**
   * The ID of the screen.
   */
  id: string;
  /**
   * The name of the screen.
   */
  name?: string;
}
/** MODEL TransitionUpdateDTO */
export interface TransitionUpdateDTO {
  /**
   * The post-functions of the transition.
   */
  actions?: Array<WorkflowRuleConfiguration>;
  /**
   * Ref: #/components/schemas/ConditionGroupUpdate
   */
  conditions?: ConditionGroupUpdate;
  /**
   * The custom event ID of the transition.
   */
  customIssueEventId?: string;
  /**
   * The description of the transition.
   */
  description?: string;
  /**
   * The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
   */
  from?: Array<StatusReferenceAndPort>;
  /**
   * The ID of the transition.
   */
  id: string;
  /**
   * The statuses the transition can start from, and the mapping of ports between the statuses.
   */
  links?: Array<WorkflowTransitionLinks>;
  /**
   * The name of the transition.
   */
  name: string;
  /**
   * The properties of the transition.
   */
  properties?: unknown;
  /**
   * Ref: #/components/schemas/StatusReferenceAndPort
   */
  to?: StatusReferenceAndPort;
  /**
   * The status the transition goes to.
   */
  toStatusReference?: string;
  /**
   * Ref: #/components/schemas/WorkflowRuleConfiguration
   */
  transitionScreen?: WorkflowRuleConfiguration;
  /**
   * The triggers of the transition.
   */
  triggers?: Array<WorkflowTrigger>;
  /**
   * The transition type.
   */
  type: string;
  /**
   * The validators of the transition.
   */
  validators?: Array<WorkflowRuleConfiguration>;
}
/** MODEL Transitions */
export interface Transitions {
  /**
   * Expand options that include additional transitions details in the response.
   */
  expand?: string;
  /**
   * List of issue transitions.
   */
  transitions?: Array<IssueTransition>;
}
/** MODEL UiModificationContextDetails */
export interface UiModificationContextDetails {
  /**
   * The ID of the UI modification context.
   */
  id?: string;
  /**
   * Whether a context is available. For example, when a project is deleted the context becomes unavailable.
   */
  isAvailable?: boolean;
  /**
   * The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.
   */
  issueTypeId?: string;
  /**
   * The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.
   */
  projectId?: string;
  /**
   * The view type of the context. Only `GIC`(Global Issue Create) and `IssueView` are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
   */
  viewType?: string;
}
/** MODEL UiModificationDetails */
export interface UiModificationDetails {
  /**
   * List of contexts of the UI modification. The maximum number of contexts is 1000.
   */
  contexts?: Array<UiModificationContextDetails>;
  /**
   * The data of the UI modification. The maximum size of the data is 50000 characters.
   */
  data?: string;
  /**
   * The description of the UI modification. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The ID of the UI modification.
   */
  id: string;
  /**
   * The name of the UI modification. The maximum length is 255 characters.
   */
  name: string;
  /**
   * The URL of the UI modification.
   */
  self: string;
}
/** MODEL UiModificationIdentifiers */
export interface UiModificationIdentifiers {
  /**
   * The ID of the UI modification.
   */
  id: string;
  /**
   * The URL of the UI modification.
   */
  self: string;
}
/** MODEL UnrestrictedUserEmail */
export interface UnrestrictedUserEmail {
  /**
   * The accountId of the user
   */
  accountId?: string;
  /**
   * The email of the user
   */
  email?: string;
}
/** MODEL UpdateCustomFieldDetails */
export interface UpdateCustomFieldDetails {
  /**
   * The description of the custom field. The maximum length is 40000 characters.
   */
  description?: string;
  /**
   * The name of the custom field. It doesn't have to be unique. The maximum length is 255 characters.
   */
  name?: string;
  /**
   * The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):
   * 
   *  *  `cascadingselect`: `cascadingselectsearcher`
   *  *  `datepicker`: `daterange`
   *  *  `datetime`: `datetimerange`
   *  *  `float`: `exactnumber` or `numberrange`
   *  *  `grouppicker`: `grouppickersearcher`
   *  *  `importid`: `exactnumber` or `numberrange`
   *  *  `labels`: `labelsearcher`
   *  *  `multicheckboxes`: `multiselectsearcher`
   *  *  `multigrouppicker`: `multiselectsearcher`
   *  *  `multiselect`: `multiselectsearcher`
   *  *  `multiuserpicker`: `userpickergroupsearcher`
   *  *  `multiversion`: `versionsearcher`
   *  *  `project`: `projectsearcher`
   *  *  `radiobuttons`: `multiselectsearcher`
   *  *  `readonlyfield`: `textsearcher`
   *  *  `select`: `multiselectsearcher`
   *  *  `textarea`: `textsearcher`
   *  *  `textfield`: `textsearcher`
   *  *  `url`: `exacttextsearcher`
   *  *  `userpicker`: `userpickergroupsearcher`
   *  *  `version`: `versionsearcher`
   */
  searcherKey?: string;
}
/** MODEL UpdateDefaultProjectClassificationBean */
export interface UpdateDefaultProjectClassificationBean {
  /**
   * The ID of the project classification.
   */
  id: string;
}
/** MODEL UpdateDefaultScreenScheme */
export interface UpdateDefaultScreenScheme {
  /**
   * The ID of the screen scheme.
   */
  screenSchemeId: string;
}
/** MODEL UpdateFieldConfigurationSchemeDetails */
export interface UpdateFieldConfigurationSchemeDetails {
  /**
   * The description of the field configuration scheme.
   */
  description?: string;
  /**
   * The name of the field configuration scheme. The name must be unique.
   */
  name: string;
}
/** MODEL UpdateIssueSecurityLevelDetails */
export interface UpdateIssueSecurityLevelDetails {
  /**
   * The description of the issue security scheme level.
   */
  description?: string;
  /**
   * The name of the issue security scheme level. Must be unique.
   */
  name?: string;
}
/** MODEL UpdateIssueSecuritySchemeRequestBean */
export interface UpdateIssueSecuritySchemeRequestBean {
  /**
   * The description of the security scheme scheme.
   */
  description?: string;
  /**
   * The name of the security scheme scheme. Must be unique.
   */
  name?: string;
}
/** MODEL UpdateNotificationSchemeDetails */
export interface UpdateNotificationSchemeDetails {
  /**
   * The description of the notification scheme.
   */
  description?: string;
  /**
   * The name of the notification scheme. Must be unique.
   */
  name?: string;
}
/** MODEL UpdatePrioritiesInSchemeRequestBean */
export interface UpdatePrioritiesInSchemeRequestBean {
  /**
   * Priorities to add to a scheme
   */
  add?: PrioritySchemeChangesWithoutMappings;
  /**
   * Priorities to remove from a scheme
   */
  remove?: PrioritySchemeChangesWithMappings;
}
/** MODEL UpdatePriorityDetails */
export interface UpdatePriorityDetails {
  /**
   * The description of the priority.
   */
  description?: string;
  /**
   * The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
   */
  iconUrl?: string;
  /**
   * The name of the priority. Must be unique.
   */
  name?: string;
  /**
   * The status color of the priority in 3-digit or 6-digit hexadecimal format.
   */
  statusColor?: string;
}
/** MODEL UpdatePrioritySchemeRequestBean */
export interface UpdatePrioritySchemeRequestBean {
  /**
   * The default priority of the scheme.
   * @format: "int64"
   */
  defaultPriorityId?: number;
  /**
   * The description of the priority scheme.
   */
  description?: string;
  /**
   * Instructions to migrate issues.
   */
  mappings?: PriorityMapping;
  /**
   * The name of the priority scheme. Must be unique.
   */
  name?: string;
  /**
   * The priorities in the scheme.
   */
  priorities?: UpdatePrioritiesInSchemeRequestBean;
  /**
   * The projects in the scheme.
   */
  projects?: UpdateProjectsInSchemeRequestBean;
}
/** MODEL UpdatePrioritySchemeResponseBean */
export interface UpdatePrioritySchemeResponseBean {
  /**
   * Ref: #/components/schemas/PrioritySchemeWithPaginatedPrioritiesAndProjects
   */
  priorityScheme?: PrioritySchemeWithPaginatedPrioritiesAndProjects;
  /**
   * The in-progress issue migration task.
   */
  task?: TaskProgressBeanJsonNode;
}
/** MODEL UpdateProjectDetails */
export interface UpdateProjectDetails {
  /**
   * The default assignee when creating issues for this project.
   */
  assigneeType?: string;
  /**
   * An integer value for the project's avatar.
   * @format: "int64"
   */
  avatarId?: number;
  /**
   * The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
   * @format: "int64"
   */
  categoryId?: number;
  /**
   * A brief description of the project.
   */
  description?: string;
  /**
   * The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
   * @format: "int64"
   */
  issueSecurityScheme?: number;
  /**
   * Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
   */
  key?: string;
  /**
   * This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.
   */
  lead?: string;
  /**
   * The account ID of the project lead. Cannot be provided with `lead`.
   */
  leadAccountId?: string;
  /**
   * The name of the project.
   */
  name?: string;
  /**
   * The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
   * @format: "int64"
   */
  notificationScheme?: number;
  /**
   * The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
   * @format: "int64"
   */
  permissionScheme?: number;
  /**
   * A link to information about this project, such as project documentation
   */
  url?: string;
}
/** MODEL UpdateProjectsInSchemeRequestBean */
export interface UpdateProjectsInSchemeRequestBean {
  /**
   * Projects to add to a scheme
   */
  add?: PrioritySchemeChangesWithoutMappings;
  /**
   * Projects to remove from a scheme
   */
  remove?: PrioritySchemeChangesWithoutMappings;
}
/** MODEL UpdateResolutionDetails */
export interface UpdateResolutionDetails {
  /**
   * The description of the resolution.
   */
  description?: string;
  /**
   * The name of the resolution. Must be unique.
   */
  name: string;
}
/** MODEL UpdateScreenDetails */
export interface UpdateScreenDetails {
  /**
   * The description of the screen. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The name of the screen. The name must be unique. The maximum length is 255 characters.
   */
  name?: string;
}
/** MODEL UpdateScreenSchemeDetails */
export interface UpdateScreenSchemeDetails {
  /**
   * The description of the screen scheme. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
   */
  name?: string;
  /**
   * The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
   */
  screens?: UpdateScreenTypes;
}
/** MODEL UpdateScreenTypes */
export interface UpdateScreenTypes {
  /**
   * The ID of the create screen. To remove the screen association, pass a null.
   */
  create?: string;
  /**
   * The ID of the default screen. When specified, must include a screen ID as a default screen is required.
   */
  default?: string;
  /**
   * The ID of the edit screen. To remove the screen association, pass a null.
   */
  edit?: string;
  /**
   * The ID of the view screen. To remove the screen association, pass a null.
   */
  view?: string;
}
/** MODEL UpdateUiModificationDetails */
export interface UpdateUiModificationDetails {
  /**
   * List of contexts of the UI modification. The maximum number of contexts is 1000. If provided, replaces all existing contexts.
   */
  contexts?: Array<UiModificationContextDetails>;
  /**
   * The data of the UI modification. The maximum size of the data is 50000 characters.
   */
  data?: string;
  /**
   * The description of the UI modification. The maximum length is 255 characters.
   */
  description?: string;
  /**
   * The name of the UI modification. The maximum length is 255 characters.
   */
  name?: string;
}
/** MODEL UpdateUserToGroupBean */
export interface UpdateUserToGroupBean {
  /**
   * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
   */
  accountId?: string;
  /**
   * This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  name?: string;
}
/** MODEL UpdatedProjectCategory */
export interface UpdatedProjectCategory {
  /**
   * The name of the project category.
   */
  description?: string;
  /**
   * The ID of the project category.
   */
  id?: string;
  /**
   * The description of the project category.
   */
  name?: string;
  /**
   * The URL of the project category.
   */
  self?: string;
}
/** MODEL User */
export interface User {
  /**
   * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
   */
  accountId?: string;
  /**
   * The user account type. Can take the following values:
   * 
   *  *  `atlassian` regular Atlassian user account
   *  *  `app` system account used for Connect applications and OAuth to represent external systems
   *  *  `customer` Jira Service Desk account representing an external service desk
   */
  accountType?: string;
  /**
   * Whether the user is active.
   */
  active?: boolean;
  /**
   * The application roles the user is assigned to.
   */
  applicationRoles?: SimpleListWrapperApplicationRole;
  /**
   * The avatars of the user.
   */
  avatarUrls?: AvatarUrlsBean;
  /**
   * The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
   */
  displayName?: string;
  /**
   * The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
   */
  emailAddress?: string;
  /**
   * Expand options that include additional user details in the response.
   */
  expand?: string;
  /**
   * The groups that the user belongs to.
   */
  groups?: SimpleListWrapperGroupName;
  /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  key?: string;
  /**
   * The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
   */
  locale?: string;
  /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  name?: string;
  /**
   * The URL of the user.
   * @format: "uri"
   */
  self?: string;
  /**
   * The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.
   */
  timeZone?: string;
}
/** MODEL UserBean */
export interface UserBean {
  /**
   * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
   */
  accountId?: string;
  /**
   * Whether the user is active.
   */
  active?: boolean;
  /**
   * The avatars of the user.
   */
  avatarUrls?: UserBeanAvatarUrls;
  /**
   * The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
   */
  displayName?: string;
  /**
   * This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
   * The key of the user.
   */
  key?: string;
  /**
   * This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
   * The username of the user.
   */
  name?: string;
  /**
   * The URL of the user.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL UserBeanAvatarUrls */
export interface UserBeanAvatarUrls {
  /**
   * The URL of the user's 16x16 pixel avatar.
   * @format: "uri"
   */
  "16x16"?: string;
  /**
   * The URL of the user's 24x24 pixel avatar.
   * @format: "uri"
   */
  "24x24"?: string;
  /**
   * The URL of the user's 32x32 pixel avatar.
   * @format: "uri"
   */
  "32x32"?: string;
  /**
   * The URL of the user's 48x48 pixel avatar.
   * @format: "uri"
   */
  "48x48"?: string;
}
/** MODEL UserColumnRequestBody */
export interface UserColumnRequestBody {
  columns?: string[];
}
/** MODEL UserContextVariable */
export interface UserContextVariable {
  /**
   * The account ID of the user.
   */
  accountId: string;
  /**
   * Type of custom context variable.
   */
  type: string;
}
/** MODEL UserDetails */
export interface UserDetails {
  /**
   * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
   */
  accountId?: string;
  /**
   * The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)
   */
  accountType?: string;
  /**
   * Whether the user is active.
   */
  active?: boolean;
  /**
   * The avatars of the user.
   */
  avatarUrls?: AvatarUrlsBean;
  /**
   * The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.
   */
  displayName?: string;
  /**
   * The email address of the user. Depending on the user’s privacy settings, this may be returned as null.
   */
  emailAddress?: string;
  /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  key?: string;
  /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  name?: string;
  /**
   * The URL of the user.
   */
  self?: string;
  /**
   * The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.
   */
  timeZone?: string;
}
/** MODEL UserFilter */
export interface UserFilter {
  /**
   * Whether the filter is enabled.
   */
  enabled: boolean;
  /**
   * User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.
   */
  groups?: string[];
  /**
   * Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.
   */
  roleIds?: string[];
}
/** MODEL UserKey */
export interface UserKey {
  /**
   * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
   */
  accountId?: string;
  /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  key?: string;
}
/** MODEL UserList */
export interface UserList {
  /**
   * The index of the last item returned on the page.
   * @format: "int32"
   */
  "end-index"?: number;
  /**
   * The list of items.
   */
  items?: Array<User>;
  /**
   * The maximum number of results that could be on the page.
   * @format: "int32"
   */
  "max-results"?: number;
  /**
   * The number of items on the page.
   * @format: "int32"
   */
  size?: number;
  /**
   * The index of the first item returned on the page.
   * @format: "int32"
   */
  "start-index"?: number;
}
/** MODEL UserMigrationBean */
export interface UserMigrationBean {
  accountId?: string;
  key?: string;
  username?: string;
}
/** MODEL UserPermission */
export interface UserPermission {
  /**
   * Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`
   */
  deprecatedKey?: boolean;
  /**
   * The description of the permission.
   */
  description?: string;
  /**
   * Whether the permission is available to the user in the queried context.
   */
  havePermission?: boolean;
  /**
   * The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
   */
  id?: string;
  /**
   * The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
   */
  key?: string;
  /**
   * The name of the permission.
   */
  name?: string;
  /**
   * The type of the permission.
   */
  type?: string;
}
/** MODEL UserPickerUser */
export interface UserPickerUser {
  /**
   * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
   */
  accountId?: string;
  /**
   * The avatar URL of the user.
   * @format: "uri"
   */
  avatarUrl?: string;
  /**
   * The display name of the user. Depending on the user’s privacy setting, this may be returned as null.
   */
  displayName?: string;
  /**
   * The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.
   */
  html?: string;
  /**
   * This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  key?: string;
  /**
   * This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   */
  name?: string;
}
/** MODEL ValidationOptionsForCreate */
export interface ValidationOptionsForCreate {
  levels?: string[];
}
/** MODEL ValidationOptionsForUpdate */
export interface ValidationOptionsForUpdate {
  levels?: string[];
}
/** MODEL ValueOperand */
export interface ValueOperand {
  /**
   * Encoded value, which can be used directly in a JQL query.
   */
  encodedValue?: string;
  /**
   * The operand value.
   */
  value: string;
}
/** MODEL Version */
export interface Version {
  /**
   * If the expand option `approvers` is used, returns a list containing the approvers for this version.
   */
  approvers?: Array<VersionApprover>;
  /**
   * Indicates that the version is archived. Optional when creating or updating a version.
   */
  archived?: boolean;
  /**
   * The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
   */
  description?: string;
  /**
   * If the expand option `driver` is used, returns the Atlassian account ID of the driver.
   */
  driver?: string;
  /**
   * Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
   * 
   *  *  `operations` Returns the list of operations available for this version.
   *  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
   *  *  `driver` Returns the Atlassian account ID of the version driver.
   *  *  `approvers` Returns a list containing approvers for this version.
   * 
   * Optional for create and update.
   */
  expand?: string;
  /**
   * The ID of the version.
   */
  id?: string;
  /**
   * If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
   */
  issuesStatusForFixVersion?: VersionIssuesStatus;
  /**
   * The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
   * @format: "uri"
   */
  moveUnfixedIssuesTo?: string;
  /**
   * The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
   */
  name?: string;
  /**
   * If the expand option `operations` is used, returns the list of operations available for this version.
   */
  operations?: Array<SimpleLink>;
  /**
   * Indicates that the version is overdue.
   */
  overdue?: boolean;
  /**
   * Deprecated. Use `projectId`.
   */
  project?: string;
  /**
   * The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
   * @format: "int64"
   */
  projectId?: number;
  /**
   * The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
   * @format: "date"
   */
  releaseDate?: string;
  /**
   * Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
   */
  released?: boolean;
  /**
   * The URL of the version.
   * @format: "uri"
   */
  self?: string;
  /**
   * The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
   * @format: "date"
   */
  startDate?: string;
  /**
   * The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
   */
  userReleaseDate?: string;
  /**
   * The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
   */
  userStartDate?: string;
}
/** MODEL VersionApprover */
export interface VersionApprover {
  /**
   * The Atlassian account ID of the approver.
   */
  accountId?: string;
  /**
   * A description of why the user is declining the approval.
   */
  declineReason?: string;
  /**
   * A description of what the user is approving within the specified version.
   */
  description?: string;
  /**
   * The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED*
   */
  status?: string;
}
/** MODEL VersionIssueCounts */
export interface VersionIssueCounts {
  /**
   * List of custom fields using the version.
   */
  customFieldUsage?: Array<VersionUsageInCustomField>;
  /**
   * Count of issues where a version custom field is set to the version.
   * @format: "int64"
   */
  issueCountWithCustomFieldsShowingVersion?: number;
  /**
   * Count of issues where the `affectedVersion` is set to the version.
   * @format: "int64"
   */
  issuesAffectedCount?: number;
  /**
   * Count of issues where the `fixVersion` is set to the version.
   * @format: "int64"
   */
  issuesFixedCount?: number;
  /**
   * The URL of these count details.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL VersionIssuesStatus */
export interface VersionIssuesStatus {
  /**
   * Count of issues with status *done*.
   * @format: "int64"
   */
  done?: number;
  /**
   * Count of issues with status *in progress*.
   * @format: "int64"
   */
  inProgress?: number;
  /**
   * Count of issues with status *to do*.
   * @format: "int64"
   */
  toDo?: number;
  /**
   * Count of issues with a status other than *to do*, *in progress*, and *done*.
   * @format: "int64"
   */
  unmapped?: number;
}
/** MODEL VersionMoveBean */
export interface VersionMoveBean {
  /**
   * The URL (self link) of the version after which to place the moved version. Cannot be used with `position`.
   * @format: "uri"
   */
  after?: string;
  /**
   * An absolute position in which to place the moved version. Cannot be used with `after`.
   */
  position?: string;
}
/** MODEL VersionRelatedWork */
export interface VersionRelatedWork {
  /**
   * The category of the related work
   */
  category: string;
  /**
   * The ID of the issue associated with the related work (if there is one). Cannot be updated via the Rest API.
   * @format: "int64"
   */
  issueId?: number;
  /**
   * The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it.
   */
  relatedWorkId?: string;
  /**
   * The title of the related work
   */
  title?: string;
  /**
   * The URL of the related work. Will be null for the native release note related work item, but is otherwise required.
   * @format: "uri"
   */
  url?: string;
}
/** MODEL VersionUnresolvedIssuesCount */
export interface VersionUnresolvedIssuesCount {
  /**
   * Count of issues.
   * @format: "int64"
   */
  issuesCount?: number;
  /**
   * Count of unresolved issues.
   * @format: "int64"
   */
  issuesUnresolvedCount?: number;
  /**
   * The URL of these count details.
   * @format: "uri"
   */
  self?: string;
}
/** MODEL VersionUsageInCustomField */
export interface VersionUsageInCustomField {
  /**
   * The ID of the custom field.
   * @format: "int64"
   */
  customFieldId?: number;
  /**
   * The name of the custom field.
   */
  fieldName?: string;
  /**
   * Count of the issues where the custom field contains the version.
   * @format: "int64"
   */
  issueCountWithVersionInCustomField?: number;
}
/** MODEL Visibility */
export interface Visibility {
  /**
   * The ID of the group or the name of the role that visibility of this item is restricted to.
   */
  identifier?: string;
  /**
   * Whether visibility of this item is restricted to a group or role.
   */
  type?: string;
  /**
   * The name of the group or role that visibility of this item is restricted to. Please note that the name of a group is mutable, to reliably identify a group use `identifier`.
   */
  value?: string;
}
/** MODEL Votes */
export interface Votes {
  /**
   * Whether the user making this request has voted on the issue.
   */
  hasVoted?: boolean;
  /**
   * The URL of these issue vote details.
   * @format: "uri"
   */
  self?: string;
  /**
   * List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission.
   */
  voters?: Array<User>;
  /**
   * The number of votes on the issue.
   * @format: "int64"
   */
  votes?: number;
}
/** MODEL WarningCollection */
export interface WarningCollection {
  warnings?: string[];
}
/** MODEL Watchers */
export interface Watchers {
  /**
   * Whether the calling user is watching this issue.
   */
  isWatching?: boolean;
  /**
   * The URL of these issue watcher details.
   */
  self?: string;
  /**
   * The number of users watching this issue.
   * @format: "int32"
   */
  watchCount?: number;
  /**
   * Details of the users watching this issue.
   */
  watchers?: Array<UserDetails>;
}
/** MODEL Webhook */
export interface Webhook {
  /**
   * The Jira events that trigger the webhook.
   */
  events: string[];
  /**
   * The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
   * @format: "int64"
   */
  expirationDate?: number;
  /**
   * A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
   */
  fieldIdsFilter?: string[];
  /**
   * The ID of the webhook.
   * @format: "int64"
   */
  id: number;
  /**
   * A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
   */
  issuePropertyKeysFilter?: string[];
  /**
   * The JQL filter that specifies which issues the webhook is sent for.
   */
  jqlFilter: string;
}
/** MODEL WebhookDetails */
export interface WebhookDetails {
  /**
   * The Jira events that trigger the webhook.
   */
  events: string[];
  /**
   * A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
   */
  fieldIdsFilter?: string[];
  /**
   * A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
   */
  issuePropertyKeysFilter?: string[];
  /**
   * The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:
   * 
   *  *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.".
   *  *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
   */
  jqlFilter: string;
}
/** MODEL WebhookRegistrationDetails */
export interface WebhookRegistrationDetails {
  /**
   * The URL that specifies where to send the webhooks. This URL must use the same base URL as the Connect app. Only a single URL per app is allowed to be registered.
   */
  url: string;
  /**
   * A list of webhooks.
   */
  webhooks: Array<WebhookDetails>;
}
/** MODEL WebhooksExpirationDate */
export interface WebhooksExpirationDate {
  /**
   * The expiration date of all the refreshed webhooks.
   * @format: "int64"
   */
  expirationDate: number;
}
/** MODEL WorkManagementNavigationInfo */
export interface WorkManagementNavigationInfo {
  boardName?: string;
}
/** MODEL Workflow */
export interface Workflow {
  /**
   * The creation date of the workflow.
   * @format: "date-time"
   */
  created?: string;
  /**
   * The description of the workflow.
   */
  description: string;
  /**
   * Whether the workflow has a draft version.
   */
  hasDraftWorkflow?: boolean;
  /**
   * Ref: #/components/schemas/PublishedWorkflowId
   */
  id: PublishedWorkflowId;
  /**
   * Whether this is the default workflow.
   */
  isDefault?: boolean;
  /**
   * Ref: #/components/schemas/WorkflowOperations
   */
  operations?: WorkflowOperations;
  /**
   * The projects the workflow is assigned to, through workflow schemes.
   */
  projects?: Array<ProjectDetails>;
  /**
   * The workflow schemes the workflow is assigned to.
   */
  schemes?: Array<WorkflowSchemeIdName>;
  /**
   * The statuses of the workflow.
   */
  statuses?: Array<WorkflowStatus>;
  /**
   * The transitions of the workflow.
   */
  transitions?: Array<Transition>;
  /**
   * The last edited date of the workflow.
   * @format: "date-time"
   */
  updated?: string;
}
/** MODEL WorkflowAssociationStatusMapping */
export interface WorkflowAssociationStatusMapping {
  /**
   * The ID of the status in the new workflow.
   */
  newStatusId: string;
  /**
   * The ID of the status in the old workflow that isn't present in the new workflow.
   */
  oldStatusId: string;
}
/** MODEL WorkflowCapabilities */
export interface WorkflowCapabilities {
  /**
   * The Connect provided ecosystem rules available.
   */
  connectRules?: Array<AvailableWorkflowConnectRule>;
  /**
   * The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
   */
  editorScope?: string;
  /**
   * The Forge provided ecosystem rules available.
   */
  forgeRules?: Array<AvailableWorkflowForgeRule>;
  /**
   * The types of projects that this capability set is available for.
   */
  projectTypes?: string[];
  /**
   * The Atlassian provided system rules available.
   */
  systemRules?: Array<AvailableWorkflowSystemRule>;
  /**
   * The trigger rules available.
   */
  triggerRules?: Array<AvailableWorkflowTriggers>;
}
/** MODEL WorkflowCompoundCondition */
export interface WorkflowCompoundCondition {
  /**
   * The list of workflow conditions.
   */
  conditions: Array<WorkflowCondition>;
  nodeType: string;
  /**
   * The compound condition operator.
   */
  operator: string;
}
/** MODEL WorkflowCondition */
// deno-lint-ignore no-empty-interface
export interface WorkflowCondition {
}
/** MODEL WorkflowCreate */
export interface WorkflowCreate {
  /**
   * The description of the workflow to create.
   */
  description?: string;
  /**
   * The name of the workflow to create.
   */
  name: string;
  /**
   * Ref: #/components/schemas/WorkflowLayout
   */
  startPointLayout?: WorkflowLayout;
  /**
   * The statuses associated with this workflow.
   */
  statuses: Array<StatusLayoutUpdate>;
  /**
   * The transitions of this workflow.
   */
  transitions: Array<TransitionUpdateDTO>;
}
/** MODEL WorkflowCreateRequest */
export interface WorkflowCreateRequest {
  /**
   * Ref: #/components/schemas/WorkflowScope
   */
  scope: WorkflowScope;
  /**
   * The statuses to associate with the workflows.
   */
  statuses: Array<WorkflowStatusUpdate>;
  /**
   * The details of the workflows to create.
   */
  workflows: Array<WorkflowCreate>;
}
/** MODEL WorkflowCreateResponse */
export interface WorkflowCreateResponse {
  /**
   * List of created statuses.
   */
  statuses?: Array<JiraWorkflowStatus>;
  /**
   * List of created workflows.
   */
  workflows?: Array<JiraWorkflow>;
}
/** MODEL WorkflowCreateValidateRequest */
export interface WorkflowCreateValidateRequest {
  /**
   * Ref: #/components/schemas/WorkflowCreateRequest
   */
  payload: WorkflowCreateRequest;
  /**
   * Ref: #/components/schemas/ValidationOptionsForCreate
   */
  validationOptions?: ValidationOptionsForCreate;
}
/** MODEL WorkflowElementReference */
export interface WorkflowElementReference {
  /**
   * A property key.
   */
  propertyKey?: string;
  /**
   * A rule ID.
   */
  ruleId?: string;
  /**
   * Ref: #/components/schemas/ProjectAndIssueTypePair
   */
  statusMappingReference?: ProjectAndIssueTypePair;
  /**
   * A status reference.
   */
  statusReference?: string;
  /**
   * A transition ID.
   */
  transitionId?: string;
}
/** MODEL WorkflowIDs */
export interface WorkflowIDs {
  /**
   * The entity ID of the workflow.
   */
  entityId?: string;
  /**
   * The name of the workflow.
   */
  name: string;
}
/** MODEL WorkflowId */
export interface WorkflowId {
  /**
   * Whether the workflow is in the draft state.
   */
  draft: boolean;
  /**
   * The name of the workflow.
   */
  name: string;
}
/** MODEL WorkflowLayout */
export interface WorkflowLayout {
  /**
   * The x axis location.
   * @format: "double"
   */
  x?: number;
  /**
   * The y axis location.
   * @format: "double"
   */
  y?: number;
}
/** MODEL WorkflowMetadataAndIssueTypeRestModel */
export interface WorkflowMetadataAndIssueTypeRestModel {
  /**
   * The list of issue type IDs for the mapping.
   */
  issueTypeIds: string[];
  /**
   * Ref: #/components/schemas/WorkflowMetadataRestModel
   */
  workflow: WorkflowMetadataRestModel;
}
/** MODEL WorkflowMetadataRestModel */
export interface WorkflowMetadataRestModel {
  /**
   * The description of the workflow.
   */
  description: string;
  /**
   * The ID of the workflow.
   */
  id: string;
  /**
   * The name of the workflow.
   */
  name: string;
  /**
   * Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the workflows in the workflow scheme.
   */
  usage: Array<SimpleUsage>;
  /**
   * Ref: #/components/schemas/DocumentVersion
   */
  version: DocumentVersion;
}
/** MODEL WorkflowOperations */
export interface WorkflowOperations {
  /**
   * Whether the workflow can be deleted.
   */
  canDelete: boolean;
  /**
   * Whether the workflow can be updated.
   */
  canEdit: boolean;
}
/** MODEL WorkflowReadRequest */
export interface WorkflowReadRequest {
  /**
   * The list of projects and issue types to query.
   */
  projectAndIssueTypes?: Array<ProjectAndIssueTypePair>;
  /**
   * The list of workflow IDs to query.
   */
  workflowIds?: string[];
  /**
   * The list of workflow names to query.
   */
  workflowNames?: string[];
}
/** MODEL WorkflowReadResponse */
export interface WorkflowReadResponse {
  /**
   * List of statuses.
   */
  statuses?: Array<JiraWorkflowStatus>;
  /**
   * List of workflows.
   */
  workflows?: Array<JiraWorkflow>;
}
/** MODEL WorkflowReferenceStatus */
export interface WorkflowReferenceStatus {
  /**
   * Indicates if the status is deprecated.
   */
  deprecated?: boolean;
  /**
   * Ref: #/components/schemas/WorkflowStatusLayout
   */
  layout?: WorkflowStatusLayout;
  /**
   * The properties associated with the status.
   */
  properties?: unknown;
  /**
   * The reference of the status.
   */
  statusReference?: string;
}
/** MODEL WorkflowRuleConfiguration */
export interface WorkflowRuleConfiguration {
  /**
   * The ID of the rule.
   */
  id?: string;
  /**
   * The parameters related to the rule.
   */
  parameters?: unknown;
  /**
   * The rule key of the rule.
   */
  ruleKey: string;
}
/** MODEL WorkflowRules */
export interface WorkflowRules {
  /**
   * Ref: #/components/schemas/WorkflowCondition
   */
  conditionsTree?: WorkflowCondition;
  /**
   * The workflow post functions.
   */
  postFunctions?: Array<WorkflowTransitionRule>;
  /**
   * The workflow validators.
   */
  validators?: Array<WorkflowTransitionRule>;
}
/** MODEL WorkflowRulesSearch */
export interface WorkflowRulesSearch {
  /**
   * Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.
   * @example: "transition"
   */
  expand?: string;
  /**
   * The list of workflow rule IDs.
   */
  ruleIds: string[];
  /**
   * The workflow ID.
   * @example: "a498d711-685d-428d-8c3e-bc03bb450ea7"
   * @format: "uuid"
   */
  workflowEntityId: string;
}
/** MODEL WorkflowRulesSearchDetails */
export interface WorkflowRulesSearchDetails {
  /**
   * List of workflow rule IDs that do not belong to the workflow or can not be found.
   */
  invalidRules?: string[];
  /**
   * List of valid workflow transition rules.
   */
  validRules?: Array<WorkflowTransitionRules>;
  /**
   * The workflow ID.
   * @example: "a498d711-685d-428d-8c3e-bc03bb450ea7"
   * @format: "uuid"
   */
  workflowEntityId?: string;
}
/** MODEL WorkflowScheme */
export interface WorkflowScheme {
  /**
   * The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
   */
  defaultWorkflow?: string;
  /**
   * The description of the workflow scheme.
   */
  description?: string;
  /**
   * Whether the workflow scheme is a draft or not.
   */
  draft?: boolean;
  /**
   * The ID of the workflow scheme.
   * @format: "int64"
   */
  id?: number;
  /**
   * The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
   */
  issueTypeMappings?: unknown;
  /**
   * The issue types available in Jira.
   */
  issueTypes?: unknown;
  /**
   * The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
   */
  lastModified?: string;
  /**
   * The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
   */
  lastModifiedUser?: User;
  /**
   * The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
   */
  name?: string;
  /**
   * For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
   */
  originalDefaultWorkflow?: string;
  /**
   * For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
   */
  originalIssueTypeMappings?: unknown;
  /**
   * @format: "uri"
   */
  self?: string;
  /**
   * Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
   * 
   *  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
   *  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
   *  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.
   * 
   * Defaults to `false`.
   */
  updateDraftIfNeeded?: boolean;
}
/** MODEL WorkflowSchemeAssociation */
export interface WorkflowSchemeAssociation {
  /**
   * The issue types assigned to the workflow.
   */
  issueTypeIds: string[];
  /**
   * The ID of the workflow.
   */
  workflowId: string;
}
/** MODEL WorkflowSchemeAssociations */
export interface WorkflowSchemeAssociations {
  /**
   * The list of projects that use the workflow scheme.
   */
  projectIds: string[];
  /**
   * The workflow scheme.
   */
  workflowScheme: WorkflowScheme;
}
/** MODEL WorkflowSchemeIdName */
export interface WorkflowSchemeIdName {
  /**
   * The ID of the workflow scheme.
   */
  id: string;
  /**
   * The name of the workflow scheme.
   */
  name: string;
}
/** MODEL WorkflowSchemeProjectAssociation */
export interface WorkflowSchemeProjectAssociation {
  /**
   * The ID of the project.
   */
  projectId: string;
  /**
   * The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme.
   */
  workflowSchemeId?: string;
}
/** MODEL WorkflowSchemeReadRequest */
export interface WorkflowSchemeReadRequest {
  /**
   * The list of project IDs to query.
   */
  projectIds?: string[];
  /**
   * The list of workflow scheme IDs to query.
   */
  workflowSchemeIds?: string[];
}
/** MODEL WorkflowSchemeReadResponse */
export interface WorkflowSchemeReadResponse {
  /**
   * Ref: #/components/schemas/WorkflowMetadataRestModel
   */
  defaultWorkflow?: WorkflowMetadataRestModel;
  /**
   * The description of the workflow scheme.
   */
  description?: string;
  /**
   * The ID of the workflow scheme.
   */
  id: string;
  /**
   * The name of the workflow scheme.
   */
  name: string;
  /**
   * The IDs of projects using the workflow scheme.
   */
  projectIdsUsingScheme: string[];
  /**
   * Ref: #/components/schemas/WorkflowScope
   */
  scope: WorkflowScope;
  /**
   * Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme.
   */
  taskId?: string;
  /**
   * Ref: #/components/schemas/DocumentVersion
   */
  version: DocumentVersion;
  /**
   * Mappings from workflows to issue types.
   */
  workflowsForIssueTypes: Array<WorkflowMetadataAndIssueTypeRestModel>;
}
/** MODEL WorkflowSchemeUpdateRequest */
export interface WorkflowSchemeUpdateRequest {
  /**
   * The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*.
   */
  defaultWorkflowId?: string;
  /**
   * The new description for this workflow scheme.
   */
  description: string;
  /**
   * The ID of this workflow scheme.
   */
  id: string;
  /**
   * The new name for this workflow scheme.
   */
  name: string;
  /**
   * Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
   */
  statusMappingsByIssueTypeOverride?: Array<MappingsByIssueTypeOverride>;
  /**
   * The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
   */
  statusMappingsByWorkflows?: Array<MappingsByWorkflow>;
  /**
   * Ref: #/components/schemas/DocumentVersion
   */
  version: DocumentVersion;
  /**
   * Mappings from workflows to issue types.
   */
  workflowsForIssueTypes?: Array<WorkflowSchemeAssociation>;
}
/** MODEL WorkflowSchemeUpdateRequiredMappingsRequest */
export interface WorkflowSchemeUpdateRequiredMappingsRequest {
  /**
   * The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn't specified, is set to *Jira Workflow (jira)*.
   */
  defaultWorkflowId?: string;
  /**
   * The ID of the workflow scheme.
   */
  id: string;
  /**
   * The new workflow to issue type mappings for this workflow scheme.
   */
  workflowsForIssueTypes: Array<WorkflowSchemeAssociation>;
}
/** MODEL WorkflowSchemeUpdateRequiredMappingsResponse */
export interface WorkflowSchemeUpdateRequiredMappingsResponse {
  /**
   * The list of required status mappings by issue type.
   */
  statusMappingsByIssueTypes?: Array<RequiredMappingByIssueType>;
  /**
   * The list of required status mappings by workflow.
   */
  statusMappingsByWorkflows?: Array<RequiredMappingByWorkflows>;
  /**
   * The details of the statuses in the associated workflows.
   */
  statuses?: Array<StatusMetadata>;
  /**
   * The statuses associated with each workflow.
   */
  statusesPerWorkflow?: Array<StatusesPerWorkflow>;
}
/** MODEL WorkflowScope */
export interface WorkflowScope {
  /**
   * Ref: #/components/schemas/ProjectId
   */
  project?: ProjectId;
  /**
   * The scope of the workflow. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
   */
  type: string;
}
/** MODEL WorkflowSimpleCondition */
export interface WorkflowSimpleCondition {
  /**
   * EXPERIMENTAL. The configuration of the transition rule.
   */
  configuration?: unknown;
  nodeType: string;
  /**
   * The type of the transition rule.
   */
  type: string;
}
/** MODEL WorkflowStatus */
export interface WorkflowStatus {
  /**
   * The ID of the issue status.
   */
  id: string;
  /**
   * The name of the status in the workflow.
   */
  name: string;
  /**
   * Additional properties that modify the behavior of issues in this status. Supports the properties `jira.issue.editable` and `issueEditable` (deprecated) that indicate whether issues are editable.
   */
  properties?: unknown;
}
/** MODEL WorkflowStatusAndPort */
export interface WorkflowStatusAndPort {
  /**
   * The port the transition is connected to this status.
   * @format: "int32"
   */
  port?: number;
  /**
   * The reference of this status.
   */
  statusReference?: string;
}
/** MODEL WorkflowStatusLayout */
export interface WorkflowStatusLayout {
  /**
   * The x axis location.
   * @format: "double"
   */
  x?: number;
  /**
   * The y axis location.
   * @format: "double"
   */
  y?: number;
}
/** MODEL WorkflowStatusUpdate */
export interface WorkflowStatusUpdate {
  /**
   * The description of the status.
   */
  description?: string;
  /**
   * The ID of the status.
   */
  id?: string;
  /**
   * The name of the status.
   */
  name: string;
  /**
   * The category of the status.
   */
  statusCategory: string;
  /**
   * The reference of the status.
   */
  statusReference: string;
}
/** MODEL WorkflowTransition */
export interface WorkflowTransition {
  /**
   * The transition ID.
   * @format: "int32"
   */
  id: number;
  /**
   * The transition name.
   */
  name: string;
}
/** MODEL WorkflowTransitionLinks */
export interface WorkflowTransitionLinks {
  /**
   * The port that the transition starts from.
   * @format: "int32"
   */
  fromPort?: number;
  /**
   * The status that the transition starts from.
   */
  fromStatusReference?: string;
  /**
   * The port that the transition goes to.
   * @format: "int32"
   */
  toPort?: number;
}
/** MODEL WorkflowTransitionProperty */
export interface WorkflowTransitionProperty {
  /**
   * The ID of the transition property.
   */
  id?: string;
  /**
   * The key of the transition property. Also known as the name of the transition property.
   */
  key?: string;
  /**
   * The value of the transition property.
   */
  value: string;
}
/** MODEL WorkflowTransitionRule */
export interface WorkflowTransitionRule {
  /**
   * EXPERIMENTAL. The configuration of the transition rule.
   */
  configuration?: string;
  /**
   * The type of the transition rule.
   */
  type: string;
}
/** MODEL WorkflowTransitionRules */
export interface WorkflowTransitionRules {
  /**
   * The list of conditions within the workflow.
   */
  conditions?: Array<AppWorkflowTransitionRule>;
  /**
   * The list of post functions within the workflow.
   */
  postFunctions?: Array<AppWorkflowTransitionRule>;
  /**
   * The list of validators within the workflow.
   */
  validators?: Array<AppWorkflowTransitionRule>;
  /**
   * Ref: #/components/schemas/WorkflowId
   */
  workflowId: WorkflowId;
}
/** MODEL WorkflowTransitionRulesDetails */
export interface WorkflowTransitionRulesDetails {
  /**
   * Ref: #/components/schemas/WorkflowId
   */
  workflowId: WorkflowId;
  /**
   * The list of connect workflow rule IDs.
   */
  workflowRuleIds: string[];
}
/** MODEL WorkflowTransitionRulesUpdate */
export interface WorkflowTransitionRulesUpdate {
  /**
   * The list of workflows with transition rules to update.
   */
  workflows: Array<WorkflowTransitionRules>;
}
/** MODEL WorkflowTransitionRulesUpdateErrorDetails */
export interface WorkflowTransitionRulesUpdateErrorDetails {
  /**
   * A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
   */
  ruleUpdateErrors: unknown;
  /**
   * The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.
   */
  updateErrors: string[];
  /**
   * Ref: #/components/schemas/WorkflowId
   */
  workflowId: WorkflowId;
}
/** MODEL WorkflowTransitionRulesUpdateErrors */
export interface WorkflowTransitionRulesUpdateErrors {
  /**
   * A list of workflows.
   */
  updateResults: Array<WorkflowTransitionRulesUpdateErrorDetails>;
}
/** MODEL WorkflowTransitions */
export interface WorkflowTransitions {
  /**
   * The post-functions of the transition.
   */
  actions?: Array<WorkflowRuleConfiguration>;
  /**
   * Ref: #/components/schemas/ConditionGroupConfiguration
   */
  conditions?: ConditionGroupConfiguration;
  /**
   * The custom event ID of the transition.
   */
  customIssueEventId?: string;
  /**
   * The description of the transition.
   */
  description?: string;
  /**
   * The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
   */
  from?: Array<WorkflowStatusAndPort>;
  /**
   * The ID of the transition.
   */
  id?: string;
  /**
   * The statuses the transition can start from, and the mapping of ports between the statuses.
   */
  links?: Array<WorkflowTransitionLinks>;
  /**
   * The name of the transition.
   */
  name?: string;
  /**
   * The properties of the transition.
   */
  properties?: unknown;
  /**
   * Ref: #/components/schemas/WorkflowStatusAndPort
   */
  to?: WorkflowStatusAndPort;
  /**
   * The status the transition goes to.
   */
  toStatusReference?: string;
  /**
   * Ref: #/components/schemas/WorkflowRuleConfiguration
   */
  transitionScreen?: WorkflowRuleConfiguration;
  /**
   * The triggers of the transition.
   */
  triggers?: Array<WorkflowTrigger>;
  /**
   * The transition type.
   */
  type?: string;
  /**
   * The validators of the transition.
   */
  validators?: Array<WorkflowRuleConfiguration>;
}
/** MODEL WorkflowTrigger */
export interface WorkflowTrigger {
  /**
   * The ID of the trigger.
   */
  id?: string;
  /**
   * The parameters of the trigger.
   */
  parameters: unknown;
  /**
   * The rule key of the trigger.
   */
  ruleKey: string;
}
/** MODEL WorkflowUpdate */
export interface WorkflowUpdate {
  /**
   * The mapping of old to new status ID.
   */
  defaultStatusMappings?: Array<StatusMigration>;
  /**
   * The new description for this workflow.
   */
  description?: string;
  /**
   * The ID of this workflow.
   */
  id: string;
  /**
   * Ref: #/components/schemas/WorkflowLayout
   */
  startPointLayout?: WorkflowLayout;
  /**
   * The mapping of old to new status ID for a specific project and issue type.
   */
  statusMappings?: Array<StatusMappingDTO>;
  /**
   * The statuses associated with this workflow.
   */
  statuses: Array<StatusLayoutUpdate>;
  /**
   * The transitions of this workflow.
   */
  transitions: Array<TransitionUpdateDTO>;
  /**
   * Ref: #/components/schemas/DocumentVersion
   */
  version: DocumentVersion;
}
/** MODEL WorkflowUpdateRequest */
export interface WorkflowUpdateRequest {
  /**
   * The statuses to associate with the workflows.
   */
  statuses: Array<WorkflowStatusUpdate>;
  /**
   * The details of the workflows to update.
   */
  workflows: Array<WorkflowUpdate>;
}
/** MODEL WorkflowUpdateResponse */
export interface WorkflowUpdateResponse {
  /**
   * List of updated statuses.
   */
  statuses?: Array<JiraWorkflowStatus>;
  /**
   * If there is a [asynchronous task](#async-operations) operation, as a result of this update.
   */
  taskId?: string;
  /**
   * List of updated workflows.
   */
  workflows?: Array<JiraWorkflow>;
}
/** MODEL WorkflowUpdateValidateRequestBean */
export interface WorkflowUpdateValidateRequestBean {
  /**
   * Ref: #/components/schemas/WorkflowUpdateRequest
   */
  payload: WorkflowUpdateRequest;
  /**
   * Ref: #/components/schemas/ValidationOptionsForUpdate
   */
  validationOptions?: ValidationOptionsForUpdate;
}
/** MODEL WorkflowUsages */
export interface WorkflowUsages {
  /**
   * Workflow ID.
   */
  workflowId?: string;
  /**
   * Workflow name.
   */
  workflowName?: string;
}
/** MODEL WorkflowValidationError */
export interface WorkflowValidationError {
  /**
   * An error code.
   */
  code?: string;
  /**
   * Ref: #/components/schemas/WorkflowElementReference
   */
  elementReference?: WorkflowElementReference;
  /**
   * The validation error level.
   */
  level?: string;
  /**
   * An error message.
   */
  message?: string;
  /**
   * The type of element the error or warning references.
   */
  type?: string;
}
/** MODEL WorkflowValidationErrorList */
export interface WorkflowValidationErrorList {
  /**
   * The list of validation errors.
   */
  errors?: Array<WorkflowValidationError>;
}
/** MODEL WorkflowsWithTransitionRulesDetails */
export interface WorkflowsWithTransitionRulesDetails {
  /**
   * The list of workflows with transition rules to delete.
   */
  workflows: Array<WorkflowTransitionRulesDetails>;
}
/** MODEL Worklog */
export interface Worklog {
  /**
   * Details of the user who created the worklog.
   */
  author?: UserDetails;
  /**
   * A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog.
   */
  comment?: string;
  /**
   * The datetime on which the worklog was created.
   * @format: "date-time"
   */
  created?: string;
  /**
   * The ID of the worklog record.
   */
  id?: string;
  /**
   * The ID of the issue this worklog is for.
   */
  issueId?: string;
  /**
   * Details of properties for the worklog. Optional when creating or updating a worklog.
   */
  properties?: Array<EntityProperty>;
  /**
   * The URL of the worklog item.
   * @format: "uri"
   */
  self?: string;
  /**
   * The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
   * @format: "date-time"
   */
  started?: string;
  /**
   * The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
   */
  timeSpent?: string;
  /**
   * The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
   * @format: "int64"
   */
  timeSpentSeconds?: number;
  /**
   * Details of the user who last updated the worklog.
   */
  updateAuthor?: UserDetails;
  /**
   * The datetime on which the worklog was last updated.
   * @format: "date-time"
   */
  updated?: string;
  /**
   * Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
   */
  visibility?: Visibility;
}
/** MODEL WorklogIdsRequestBean */
export interface WorklogIdsRequestBean {
  /**
   * A list of worklog IDs.
   */
  ids: string[];
}
/** MODEL WorkspaceDataPolicy */
export interface WorkspaceDataPolicy {
  /**
   * Whether the workspace contains any content inaccessible to the requesting application.
   */
  anyContentBlocked?: boolean;
}
/** MODEL fields */
export interface fields {
  /**
   * If `true`, will try to retain original non-null issue field values on move.
   * default Value true
   */
  retain?: boolean;
  type?: string;
  value?: unknown;
}
/** MODEL targetMandatoryFields */
export interface targetMandatoryFields {
  /**
   * Contains the value of mandatory fields
   */
  fields: unknown;
}
/** MODEL targetStatus */
export interface targetStatus {
  /**
   * An object with the key as the ID of the target status and value with the list of the IDs of the current source statuses.
   */
  statuses: unknown;
}
/** MODEL targetToSourcesMapping */
export interface targetToSourcesMapping {
  /**
   * If `true`, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The `targetMandatoryFields` property shouldn't be defined.
   * 
   * If `false`, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the `targetMandatoryFields` property
   */
  inferFieldDefaults: boolean;
  /**
   * If `true`, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave `targetStatus` empty when using this.
   * 
   * If `false`, you must provide a `targetStatus` for each status not present in the target workflow.
   * 
   * The default status in a workflow is referred to as the "initial status". Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/)
   */
  inferStatusDefaults: boolean;
  /**
   * When an issue is moved, its subtasks (if there are any) need to be moved with it. `inferSubtaskTypeDefault` helps with moving the subtasks by picking a random subtask type in the target project.
   * 
   * If `true`, subtasks will automatically move to the same project as their parent.
   * 
   * When they move:
   * 
   *  *  Their `issueType` will be set to the default for subtasks in the target project.
   *  *  Values for mandatory fields will be retained from the source issues
   *  *  Specifying separate mapping for implicit subtasks won’t be allowed.
   * 
   * If `false`, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved.
   */
  inferSubtaskTypeDefault: boolean;
  /**
   * List of issue IDs or keys to be moved. These issues must be from the same project, have the same issue type, and be from the same parent (if they’re subtasks).
   */
  issueIdsOrKeys?: string[];
  /**
   * List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.
   * 
   * The new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).
   * 
   * **You should only define this property when `inferFieldDefaults` is `false`.**
   */
  targetMandatoryFields?: Array<targetMandatoryFields>;
  /**
   * List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.
   * 
   * The new values will only be applied if the source status is invalid for the target project and issue type.
   * 
   * **You should only define this property when `inferStatusDefaults` is `false`.**
   */
  targetStatus?: Array<targetStatus>;
}

export interface AtlassianV3 {
  /* Endpoint path: /rest/api */
  api: {
    /* Endpoint path: /rest/api/3 */
    3: {
      /* Endpoint path: /rest/api/3/announcementBanner */
      announcementBanner: {
        /**
         * Method: get /rest/api/3/announcementBanner
         * operationId: getBanner
         * sum: Get announcement banner configuration
         * doc: Returns the current announcement banner configuration.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $get(): Promise<AnnouncementBannerConfiguration>;
        /**
         * Method: put /rest/api/3/announcementBanner
         * operationId: setBanner
         * sum: Update announcement banner configuration
         * doc: Updates the announcement banner configuration.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 204: Returned if the request is successful.
         * 400: Returned if an invalid parameter is passed.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $put(body: AnnouncementBannerConfigurationUpdate): Promise<unknown>;
      };
      /* Endpoint path: /rest/api/3/app */
      app: {
        /* Endpoint path: /rest/api/3/app/field */
        field: {
          /* Endpoint path: /rest/api/3/app/field/value */
          value: {
            /**
             * Method: post /rest/api/3/app/field/value
             * operationId: updateMultipleCustomFieldValues
             * sum: Update custom fields
             * doc: Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.
             * 
             * Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.
             * 
             * **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
             * 204: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 403: Returned if the request is not authenticated as the app that provided all the fields.
             * 404: Returned if any field is not found.
             */
            $post(body: MultipleCustomFieldValuesUpdateDetails): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/app/field/{fieldIdOrKey} */
          "$"(fieldIdOrKey: string): {
            /* Endpoint path: /rest/api/3/app/field/{fieldIdOrKey}/context */
            context: {
              /* Endpoint path: /rest/api/3/app/field/{fieldIdOrKey}/context/configuration */
              configuration: {
                /**
                 * Method: get /rest/api/3/app/field/{fieldIdOrKey}/context/configuration
                 * operationId: getCustomFieldConfiguration
                 * sum: Get custom field configurations
                 * doc: Returns a [paginated](#pagination) list of configurations for a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).
                 * 
                 * The result can be filtered by one of these criteria:
                 * 
                 *  *  `id`.
                 *  *  `fieldContextId`.
                 *  *  `issueId`.
                 *  *  `projectKeyOrId` and `issueTypeId`.
                 * 
                 * Otherwise, all configurations are returned.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.
                 * 200: Returned if the request is successful.
                 * 400: Returned if the request is invalid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field.
                 * 404: Returned if the custom field is not found.
                 */
                $get(args?: {id?: Array<number>, fieldContextId?: Array<number>, issueId?: number, projectKeyOrId?: string, issueTypeId?: string, startAt?: number, maxResults?: number}): Promise<PageBeanContextualConfiguration>;
                /**
                 * Method: put /rest/api/3/app/field/{fieldIdOrKey}/context/configuration
                 * operationId: updateCustomFieldConfiguration
                 * sum: Update custom field configurations
                 * doc: Update the configuration for contexts of a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field type.
                 * 200: Returned if the request is successful.
                 * 400: Returned if the request is invalid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field.
                 * 404: Returned if the custom field is not found.
                 */
                $put(body: CustomFieldConfigurations): Promise<unknown>;
              };
            };
            /* Endpoint path: /rest/api/3/app/field/{fieldIdOrKey}/value */
            value: {
              /**
               * Method: put /rest/api/3/app/field/{fieldIdOrKey}/value
               * operationId: updateCustomFieldValue
               * sum: Update custom field value
               * doc: Updates the value of a custom field on one or more issues.
               * 
               * Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.
               * 
               * **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
               * 204: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 403: Returned if the request is not authenticated as the app that provided the field.
               * 404: Returned if the field is not found.
               */
              $put(body: CustomFieldValueUpdateDetails): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/application-properties */
      "application-properties": {
        /**
         * Method: get /rest/api/3/application-properties
         * operationId: getApplicationProperty
         * sum: Get application property
         * doc: Returns all application properties or an application property.
         * 
         * If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if the application property is not found or the user does not have permission to view it.
         */
        $get(args?: {key?: string, permissionLevel?: string, keyFilter?: string}): Promise<Array<ApplicationProperty>>;
        /* Endpoint path: /rest/api/3/application-properties/advanced-settings */
        "advanced-settings": {
          /**
           * Method: get /rest/api/3/application-properties/advanced-settings
           * operationId: getAdvancedSettings
           * sum: Get advanced settings
           * doc: Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user is not an administrator.
           */
          $get(): Promise<Array<ApplicationProperty>>;
        };
        /* Endpoint path: /rest/api/3/application-properties/{id} */
        "$"(id: string): {
          /**
           * Method: put /rest/api/3/application-properties/{id}
           * operationId: setApplicationProperty
           * sum: Set application property
           * doc: Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.
           * 
           * #### Advanced settings ####
           * 
           * The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).
           * 
           * | Key | Description | Default value |  
           * | -- | -- | -- |  
           * | `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |  
           * | `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |  
           * | `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |  
           * | `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |  
           * | `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |  
           * | `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |  
           * | `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |  
           * | `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |  
           * | `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |  
           * 
           * 
           * #### Look and feel ####
           * 
           * The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).
           * 
           * | Key | Description | Default value |  
           * | -- | -- | -- |  
           * | `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |  
           * | `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |  
           * | `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |  
           * | `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |  
           * | `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |  
           * | `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |  
           * | `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |  
           * | `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |  
           * | `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |  
           * | `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |  
           * | `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |  
           * | `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |  
           * | `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |  
           * | `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |  
           * | `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |  
           * 
           * 
           * #### Other settings ####
           * 
           * | Key | Description | Default value |  
           * | -- | -- | -- |  
           * | `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |  
           * 
           * 
           * *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the data type of the `value` does not match the application property's data type. For example, a string is provided instead of an integer.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have permission to edit the property.
           * 404: Returned if the property is not found or the user does not have permission to view it.
           */
          $put(body: SimpleApplicationPropertyBean): Promise<ApplicationProperty>;
        };
      };
      /* Endpoint path: /rest/api/3/applicationrole */
      applicationrole: {
        /**
         * Method: get /rest/api/3/applicationrole
         * operationId: getAllApplicationRoles
         * sum: Get all application roles
         * doc: Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user is not an administrator.
         */
        $get(): Promise<Array<ApplicationRole>>;
        /* Endpoint path: /rest/api/3/applicationrole/{key} */
        "$"(key: string): {
          /**
           * Method: get /rest/api/3/applicationrole/{key}
           * operationId: getApplicationRole
           * sum: Get application role
           * doc: Returns an application role.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user is not an administrator.
           * 404: Returned if the role is not found.
           */
          $get(): Promise<ApplicationRole>;
        };
      };
      /* Endpoint path: /rest/api/3/attachment */
      attachment: {
        /* Endpoint path: /rest/api/3/attachment/content */
        content: {
          /* Endpoint path: /rest/api/3/attachment/content/{id} */
          "$"(id: string): {
            /**
             * Method: get /rest/api/3/attachment/content/{id}
             * operationId: getAttachmentContent
             * sum: Get attachment content
             * doc: Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.
             * 
             * To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** For the issue containing the attachment:
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 200: Returned if the request is successful when `redirect` is set to `false`.
             * 206: Returned if the request is successful when a `Range` header is provided and `redirect` is set to `false`.
             * 303: Returned if the request is successful. See the `Location` header for the download URL.
             * 400: Returned if the range supplied in the `Range` header is malformed.
             * 401: Returned if the authentication credentials are incorrect.
             * 403: The user does not have the necessary permission.
             * 404: Returned if:
             * 
             *  *  the attachment is not found.
             *  *  attachments are disabled in the Jira settings.
             * 416: Returned if the server is unable to satisfy the range of bytes provided.
             */
            $get(args?: {redirect?: boolean}): Promise<Array<any/* 45 */>>;
          };
        };
        /* Endpoint path: /rest/api/3/attachment/meta */
        meta: {
          /**
           * Method: get /rest/api/3/attachment/meta
           * operationId: getAttachmentMeta
           * sum: Get Jira attachment settings
           * doc: Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.
           * 
           * Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(): Promise<AttachmentSettings>;
        };
        /* Endpoint path: /rest/api/3/attachment/thumbnail */
        thumbnail: {
          /* Endpoint path: /rest/api/3/attachment/thumbnail/{id} */
          "$"(id: string): {
            /**
             * Method: get /rest/api/3/attachment/thumbnail/{id}
             * operationId: getAttachmentThumbnail
             * sum: Get attachment thumbnail
             * doc: Returns the thumbnail of an attachment.
             * 
             * To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** For the issue containing the attachment:
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 200: Returned if the request is successful when `redirect` is set to `false`.
             * 303: Returned if the request is successful. See the `Location` header for the download URL.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect.
             * 403: The user does not have the necessary permission.
             * 404: Returned if:
             * 
             *  *  the attachment is not found.
             *  *  attachments are disabled in the Jira settings.
             *  *  `fallbackToDefault` is `false` and the request thumbnail cannot be downloaded.
             */
            $get(args?: {redirect?: boolean, fallbackToDefault?: boolean, width?: number, height?: number}): Promise<Array<any/* 45 */>>;
          };
        };
        /* Endpoint path: /rest/api/3/attachment/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/attachment/{id}
           * operationId: getAttachment
           * sum: Get attachment metadata
           * doc: Returns the metadata for an attachment. Note that the attachment itself is not returned.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if:
           * 
           *  *  the attachment is not found.
           *  *  attachments are disabled in the Jira settings.
           */
          $get(): Promise<AttachmentMetadata>;
          /**
           * Method: delete /rest/api/3/attachment/{id}
           * operationId: removeAttachment
           * sum: Delete attachment
           * doc: Deletes an attachment from an issue.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:
           * 
           *  *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
           *  *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.
           * 204: Returned if the request is successful.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if:
           * 
           *  *  the attachment is not found.
           *  *  attachments are disabled in the Jira settings.
           */
          $delete(): Promise<unknown>;
          /* Endpoint path: /rest/api/3/attachment/{id}/expand */
          expand: {
            /* Endpoint path: /rest/api/3/attachment/{id}/expand/human */
            human: {
              /**
               * Method: get /rest/api/3/attachment/{id}/expand/human
               * operationId: expandAttachmentForHumans
               * sum: Get all metadata for an expanded attachment
               * doc: Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.
               * 
               * Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** For the issue containing the attachment:
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 200: Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: The user does not have the necessary permission.
               * 404: Returned if:
               * 
               *  *  the attachment is not found.
               *  *  attachments are disabled in the Jira settings.
               * 409: Returned if the attachment is an archive, but not a supported archive format.
               */
              $get(): Promise<AttachmentArchiveMetadataReadable>;
            };
            /* Endpoint path: /rest/api/3/attachment/{id}/expand/raw */
            raw: {
              /**
               * Method: get /rest/api/3/attachment/{id}/expand/raw
               * operationId: expandAttachmentForMachines
               * sum: Get contents metadata for an expanded attachment
               * doc: Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.
               * 
               * Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** For the issue containing the attachment:
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 200: Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: The user does not have the necessary permission.
               * 404: Returned if:
               * 
               *  *  the attachment is not found.
               *  *  attachments are disabled in the Jira settings.
               * 409: Returned if the attachment is an archive, but not a supported archive format.
               */
              $get(): Promise<AttachmentArchiveImpl>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/auditing */
      auditing: {
        /* Endpoint path: /rest/api/3/auditing/record */
        record: {
          /**
           * Method: get /rest/api/3/auditing/record
           * operationId: getAuditRecords
           * sum: Get audit records
           * doc: Returns a list of audit records. The list can be filtered to include items:
           * 
           *  *  where each item in `filter` has at least one match in any of these fields:
           *     
           *      *  `summary`
           *      *  `category`
           *      *  `eventSource`
           *      *  `objectItem.name` If the object is a user, account ID is available to filter.
           *      *  `objectItem.parentName`
           *      *  `objectItem.typeName`
           *      *  `changedValues.changedFrom`
           *      *  `changedValues.changedTo`
           *      *  `remoteAddress`
           *     
           *     For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
           *  *  created on or after a date and time.
           *  *  created or or before a date and time.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if:
           * 
           *  *  the user does not have the required permissions.
           *  *  all Jira products are on free plans. Audit logs are available when at least one Jira product is on a paid plan.
           */
          $get(args?: {offset?: number, limit?: number, filter?: string, from?: string, to?: string}): Promise<AuditRecords>;
        };
      };
      /* Endpoint path: /rest/api/3/avatar */
      avatar: {
        /* Endpoint path: /rest/api/3/avatar/{type} */
        "$"(type: string): {
          /* Endpoint path: /rest/api/3/avatar/{type}/system */
          system: {
            /**
             * Method: get /rest/api/3/avatar/{type}/system
             * operationId: getAllSystemAvatars
             * sum: Get system avatars by type
             * doc: Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** None.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 500: Returned if an error occurs while retrieving the list of avatars.
             */
            $get(): Promise<SystemAvatars>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/bulk */
      bulk: {
        /* Endpoint path: /rest/api/3/bulk/issues */
        issues: {
          /* Endpoint path: /rest/api/3/bulk/issues/fields */
          fields: {
            /**
             * Method: get /rest/api/3/bulk/issues/fields
             * operationId: getBulkEditableFields
             * sum: Get bulk editable fields
             * doc: Use this API to get a list of fields visible to the user to perform bulk edit operations. You can pass single or multiple issues in the query to get eligible editable fields. This API uses pagination to return responses, delivering 50 fields at a time.
             * 
             * This method is experimental and may change.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
             *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in all projects that contain the selected issues.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if no editable fields are found for the provided issue IDs.
             */
            $get(args: {issueIdsOrKeys: string, searchText?: string, endingBefore?: string, startingAfter?: string}): Promise<BulkEditGetFields>;
            /**
             * Method: post /rest/api/3/bulk/issues/fields
             * operationId: submitBulkEdit
             * sum: Bulk edit issues
             * doc: Use this API to submit a bulk edit request and simultaneously edit multiple issues. There are limits applied to the number of issues and fields that can be edited. A single request can accommodate a maximum of 1000 issues (including subtasks) and 200 fields.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
             *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in all projects that contain the selected issues.
             * 201: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $post(body: IssueBulkEditPayload): Promise<SubmittedBulkOperation>;
          };
          /* Endpoint path: /rest/api/3/bulk/issues/move */
          move: {
            /**
             * Method: post /rest/api/3/bulk/issues/move
             * operationId: submitBulkMove
             * sum: Bulk move issues
             * doc: Use this API to submit a bulk issue move request. You can move multiple issues, but they must all be moved to and from a single project, issue type, and parent. You can't move more than 1000 issues (including subtasks) at once.
             * 
             * #### Scenarios: ####
             * 
             * This is an early version of the API and it doesn't have full feature parity with the Bulk Move UI experience.
             * 
             *  *  Moving issue of type A to issue of type B in the same project or a different project: `SUPPORTED`
             *  *  Moving multiple issues of type A in one project to multiple issues of type B in the same project or a different project: **`SUPPORTED`**
             *  *  Moving a standard parent issue of type A with its multiple subtask issue types in one project to standard issue of type B and multiple subtask issue types in the same project or a different project: `SUPPORTED`
             *  *  Moving an epic issue with its child issues to a different project without losing their relation: `NOT SUPPORTED`  
             *     (Workaround: Move them individually and stitch the relationship back with the Bulk Edit API)
             * 
             * #### Limits applied to bulk issue moves: ####
             * 
             * When using the bulk move, keep in mind that there are limits on the number of issues and fields you can include.
             * 
             *  *  You can move up to 1,000 issues in a single operation, including any subtasks.
             *  *  All issues must originate from the same project and share the same issue type and parent.
             *  *  The total combined number of fields across all issues must not exceed 1,500,000. For example, if each issue includes 15,000 fields, then the maximum number of issues that can be moved is 100.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
             *  *  Move [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in source projects.
             *  *  Create [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in destination projects.
             *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in destination projects, if moving subtasks only.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $post(body: IssueBulkMovePayload): Promise<SubmittedBulkOperation>;
          };
        };
        /* Endpoint path: /rest/api/3/bulk/queue */
        queue: {
          /* Endpoint path: /rest/api/3/bulk/queue/{taskId} */
          "$"(taskId: string): {
            /**
             * Method: get /rest/api/3/bulk/queue/{taskId}
             * operationId: getBulkOperationProgress
             * sum: Get bulk issue operation progress
             * doc: Use this to get the progress state for the specified bulk operation `taskId`.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
             *  *  Administer Jira [global permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/), or be the creator of the task.
             * 
             * If the task is running, this resource will return:
             * 
             *     {"taskId":"10779","status":"RUNNING","progressPercent":65,"submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"created":1690180055963,"started":1690180056206,"updated":169018005829}
             * 
             * If the task has completed, then this resource will return:
             * 
             *     {"processedAccessibleIssues":[10001,10002],"created":1709189449954,"progressPercent":100,"started":1709189450154,"status":"COMPLETE","submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"invalidOrInaccessibleIssueCount":0,"taskId":"10000","totalIssueCount":2,"updated":1709189450354}
             * 
             * **Note:** You can view task progress for up to 14 days from creation.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $get(): Promise<BulkOperationProgress>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/classification-levels */
      "classification-levels": {
        /**
         * Method: get /rest/api/3/classification-levels
         * operationId: getAllUserDataClassificationLevels
         * sum: Get all classification levels
         * doc: Returns all classification levels.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(args?: {status?: Array<string>, orderBy?: string}): Promise<DataClassificationLevelsBean>;
      };
      /* Endpoint path: /rest/api/3/comment */
      comment: {
        /* Endpoint path: /rest/api/3/comment/list */
        list: {
          /**
           * Method: post /rest/api/3/comment/list
           * operationId: getCommentsByIds
           * sum: Get comments by IDs
           * doc: Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** Comments are returned where the user:
           * 
           *  *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
           * 200: Returned if the request is successful.
           * 400: Returned if the request contains more than 1000 IDs or is empty.
           */
          $post(body: IssueCommentListRequestBean): Promise<PageBeanComment>;
        };
        /* Endpoint path: /rest/api/3/comment/{commentId} */
        "$"(commentId: string): {
          /* Endpoint path: /rest/api/3/comment/{commentId}/properties */
          properties: {
            /**
             * Method: get /rest/api/3/comment/{commentId}/properties
             * operationId: getCommentPropertyKeys
             * sum: Get comment property keys
             * doc: Returns the keys of all the properties of a comment.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
             * 200: Returned if the request is successful.
             * 400: Returned if the comment ID is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the comment is not found.
             */
            $get(): Promise<PropertyKeys>;
            /* Endpoint path: /rest/api/3/comment/{commentId}/properties/{propertyKey} */
            "$"(propertyKey: string): {
              /**
               * Method: get /rest/api/3/comment/{commentId}/properties/{propertyKey}
               * operationId: getCommentProperty
               * sum: Get comment property
               * doc: Returns the value of a comment property.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
               * 200: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the comment or the property is not found.
               */
              $get(): Promise<EntityProperty>;
              /**
               * Method: delete /rest/api/3/comment/{commentId}/properties/{propertyKey}
               * operationId: deleteCommentProperty
               * sum: Delete comment property
               * doc: Deletes a comment property.
               * 
               * **[Permissions](#permissions) required:** either of:
               * 
               *  *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
               *  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.
               * 
               * Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
               * 204: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the comment or the property is not found or the user has the necessary project permissions but isn't a member of the role or group visibility of the comment is restricted to.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/comment/{commentId}/properties/{propertyKey}
               * operationId: setCommentProperty
               * sum: Set comment property
               * doc: Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.
               * 
               * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
               * 
               * **[Permissions](#permissions) required:** either of:
               * 
               *  *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
               *  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.
               * 
               * Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
               * 200: Returned if the comment property is updated.
               * 201: Returned if the comment property is created.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the comment is not found.
               */
              $put(body: any /* 264 */): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/component */
      component: {
        /**
         * Method: get /rest/api/3/component
         * operationId: findComponentsForProjects
         * sum: Find components for projects
         * doc: Returns a [paginated](#pagination) list of all components in a project, including global (Compass) components when applicable.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if the project is not found or the user does not have permission to view it.
         */
        $get(args?: {projectIdsOrKeys?: Array<string>, startAt?: number, maxResults?: number, orderBy?: string, query?: string}): Promise<PageBean2ComponentJsonBean>;
        /**
         * Method: post /rest/api/3/component
         * operationId: createComponent
         * sum: Create component
         * doc: Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if:
         * 
         *  *  the user is not found.
         *  *  `name` is not provided.
         *  *  `name` is over 255 characters in length.
         *  *  `projectId` is not provided.
         *  *  `assigneeType` is an invalid value.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.
         * 404: Returned if the project is not found or the user does not have permission to browse the project containing the component.
         */
        $post(body: ProjectComponent): Promise<ProjectComponent>;
        /* Endpoint path: /rest/api/3/component/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/component/{id}
           * operationId: getComponent
           * sum: Get component
           * doc: Returns a component.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the component is not found or the user does not have permission to browse the project containing the component.
           */
          $get(): Promise<ProjectComponent>;
          /**
           * Method: delete /rest/api/3/component/{id}
           * operationId: deleteComponent
           * sum: Delete component
           * doc: Deletes a component.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.
           * 404: Returned if:
           * 
           *  *  the component is not found.
           *  *  the replacement component is not found.
           *  *  the user does not have permission to browse the project containing the component.
           */
          $delete(args?: {moveIssuesTo?: string}): Promise<unknown>;
          /**
           * Method: put /rest/api/3/component/{id}
           * operationId: updateComponent
           * sum: Update component
           * doc: Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  the user is not found.
           *  *  `assigneeType` is an invalid value.
           *  *  `name` is over 255 characters in length.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.
           * 404: Returned if the component is not found or the user does not have permission to browse the project containing the component.
           */
          $put(body: ProjectComponent): Promise<ProjectComponent>;
          /* Endpoint path: /rest/api/3/component/{id}/relatedIssueCounts */
          relatedIssueCounts: {
            /**
             * Method: get /rest/api/3/component/{id}/relatedIssueCounts
             * operationId: getComponentRelatedIssues
             * sum: Get component issues count
             * doc: Returns the counts of issues assigned to the component.
             * 
             * This operation can be accessed anonymously.
             * 
             * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
             * 
             *  *  **Classic**: `read:jira-work`
             *  *  **Granular**: `read:field:jira`, `read:project.component:jira`
             * 
             * **[Permissions](#permissions) required:** None.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the component is not found.
             */
            $get(): Promise<ComponentIssuesCount>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/configuration */
      configuration: {
        /**
         * Method: get /rest/api/3/configuration
         * operationId: getConfiguration
         * sum: Get global settings
         * doc: Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(): Promise<Configuration>;
        /* Endpoint path: /rest/api/3/configuration/timetracking */
        timetracking: {
          /**
           * Method: get /rest/api/3/configuration/timetracking
           * operationId: getSelectedTimeTrackingImplementation
           * sum: Get selected time tracking provider
           * doc: Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful and time tracking is enabled.
           * 204: Returned if the request is successful but time tracking is disabled.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $get(): Promise<TimeTrackingProvider>;
          /**
           * Method: put /rest/api/3/configuration/timetracking
           * operationId: selectTimeTrackingImplementation
           * sum: Select time tracking provider
           * doc: Selects a time tracking provider.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the time tracking provider is not found.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $put(body: TimeTrackingProvider): Promise<unknown>;
          /* Endpoint path: /rest/api/3/configuration/timetracking/list */
          list: {
            /**
             * Method: get /rest/api/3/configuration/timetracking/list
             * operationId: getAvailableTimeTrackingImplementations
             * sum: Get all time tracking providers
             * doc: Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             */
            $get(): Promise<Array<TimeTrackingProvider>>;
          };
          /* Endpoint path: /rest/api/3/configuration/timetracking/options */
          options: {
            /**
             * Method: get /rest/api/3/configuration/timetracking/options
             * operationId: getSharedTimeTrackingConfiguration
             * sum: Get time tracking settings
             * doc: Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             */
            $get(): Promise<TimeTrackingConfiguration>;
            /**
             * Method: put /rest/api/3/configuration/timetracking/options
             * operationId: setSharedTimeTrackingConfiguration
             * sum: Set time tracking settings
             * doc: Sets the time tracking settings.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request object is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             */
            $put(body: TimeTrackingConfiguration): Promise<TimeTrackingConfiguration>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/customFieldOption */
      customFieldOption: {
        /* Endpoint path: /rest/api/3/customFieldOption/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/customFieldOption/{id}
           * operationId: getCustomFieldOption
           * sum: Get custom field option
           * doc: Returns a custom field option. For example, an option in a select list.
           * 
           * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** The custom field option is returned as follows:
           * 
           *  *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           *  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  the custom field option is not found.
           *  *  the user does not have permission to view the custom field.
           */
          $get(): Promise<CustomFieldOption>;
        };
      };
      /* Endpoint path: /rest/api/3/dashboard */
      dashboard: {
        /**
         * Method: get /rest/api/3/dashboard
         * operationId: getAllDashboards
         * sum: Get all dashboards
         * doc: Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(args?: {filter?: string, startAt?: number, maxResults?: number}): Promise<PageOfDashboards>;
        /**
         * Method: post /rest/api/3/dashboard
         * operationId: createDashboard
         * sum: Create dashboard
         * doc: Creates a dashboard.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $post(body: DashboardDetails): Promise<Dashboard>;
        /* Endpoint path: /rest/api/3/dashboard/bulk */
        bulk: {
          /* Endpoint path: /rest/api/3/dashboard/bulk/edit */
          edit: {
            /**
             * Method: put /rest/api/3/dashboard/bulk/edit
             * operationId: bulkEditDashboards
             * sum: Bulk edit dashboards
             * doc: Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.
             * 
             * **[Permissions](#permissions) required:** None
             * 
             * The dashboards to be updated must be owned by the user, or the user must be an administrator.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $put(body: BulkEditShareableEntityRequest): Promise<BulkEditShareableEntityResponse>;
          };
        };
        /* Endpoint path: /rest/api/3/dashboard/gadgets */
        gadgets: {
          /**
           * Method: get /rest/api/3/dashboard/gadgets
           * operationId: getAllAvailableDashboardGadgets
           * sum: Get available gadgets
           * doc: Gets a list of all available gadgets that can be added to all dashboards.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 400: 400 response
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(): Promise<AvailableDashboardGadgetsResponse>;
        };
        /* Endpoint path: /rest/api/3/dashboard/search */
        search: {
          /**
           * Method: get /rest/api/3/dashboard/search
           * operationId: getDashboardsPaginated
           * sum: Search for dashboards
           * doc: Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:
           * 
           *  *  Dashboards owned by the user. Not returned for anonymous users.
           *  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
           *  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
           *  *  Dashboards shared with a public project.
           *  *  Dashboards shared with the public.
           * 200: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  `orderBy` is invalid.
           *  *  `expand` includes an invalid value.
           *  *  `accountId` and `owner` are provided.
           *  *  `groupname` and `groupId` are provided.
           * 401: 401 response
           */
          $get(args?: {dashboardName?: string, accountId?: string, owner?: string, groupname?: string, groupId?: string, projectId?: number, orderBy?: string, startAt?: number, maxResults?: number, status?: string, expand?: string}): Promise<PageBeanDashboard>;
        };
        /* Endpoint path: /rest/api/3/dashboard/{dashboardId} */
        "$"(dashboardId: string): {
          /* Endpoint path: /rest/api/3/dashboard/{dashboardId}/gadget */
          gadget: {
            /**
             * Method: get /rest/api/3/dashboard/{dashboardId}/gadget
             * operationId: getAllGadgets
             * sum: Get gadgets
             * doc: Returns a list of dashboard gadgets on a dashboard.
             * 
             * This operation returns:
             * 
             *  *  Gadgets from a list of IDs, when `id` is set.
             *  *  Gadgets with a module key, when `moduleKey` is set.
             *  *  Gadgets from a list of URIs, when `uri` is set.
             *  *  All gadgets, when no other parameters are set.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** None.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect.
             * 404: Returned if the dashboard is not found.
             */
            $get(args?: {moduleKey?: Array<string>, uri?: Array<string>, gadgetId?: Array<number>}): Promise<DashboardGadgetResponse>;
            /**
             * Method: post /rest/api/3/dashboard/{dashboardId}/gadget
             * operationId: addGadget
             * sum: Add gadget to dashboard
             * doc: Adds a gadget to a dashboard.
             * 
             * **[Permissions](#permissions) required:** None.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the dashboard is not found.
             */
            $post(body: DashboardGadgetSettings): Promise<DashboardGadget>;
            /* Endpoint path: /rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId} */
            "$"(gadgetId: string): {
              /**
               * Method: delete /rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}
               * operationId: removeGadget
               * sum: Remove gadget from dashboard
               * doc: Removes a dashboard gadget from a dashboard.
               * 
               * When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.
               * 
               * **[Permissions](#permissions) required:** None.
               * 204: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the gadget or the dashboard is not found.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}
               * operationId: updateGadget
               * sum: Update gadget on dashboard
               * doc: Changes the title, position, and color of the gadget on a dashboard.
               * 
               * **[Permissions](#permissions) required:** None.
               * 204: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect.
               * 404: Returned if the gadget or the dashboard is not found.
               */
              $put(body: DashboardGadgetUpdateRequest): Promise<unknown>;
            };
          };
          /* Endpoint path: /rest/api/3/dashboard/{dashboardId}/items */
          items: {
            /* Endpoint path: /rest/api/3/dashboard/{dashboardId}/items/{itemId} */
            "$"(itemId: string): {
              /* Endpoint path: /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties */
              properties: {
                /**
                 * Method: get /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties
                 * operationId: getDashboardItemPropertyKeys
                 * sum: Get dashboard item property keys
                 * doc: Returns the keys of all properties for a dashboard item.
                 * 
                 * This operation can be accessed anonymously.
                 * 
                 * **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.
                 * 200: Returned if the request is successful.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 404: Returned if the dashboard or dashboard item is not found, or the dashboard is not owned by or shared with the user.
                 */
                $get(): Promise<PropertyKeys>;
                /* Endpoint path: /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey} */
                "$"(propertyKey: string): {
                  /**
                   * Method: get /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}
                   * operationId: getDashboardItemProperty
                   * sum: Get dashboard item property
                   * doc: Returns the key and value of a dashboard item property.
                   * 
                   * A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
                   * 
                   * When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
                   * 
                   * There is no resource to set or get dashboard items.
                   * 
                   * This operation can be accessed anonymously.
                   * 
                   * **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.
                   * 200: Returned if the request is successful.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 404: Returned if the dashboard, the dashboard item, or dashboard item property is not found, or the dashboard is not owned by or shared with the user.
                   */
                  $get(): Promise<EntityProperty>;
                  /**
                   * Method: delete /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}
                   * operationId: deleteDashboardItemProperty
                   * sum: Delete dashboard item property
                   * doc: Deletes a dashboard item property.
                   * 
                   * This operation can be accessed anonymously.
                   * 
                   * **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
                   * 204: Returned if the dashboard item property is deleted.
                   * 400: Returned if the dashboard or dashboard item ID is invalid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user is not the owner of the dashboard.
                   * 404: Returned if the dashboard item is not found or the dashboard is not shared with the user.
                   */
                  $delete(): Promise<unknown>;
                  /**
                   * Method: put /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}
                   * operationId: setDashboardItemProperty
                   * sum: Set dashboard item property
                   * doc: Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.
                   * 
                   * A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
                   * 
                   * When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
                   * 
                   * There is no resource to set or get dashboard items.
                   * 
                   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
                   * 
                   * This operation can be accessed anonymously.
                   * 
                   * **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
                   * 200: Returned if the dashboard item property is updated.
                   * 201: Returned if the dashboard item property is created.
                   * 400: Returned if:
                   * 
                   *  *  Request is invalid
                   *  *  Or if all of these conditions are met in the request:
                   *     
                   *      *  The dashboard item has a spec URI and no complete module key
                   *      *  The value of propertyKey is equal to "config"
                   *      *  The request body contains a JSON object whose keys and values are not strings.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user is not the owner of the dashboard.
                   * 404: Returned if the dashboard item is not found or the dashboard is not shared with the user.
                   */
                  $put(body: any /* 264 */): Promise<unknown>;
                };
              };
            };
          };
        };
        /* Endpoint path: /rest/api/3/dashboard/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/dashboard/{id}
           * operationId: getDashboard
           * sum: Get dashboard
           * doc: Returns a dashboard.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 
           * However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
           * 200: Returned if the request is successful.
           * 400: 400 response
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.
           */
          $get(): Promise<Dashboard>;
          /**
           * Method: delete /rest/api/3/dashboard/{id}
           * operationId: deleteDashboard
           * sum: Delete dashboard
           * doc: Deletes a dashboard.
           * 
           * **[Permissions](#permissions) required:** None
           * 
           * The dashboard to be deleted must be owned by the user.
           * 204: Returned if the dashboard is deleted.
           * 400: 400 response
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/dashboard/{id}
           * operationId: updateDashboard
           * sum: Update dashboard
           * doc: Updates a dashboard, replacing all the dashboard details with those provided.
           * 
           * **[Permissions](#permissions) required:** None
           * 
           * The dashboard to be updated must be owned by the user.
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the dashboard is not found or the dashboard is not owned by the user.
           */
          $put(body: DashboardDetails): Promise<Dashboard>;
          /* Endpoint path: /rest/api/3/dashboard/{id}/copy */
          copy: {
            /**
             * Method: post /rest/api/3/dashboard/{id}/copy
             * operationId: copyDashboard
             * sum: Copy dashboard
             * doc: Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.
             * 
             * **[Permissions](#permissions) required:** None
             * 
             * The dashboard to be copied must be owned by or shared with the user.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.
             */
            $post(body: DashboardDetails): Promise<Dashboard>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/data-policy */
      "data-policy": {
        /**
         * Method: get /rest/api/3/data-policy
         * operationId: getPolicy
         * sum: Get data policy for the workspace
         * doc: Returns data policy for the workspace.
         * 200: Returned if the request is successful
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the client is not authorized to make the request.
         */
        $get(): Promise<WorkspaceDataPolicy>;
        /* Endpoint path: /rest/api/3/data-policy/project */
        project: {
          /**
           * Method: get /rest/api/3/data-policy/project
           * operationId: getPolicies
           * sum: Get data policy for projects
           * doc: Returns data policies for the projects specified in the request.
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid or includes invalid or not-permitted project identifiers.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the client is not authorized to make the request.
           */
          $get(args?: {ids?: string}): Promise<ProjectDataPolicies>;
        };
      };
      /* Endpoint path: /rest/api/3/events */
      events: {
        /**
         * Method: get /rest/api/3/events
         * operationId: getEvents
         * sum: Get events
         * doc: Returns all issue events.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have permission to complete this request.
         */
        $get(): Promise<Array<IssueEvent>>;
      };
      /* Endpoint path: /rest/api/3/expression */
      expression: {
        /* Endpoint path: /rest/api/3/expression/analyse */
        analyse: {
          /**
           * Method: post /rest/api/3/expression/analyse
           * operationId: analyseExpression
           * sum: Analyse Jira expression
           * doc: Analyses and validates Jira expressions.
           * 
           * As an experimental feature, this operation can also attempt to type-check the expressions.
           * 
           * Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).
           * 
           * **[Permissions](#permissions) required**: None.
           * 200: Returned if the request is successful.
           * 400: 400 response
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: 404 response
           */
          $post(body: JiraExpressionForAnalysis): Promise<JiraExpressionsAnalysis>;
        };
        /* Endpoint path: /rest/api/3/expression/eval */
        eval: {
          /**
           * Method: post /rest/api/3/expression/eval
           * operationId: evaluateJiraExpression
           * sum: Evaluate Jira expression
           * doc: Evaluates a Jira expression and returns its value.
           * 
           * This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.
           * 
           * #### Context variables ####
           * 
           * The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.
           * 
           *  *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
           *  *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
           *  *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
           *  *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
           *  *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
           *  *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
           *  *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
           *  *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
           *  *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.
           * 
           * Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:
           * 
           *  *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
           *  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
           *  *  `json`: A JSON object containing custom content.
           *  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  
           * Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).
           * 200: Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.
           * 400: Returned if:
           * 
           *  *  the request is invalid, that is:
           *     
           *      *  invalid data is provided, such as a request including issue ID and key.
           *      *  the expression is invalid and can not be parsed.
           *  *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression `issue.id` where `issue` is `null`). In this case an error message is provided.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if any object provided in the request context is not found or the user does not have permission to view it.
           */
          $post(body: JiraExpressionEvalRequestBean): Promise<JiraExpressionResult>;
        };
      };
      /* Endpoint path: /rest/api/3/field */
      field: {
        /**
         * Method: get /rest/api/3/field
         * operationId: getFields
         * sum: Get fields
         * doc: Returns system and custom issue fields according to the following rules:
         * 
         *  *  Fields that cannot be added to the issue navigator are always returned.
         *  *  Fields that cannot be placed on an issue screen are always returned.
         *  *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
         *  *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(): Promise<Array<FieldDetails>>;
        /**
         * Method: post /rest/api/3/field
         * operationId: createCustomField
         * sum: Create custom field
         * doc: Creates a custom field.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the custom field is created.
         * 400: Returned if:
         * 
         *  *  the user does not have permission to create custom fields.
         *  *  any of the request object properties have invalid or missing values.
         */
        $post(body: CustomFieldDefinitionJsonBean): Promise<FieldDetails>;
        /* Endpoint path: /rest/api/3/field/search */
        search: {
          /**
           * Method: get /rest/api/3/field/search
           * operationId: getFieldsPaginated
           * sum: Get fields paginated
           * doc: Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:
           * 
           *  *  all fields
           *  *  specific fields, by defining `id`
           *  *  fields that contain a string in the field name or description, by defining `query`
           *  *  specific fields that contain a string in the field name or description, by defining `id` and `query`
           * 
           * Only custom fields can be queried, `type` must be set to `custom`.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $get(args?: {startAt?: number, maxResults?: number, type?: Array<string>, id?: Array<string>, query?: string, orderBy?: string, expand?: string}): Promise<PageBeanField>;
          /* Endpoint path: /rest/api/3/field/search/trashed */
          trashed: {
            /**
             * Method: get /rest/api/3/field/search/trashed
             * operationId: getTrashedFieldsPaginated
             * sum: Get fields in trash paginated
             * doc: Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.
             * 
             * Only custom fields can be queried, `type` must be set to `custom`.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             */
            $get(args?: {startAt?: number, maxResults?: number, id?: Array<string>, query?: string, expand?: string, orderBy?: string}): Promise<PageBeanField>;
          };
        };
        /* Endpoint path: /rest/api/3/field/{fieldId} */
        "$"(fieldId: string): {
          /**
           * Method: put /rest/api/3/field/{fieldId}
           * operationId: updateCustomField
           * sum: Update custom field
           * doc: Updates a custom field.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the custom field is not found.
           */
          $put(body: UpdateCustomFieldDetails): Promise<unknown>;
          /* Endpoint path: /rest/api/3/field/{fieldId}/context */
          context: {
            /**
             * Method: get /rest/api/3/field/{fieldId}/context
             * operationId: getContextsForField
             * sum: Get custom field contexts
             * doc: Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:
             * 
             *  *  With no other parameters set, all contexts.
             *  *  By defining `id` only, all contexts from the list of IDs.
             *  *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)
             *  *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the required permissions.
             * 404: Returned if the custom field was not found.
             */
            $get(args?: {isAnyIssueType?: boolean, isGlobalContext?: boolean, contextId?: Array<number>, startAt?: number, maxResults?: number}): Promise<PageBeanCustomFieldContext>;
            /**
             * Method: post /rest/api/3/field/{fieldId}/context
             * operationId: createCustomFieldContext
             * sum: Create custom field context
             * doc: Creates a custom field context.
             * 
             * If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 201: Returned if the custom field context is created.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the field, project, or issue type is not found.
             * 409: Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.
             */
            $post(body: CreateCustomFieldContext): Promise<CreateCustomFieldContext>;
            /* Endpoint path: /rest/api/3/field/{fieldId}/context/defaultValue */
            defaultValue: {
              /**
               * Method: get /rest/api/3/field/{fieldId}/context/defaultValue
               * operationId: getDefaultValues
               * sum: Get custom field contexts default values
               * doc: Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.  
               * The returned object depends on type of the custom field:
               * 
               *  *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
               *  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
               *  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
               *  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
               *  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
               *  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
               *  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
               *  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
               *  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
               *  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
               *  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
               *  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
               *  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
               *  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
               *  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
               *  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
               *  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
               *  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
               * 
               * Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
               * 
               *  *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
               *  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
               *  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
               *  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
               *  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
               *  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
               *  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
               *  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
               *  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the custom field is not found.
               */
              $get(args?: {contextId?: Array<number>, startAt?: number, maxResults?: number}): Promise<PageBeanCustomFieldContextDefaultValue>;
              /**
               * Method: put /rest/api/3/field/{fieldId}/context/defaultValue
               * operationId: setDefaultValues
               * sum: Set custom field contexts default values
               * doc: Sets default for contexts of a custom field. Default are defined using these objects:
               * 
               *  *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
               *  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
               *  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
               *  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
               *  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
               *  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
               *  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
               *  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
               *  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
               *  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
               *  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
               *  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
               *  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
               *  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
               *  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
               *  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
               *  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
               *  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
               * 
               * Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
               * 
               *  *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
               *  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
               *  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
               *  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
               *  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
               *  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
               *  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
               *  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
               *  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
               * 
               * Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if operation is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the custom field, a context, an option, or a cascading option is not found.
               */
              $put(body: CustomFieldContextDefaultValueUpdate): Promise<unknown>;
            };
            /* Endpoint path: /rest/api/3/field/{fieldId}/context/issuetypemapping */
            issuetypemapping: {
              /**
               * Method: get /rest/api/3/field/{fieldId}/context/issuetypemapping
               * operationId: getIssueTypeMappingsForContexts
               * sum: Get issue types for custom field context
               * doc: Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if operation is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               */
              $get(args?: {contextId?: Array<number>, startAt?: number, maxResults?: number}): Promise<PageBeanIssueTypeToContextMapping>;
            };
            /* Endpoint path: /rest/api/3/field/{fieldId}/context/mapping */
            mapping: {
              /**
               * Method: post /rest/api/3/field/{fieldId}/context/mapping
               * operationId: getCustomFieldContextsForProjectsAndIssueTypes
               * sum: Get custom field contexts for projects and issue types
               * doc: Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.
               * 
               * If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.
               * 
               * Duplicate project and issue type mappings cannot be provided in the request.
               * 
               * The order of the returned values is the same as provided in the request.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the custom field, project, or issue type is not found.
               */
              $post(body: ProjectIssueTypeMappings): Promise<PageBeanContextForProjectAndIssueType>;
            };
            /* Endpoint path: /rest/api/3/field/{fieldId}/context/projectmapping */
            projectmapping: {
              /**
               * Method: get /rest/api/3/field/{fieldId}/context/projectmapping
               * operationId: getProjectContextMapping
               * sum: Get project mappings for custom field context
               * doc: Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the custom field is not found.
               */
              $get(args?: {contextId?: Array<number>, startAt?: number, maxResults?: number}): Promise<PageBeanCustomFieldContextProjectMapping>;
            };
            /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId} */
            "$"(contextId: string): {
              /**
               * Method: delete /rest/api/3/field/{fieldId}/context/{contextId}
               * operationId: deleteCustomFieldContext
               * sum: Delete custom field context
               * doc: Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the context is deleted.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the custom field or the context is not found.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/field/{fieldId}/context/{contextId}
               * operationId: updateCustomFieldContext
               * sum: Update custom field context
               * doc: Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the context is updated.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the custom field or the context is not found.
               */
              $put(body: CustomFieldContextUpdateDetails): Promise<unknown>;
              /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId}/issuetype */
              issuetype: {
                /**
                 * Method: put /rest/api/3/field/{fieldId}/context/{contextId}/issuetype
                 * operationId: addIssueTypesToContext
                 * sum: Add issue types to context
                 * doc: Adds issue types to a custom field context, appending the issue types to the issue types list.
                 * 
                 * A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.
                 * 
                 * If any of the issue types exists in the custom field context, the operation fails and no issue types are added.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 204: Returned if operation is successful.
                 * 400: Returned if the request is not valid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the required permissions.
                 * 404: Returned if the custom field, context, or one or more issue types are not found.
                 * 409: Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.
                 */
                $put(body: IssueTypeIds): Promise<unknown>;
                /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove */
                remove: {
                  /**
                   * Method: post /rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove
                   * operationId: removeIssueTypesFromContext
                   * sum: Remove issue types from context
                   * doc: Removes issue types from a custom field context.
                   * 
                   * A custom field context without any issue types applies to all issue types.
                   * 
                   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                   * 204: Returned if operation is successful.
                   * 400: Returned if the request is not valid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user does not have the required permissions.
                   * 404: Returned if the custom field, context, or one or more issue types are not found.
                   */
                  $post(body: IssueTypeIds): Promise<unknown>;
                };
              };
              /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId}/option */
              option: {
                /**
                 * Method: get /rest/api/3/field/{fieldId}/context/{contextId}/option
                 * operationId: getOptionsForContext
                 * sum: Get custom field options (context)
                 * doc: Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.
                 * 
                 * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 200: Returned if the request is successful.
                 * 400: Returned if the request is not valid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the custom field is not found or the context doesn't match the custom field.
                 */
                $get(args?: {optionId?: number, onlyOptions?: boolean, startAt?: number, maxResults?: number}): Promise<PageBeanCustomFieldContextOption>;
                /**
                 * Method: post /rest/api/3/field/{fieldId}/context/{contextId}/option
                 * operationId: createCustomFieldOption
                 * sum: Create custom field options (context)
                 * doc: Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.
                 * 
                 * The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.
                 * 
                 * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 200: Returned if the request is successful.
                 * 400: Returned if the request is not valid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the custom field is not found or the context doesn't match the custom field.
                 */
                $post(body: BulkCustomFieldOptionCreateRequest): Promise<CustomFieldCreatedContextOptionsList>;
                /**
                 * Method: put /rest/api/3/field/{fieldId}/context/{contextId}/option
                 * operationId: updateCustomFieldOption
                 * sum: Update custom field options (context)
                 * doc: Updates the options of a custom field.
                 * 
                 * If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.
                 * 
                 * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 200: Returned if the request is successful.
                 * 400: Returned if the request is not valid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the field, context, or one or more options is not found.
                 */
                $put(body: BulkCustomFieldOptionUpdateRequest): Promise<CustomFieldUpdatedContextOptionsList>;
                /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId}/option/move */
                move: {
                  /**
                   * Method: put /rest/api/3/field/{fieldId}/context/{contextId}/option/move
                   * operationId: reorderCustomFieldOptions
                   * sum: Reorder custom field options (context)
                   * doc: Changes the order of custom field options or cascading options in a context.
                   * 
                   * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
                   * 
                   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                   * 204: Returned if options are reordered.
                   * 400: Returned if the request is not valid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user does not have the necessary permission.
                   * 404: Returned if the field, the context, or one or more of the options is not found..
                   */
                  $put(body: OrderOfCustomFieldOptions): Promise<unknown>;
                };
                /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId} */
                "$"(optionId: string): {
                  /**
                   * Method: delete /rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}
                   * operationId: deleteCustomFieldOption
                   * sum: Delete custom field options (context)
                   * doc: Deletes a custom field option.
                   * 
                   * Options with cascading options cannot be deleted without deleting the cascading options first.
                   * 
                   * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
                   * 
                   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                   * 204: Returned if the option is deleted.
                   * 400: Returned if the request is not valid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user does not have the necessary permission.
                   * 404: Returned if the field, the context, or the option is not found.
                   */
                  $delete(): Promise<unknown>;
                  /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}/issue */
                  issue: {
                    /**
                     * Method: delete /rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}/issue
                     * operationId: replaceCustomFieldOption
                     * sum: Replace custom field options
                     * doc: Replaces the options of a custom field.
                     * 
                     * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.
                     * 
                     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                     * 303: Returned if the long-running task to deselect the option is started.
                     * 400: Returned if the request is not valid.
                     * 403: Returned if the user does not have the necessary permission.
                     * 404: Returned if the field is not found or does not support options, or the options to be replaced are not found.
                     */
                    $delete(args?: {replaceWith?: number, jql?: string}): Promise<void>;
                  };
                };
              };
              /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId}/project */
              project: {
                /**
                 * Method: put /rest/api/3/field/{fieldId}/context/{contextId}/project
                 * operationId: assignProjectsToCustomFieldContext
                 * sum: Assign custom field context to projects
                 * doc: Assigns a custom field context to projects.
                 * 
                 * If any project in the request is assigned to any context of the custom field, the operation fails.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 204: Returned if operation is successful.
                 * 400: Returned if the request is not valid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the required permissions.
                 * 404: Returned if the custom field, context, or project is not found.
                 */
                $put(body: ProjectIds): Promise<unknown>;
                /* Endpoint path: /rest/api/3/field/{fieldId}/context/{contextId}/project/remove */
                remove: {
                  /**
                   * Method: post /rest/api/3/field/{fieldId}/context/{contextId}/project/remove
                   * operationId: removeCustomFieldContextFromProjects
                   * sum: Remove custom field context from projects
                   * doc: Removes a custom field context from projects.
                   * 
                   * A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.
                   * 
                   * If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.
                   * 
                   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                   * 204: Returned if the custom field context is removed from the projects.
                   * 400: Returned if the request is not valid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user does not have the required permissions.
                   * 404: Returned if the custom field, context, or one or more projects are not found.
                   */
                  $post(body: ProjectIds): Promise<unknown>;
                };
              };
            };
          };
          /* Endpoint path: /rest/api/3/field/{fieldId}/contexts */
          contexts: {
            /**
             * Method: get /rest/api/3/field/{fieldId}/contexts
             * operationId: getContextsForFieldDeprecated
             * sum: Get contexts for a field
             * doc: Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             */
            $get(args?: {startAt?: number, maxResults?: number}): Promise<PageBeanContext>;
          };
          /* Endpoint path: /rest/api/3/field/{fieldId}/screens */
          screens: {
            /**
             * Method: get /rest/api/3/field/{fieldId}/screens
             * operationId: getScreensForField
             * sum: Get screens for a field
             * doc: Returns a [paginated](#pagination) list of the screens a field is used in.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             */
            $get(args?: {startAt?: number, maxResults?: number, expand?: string}): Promise<PageBeanScreenWithTab>;
          };
        };
        /* Endpoint path: /rest/api/3/field/{fieldKey} */
        "$"(fieldKey: string): {
          /* Endpoint path: /rest/api/3/field/{fieldKey}/option */
          option: {
            /**
             * Method: get /rest/api/3/field/{fieldKey}/option
             * operationId: getAllIssueFieldOptions
             * sum: Get all issue field options
             * doc: Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.
             * 
             * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
             * 200: Returned if the request is successful.
             * 400: Returned if the field is not found or does not support options.
             * 403: Returned if the request is not authenticated as a Jira administrator or the app that provided the field.
             */
            $get(args?: {startAt?: number, maxResults?: number}): Promise<PageBeanIssueFieldOption>;
            /**
             * Method: post /rest/api/3/field/{fieldKey}/option
             * operationId: createIssueFieldOption
             * sum: Create issue field option
             * doc: Creates an option for a select list issue field.
             * 
             * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
             * 
             * Each field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
             * 200: Returned if the request is successful.
             * 400: Returned if the option is invalid.
             * 403: Returned if the request is not authenticated as a Jira administrator or the app that provided the field.
             * 404: Returned if the field is not found or does not support options.
             */
            $post(body: IssueFieldOptionCreateBean): Promise<IssueFieldOption>;
            /* Endpoint path: /rest/api/3/field/{fieldKey}/option/suggestions */
            suggestions: {
              /* Endpoint path: /rest/api/3/field/{fieldKey}/option/suggestions/edit */
              edit: {
                /**
                 * Method: get /rest/api/3/field/{fieldKey}/option/suggestions/edit
                 * operationId: getSelectableIssueFieldOptions
                 * sum: Get selectable issue field options
                 * doc: Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.
                 * 
                 * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
                 * 
                 * **[Permissions](#permissions) required:** Permission to access Jira.
                 * 200: Returned if the request is successful.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 404: Returned if the field is not found or does not support options.
                 */
                $get(args?: {startAt?: number, maxResults?: number, projectId?: number}): Promise<PageBeanIssueFieldOption>;
              };
              /* Endpoint path: /rest/api/3/field/{fieldKey}/option/suggestions/search */
              search: {
                /**
                 * Method: get /rest/api/3/field/{fieldKey}/option/suggestions/search
                 * operationId: getVisibleIssueFieldOptions
                 * sum: Get visible issue field options
                 * doc: Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.
                 * 
                 * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
                 * 
                 * **[Permissions](#permissions) required:** Permission to access Jira.
                 * 200: Returned if the request is successful.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 404: Returned if the field is not found or does not support options.
                 */
                $get(args?: {startAt?: number, maxResults?: number, projectId?: number}): Promise<PageBeanIssueFieldOption>;
              };
            };
            /* Endpoint path: /rest/api/3/field/{fieldKey}/option/{optionId} */
            "$"(optionId: string): {
              /**
               * Method: get /rest/api/3/field/{fieldKey}/option/{optionId}
               * operationId: getIssueFieldOption
               * sum: Get issue field option
               * doc: Returns an option from a select list issue field.
               * 
               * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
               * 200: Returned if the requested option is returned.
               * 400: Returned if the field is not found or does not support options.
               * 403: Returned if the request is not authenticated as a Jira administrator or the app that provided the field.
               * 404: Returned if the option is not found.
               */
              $get(): Promise<IssueFieldOption>;
              /**
               * Method: delete /rest/api/3/field/{fieldKey}/option/{optionId}
               * operationId: deleteIssueFieldOption
               * sum: Delete issue field option
               * doc: Deletes an option from a select list issue field.
               * 
               * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
               * 204: Returned if the field option is deleted.
               * 403: Returned if the request is not authenticated as a Jira administrator or the app that provided the field.
               * 404: Returned if the field or option is not found.
               * 409: Returned if the option is selected for the field in any issue.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/field/{fieldKey}/option/{optionId}
               * operationId: updateIssueFieldOption
               * sum: Update issue field option
               * doc: Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.
               * 
               * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
               * 200: Returned if the option is updated or created.
               * 400: Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter.
               * 403: Returned if the request is not authenticated as a Jira administrator or the app that provided the field.
               * 404: Returned if field is not found.
               */
              $put(body: IssueFieldOption): Promise<IssueFieldOption>;
              /* Endpoint path: /rest/api/3/field/{fieldKey}/option/{optionId}/issue */
              issue: {
                /**
                 * Method: delete /rest/api/3/field/{fieldKey}/option/{optionId}/issue
                 * operationId: replaceIssueFieldOption
                 * sum: Replace issue field option
                 * doc: Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.
                 * 
                 * Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
                 * 
                 * This is an [asynchronous operation](#async). The response object contains a link to the long-running task.
                 * 
                 * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
                 * 303: Returned if the long-running task to deselect the option is started.
                 * 400: Returned if the request is not valid.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the field is not found or does not support options, or the options to be replaced are not found.
                 */
                $delete(args?: {replaceWith?: number, jql?: string, overrideScreenSecurity?: boolean, overrideEditableFlag?: boolean}): Promise<void>;
              };
            };
          };
        };
        /* Endpoint path: /rest/api/3/field/{id} */
        "$"(id: string): {
          /**
           * Method: delete /rest/api/3/field/{id}
           * operationId: deleteCustomField
           * sum: Delete custom field
           * doc: Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
           * 
           * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 303: Returned if the request is successful.
           * 400: Returned if any of these are true:
           * 
           *  *  The custom field is locked.
           *  *  The custom field is used in a issue security scheme or a permission scheme.
           *  *  The custom field ID format is incorrect.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the custom field is not found.
           * 409: Returned if a task to delete the custom field is running.
           */
          $delete(): Promise<void>;
          /* Endpoint path: /rest/api/3/field/{id}/restore */
          restore: {
            /**
             * Method: post /rest/api/3/field/{id}/restore
             * operationId: restoreCustomField
             * sum: Restore custom field from trash
             * doc: Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the custom field is not found.
             */
            $post(): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/field/{id}/trash */
          trash: {
            /**
             * Method: post /rest/api/3/field/{id}/trash
             * operationId: trashCustomField
             * sum: Move custom field to trash
             * doc: Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the custom field is not found.
             */
            $post(): Promise<unknown>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/fieldconfiguration */
      fieldconfiguration: {
        /**
         * Method: get /rest/api/3/fieldconfiguration
         * operationId: getAllFieldConfigurations
         * sum: Get all field configurations
         * doc: Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:
         * 
         *  *  a list of field configuration item IDs.
         *  *  whether the field configuration is a default.
         *  *  whether the field configuration name or description contains a query string.
         * 
         * Only field configurations used in company-managed (classic) projects are returned.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $get(args?: {startAt?: number, maxResults?: number, id?: Array<number>, isDefault?: boolean, query?: string}): Promise<PageBeanFieldConfigurationDetails>;
        /**
         * Method: post /rest/api/3/fieldconfiguration
         * operationId: createFieldConfiguration
         * sum: Create field configuration
         * doc: Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.
         * 
         * This operation can only create configurations for use in company-managed (classic) projects.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $post(body: FieldConfigurationDetails): Promise<FieldConfiguration>;
        /* Endpoint path: /rest/api/3/fieldconfiguration/{id} */
        "$"(id: string): {
          /**
           * Method: delete /rest/api/3/fieldconfiguration/{id}
           * operationId: deleteFieldConfiguration
           * sum: Delete field configuration
           * doc: Deletes a field configuration.
           * 
           * This operation can only delete configurations used in company-managed (classic) projects.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the field configuration is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/fieldconfiguration/{id}
           * operationId: updateFieldConfiguration
           * sum: Update field configuration
           * doc: Updates a field configuration. The name and the description provided in the request override the existing values.
           * 
           * This operation can only update configurations used in company-managed (classic) projects.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the field configuration is not found.
           */
          $put(body: FieldConfigurationDetails): Promise<unknown>;
          /* Endpoint path: /rest/api/3/fieldconfiguration/{id}/fields */
          fields: {
            /**
             * Method: get /rest/api/3/fieldconfiguration/{id}/fields
             * operationId: getFieldConfigurationItems
             * sum: Get field configuration items
             * doc: Returns a [paginated](#pagination) list of all fields for a configuration.
             * 
             * Only the fields from configurations used in company-managed (classic) projects are returned.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the field configuration is not found.
             */
            $get(args?: {startAt?: number, maxResults?: number}): Promise<PageBeanFieldConfigurationItem>;
            /**
             * Method: put /rest/api/3/fieldconfiguration/{id}/fields
             * operationId: updateFieldConfigurationItems
             * sum: Update field configuration items
             * doc: Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.
             * 
             * This operation can only update field configurations used in company-managed (classic) projects.
             * 
             * The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the field configuration is not found.
             */
            $put(body: FieldConfigurationItemsDetails): Promise<unknown>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/fieldconfigurationscheme */
      fieldconfigurationscheme: {
        /**
         * Method: get /rest/api/3/fieldconfigurationscheme
         * operationId: getAllFieldConfigurationSchemes
         * sum: Get all field configuration schemes
         * doc: Returns a [paginated](#pagination) list of field configuration schemes.
         * 
         * Only field configuration schemes used in classic projects are returned.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permissions.
         */
        $get(args?: {startAt?: number, maxResults?: number, id?: Array<number>}): Promise<PageBeanFieldConfigurationScheme>;
        /**
         * Method: post /rest/api/3/fieldconfigurationscheme
         * operationId: createFieldConfigurationScheme
         * sum: Create field configuration scheme
         * doc: Creates a field configuration scheme.
         * 
         * This operation can only create field configuration schemes used in company-managed (classic) projects.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permissions.
         */
        $post(body: UpdateFieldConfigurationSchemeDetails): Promise<FieldConfigurationScheme>;
        /* Endpoint path: /rest/api/3/fieldconfigurationscheme/mapping */
        mapping: {
          /**
           * Method: get /rest/api/3/fieldconfigurationscheme/mapping
           * operationId: getFieldConfigurationSchemeMappings
           * sum: Get field configuration issue type items
           * doc: Returns a [paginated](#pagination) list of field configuration issue type items.
           * 
           * Only items used in classic projects are returned.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if no field configuration schemes are found.
           */
          $get(args?: {startAt?: number, maxResults?: number, fieldConfigurationSchemeId?: Array<number>}): Promise<PageBeanFieldConfigurationIssueTypeItem>;
        };
        /* Endpoint path: /rest/api/3/fieldconfigurationscheme/project */
        project: {
          /**
           * Method: get /rest/api/3/fieldconfigurationscheme/project
           * operationId: getFieldConfigurationSchemeProjectMapping
           * sum: Get field configuration schemes for projects
           * doc: Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.
           * 
           * The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.
           * 
           * Only field configuration schemes used in classic projects are returned.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $get(args: {startAt?: number, maxResults?: number, projectId: Array<number>}): Promise<PageBeanFieldConfigurationSchemeProjects>;
          /**
           * Method: put /rest/api/3/fieldconfigurationscheme/project
           * operationId: assignFieldConfigurationSchemeToProject
           * sum: Assign field configuration scheme to project
           * doc: Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
           * 
           * Field configuration schemes can only be assigned to classic projects.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the project is not a classic project.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permissions.
           * 404: Returned if the project is missing.
           */
          $put(body: FieldConfigurationSchemeProjectAssociation): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/fieldconfigurationscheme/{id} */
        "$"(id: string): {
          /**
           * Method: delete /rest/api/3/fieldconfigurationscheme/{id}
           * operationId: deleteFieldConfigurationScheme
           * sum: Delete field configuration scheme
           * doc: Deletes a field configuration scheme.
           * 
           * This operation can only delete field configuration schemes used in company-managed (classic) projects.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the field configuration scheme is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/fieldconfigurationscheme/{id}
           * operationId: updateFieldConfigurationScheme
           * sum: Update field configuration scheme
           * doc: Updates a field configuration scheme.
           * 
           * This operation can only update field configuration schemes used in company-managed (classic) projects.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permissions.
           * 404: Returned if the field configuration scheme is not found.
           */
          $put(body: UpdateFieldConfigurationSchemeDetails): Promise<unknown>;
          /* Endpoint path: /rest/api/3/fieldconfigurationscheme/{id}/mapping */
          mapping: {
            /**
             * Method: put /rest/api/3/fieldconfigurationscheme/{id}/mapping
             * operationId: setFieldConfigurationSchemeMapping
             * sum: Assign issue types to field configurations
             * doc: Assigns issue types to field configurations on field configuration scheme.
             * 
             * This operation can only modify field configuration schemes used in company-managed (classic) projects.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the field configuration scheme, the field configuration, or the issue type is not found.
             */
            $put(body: AssociateFieldConfigurationsWithIssueTypesRequest): Promise<unknown>;
            /* Endpoint path: /rest/api/3/fieldconfigurationscheme/{id}/mapping/delete */
            delete: {
              /**
               * Method: post /rest/api/3/fieldconfigurationscheme/{id}/mapping/delete
               * operationId: removeIssueTypesFromGlobalFieldConfigurationScheme
               * sum: Remove issue types from field configuration scheme
               * doc: Removes issue types from the field configuration scheme.
               * 
               * This operation can only modify field configuration schemes used in company-managed (classic) projects.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the field configuration scheme or the issue types are not found.
               */
              $post(body: IssueTypeIdsToRemove): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/filter */
      filter: {
        /**
         * Method: post /rest/api/3/filter
         * operationId: createFilter
         * sum: Create filter
         * doc: Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 400: Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $post(body: Filter): Promise<Filter>;
        /* Endpoint path: /rest/api/3/filter/defaultShareScope */
        defaultShareScope: {
          /**
           * Method: get /rest/api/3/filter/defaultShareScope
           * operationId: getDefaultShareScope
           * sum: Get default share scope
           * doc: Returns the default sharing settings for new filters and dashboards for a user.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(): Promise<DefaultShareScope>;
          /**
           * Method: put /rest/api/3/filter/defaultShareScope
           * operationId: setDefaultShareScope
           * sum: Set default share scope
           * doc: Sets the default sharing for new filters and dashboards for a user.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 400: Returned if an invalid scope is set.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $put(body: DefaultShareScope): Promise<DefaultShareScope>;
        };
        /* Endpoint path: /rest/api/3/filter/favourite */
        favourite: {
          /**
           * Method: get /rest/api/3/filter/favourite
           * operationId: getFavouriteFilters
           * sum: Get favorite filters
           * doc: Returns the visible favorite filters of the user.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:
           * 
           *  *  owned by the user.
           *  *  shared with a group that the user is a member of.
           *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
           *  *  shared with a public project.
           *  *  shared with the public.
           * 
           * For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {expand?: string}): Promise<Array<Filter>>;
        };
        /* Endpoint path: /rest/api/3/filter/my */
        my: {
          /**
           * Method: get /rest/api/3/filter/my
           * operationId: getMyFilters
           * sum: Get my filters
           * doc: Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:
           * 
           *  *  owned by the user.
           *  *  shared with a group that the user is a member of.
           *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
           *  *  shared with a public project.
           *  *  shared with the public.
           * 
           * For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {expand?: string, includeFavourites?: boolean}): Promise<Array<Filter>>;
        };
        /* Endpoint path: /rest/api/3/filter/search */
        search: {
          /**
           * Method: get /rest/api/3/filter/search
           * operationId: getFiltersPaginated
           * sum: Search for filters
           * doc: Returns a [paginated](#pagination) list of filters. Use this operation to get:
           * 
           *  *  specific filters, by defining `id` only.
           *  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:
           * 
           *  *  filters owned by the user.
           *  *  filters shared with a group that the user is a member of.
           *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
           *  *  filters shared with a public project.
           *  *  filters shared with the public.
           * 200: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  `owner` and `accountId` are provided.
           *  *  `expand` includes an invalid value.
           *  *  `orderBy` is invalid.
           *  *  `id` identifies more than 200 filter IDs.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {filterName?: string, accountId?: string, owner?: string, groupname?: string, groupId?: string, projectId?: number, id?: Array<number>, orderBy?: string, startAt?: number, maxResults?: number, expand?: string, overrideSharePermissions?: boolean}): Promise<PageBeanFilterDetails>;
        };
        /* Endpoint path: /rest/api/3/filter/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/filter/{id}
           * operationId: getFilter
           * sum: Get filter
           * doc: Returns a filter.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:
           * 
           *  *  owned by the user.
           *  *  shared with a group that the user is a member of.
           *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
           *  *  shared with a public project.
           *  *  shared with the public.
           * 200: Returned if the request is successful.
           * 400: Returned if the filter is not found or the user does not have permission to view it.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {expand?: string, overrideSharePermissions?: boolean}): Promise<Filter>;
          /**
           * Method: delete /rest/api/3/filter/{id}
           * operationId: deleteFilter
           * sum: Delete filter
           * doc: Delete a filter.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the filter is not found.
           * 401: Returned if the user does not have permission to delete the filter.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/filter/{id}
           * operationId: updateFilter
           * sum: Update filter
           * doc: Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.
           * 200: Returned if the request is successful.
           * 400: Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $put(body: Filter): Promise<Filter>;
          /* Endpoint path: /rest/api/3/filter/{id}/columns */
          columns: {
            /**
             * Method: get /rest/api/3/filter/{id}/columns
             * operationId: getColumns
             * sum: Get columns
             * doc: Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** None, however, column details are only returned for:
             * 
             *  *  filters owned by the user.
             *  *  filters shared with a group that the user is a member of.
             *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
             *  *  filters shared with a public project.
             *  *  filters shared with the public.
             * 200: Returned if the request is successful.
             * 400: Returned if the user does not have permission to view the filter.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if a column configuration is not set for the filter.
             */
            $get(): Promise<Array<ColumnItem>>;
            /**
             * Method: delete /rest/api/3/filter/{id}/columns
             * operationId: resetColumns
             * sum: Reset columns
             * doc: Reset the user's column configuration for the filter to the default.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:
             * 
             *  *  filters owned by the user.
             *  *  filters shared with a group that the user is a member of.
             *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
             *  *  filters shared with a public project.
             *  *  filters shared with the public.
             * 204: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  the filter is not found.
             *  *  the user does not have permission to view the filter.
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $delete(): Promise<unknown>;
            /**
             * Method: put /rest/api/3/filter/{id}/columns
             * operationId: setColumns
             * sum: Set columns
             * doc: Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.
             * 
             * The parameters for this resource are expressed as HTML form data. For example, in curl:
             * 
             * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:
             * 
             *  *  filters owned by the user.
             *  *  filters shared with a group that the user is a member of.
             *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
             *  *  filters shared with a public project.
             *  *  filters shared with the public.
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  a non-navigable field is set as a column.
             *  *  the user does not have permission to view the filter.
             * 403: Returned if the requesting user is not an owner of the filter.
             */
            $put(body: ColumnRequestBody): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/filter/{id}/favourite */
          favourite: {
            /**
             * Method: delete /rest/api/3/filter/{id}/favourite
             * operationId: deleteFavouriteForFilter
             * sum: Remove filter as favorite
             * doc: Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira.
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  the filter is not found.
             *  *  the user does not have permission to view the filter.
             */
            $delete(args?: {expand?: string}): Promise<Filter>;
            /**
             * Method: put /rest/api/3/filter/{id}/favourite
             * operationId: setFavouriteForFilter
             * sum: Add filter as favorite
             * doc: Add a filter as a favorite for the user.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:
             * 
             *  *  filters owned by the user.
             *  *  filters shared with a group that the user is a member of.
             *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
             *  *  filters shared with a public project.
             *  *  filters shared with the public.
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  the filter is not found.
             *  *  the user does not have permission to favorite the filter.
             */
            $put(): Promise<Filter>;
          };
          /* Endpoint path: /rest/api/3/filter/{id}/owner */
          owner: {
            /**
             * Method: put /rest/api/3/filter/{id}/owner
             * operationId: changeFilterOwner
             * sum: Change filter owner
             * doc: Changes the owner of the filter.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned when:
             * 
             *  *  The new owner of the filter owns a filter with the same name.
             *  *  An attempt is made to change owner of the default filter.
             * 403: Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission.
             * 404: Returned if the filter or the new owner of the filter is not found.
             */
            $put(body: ChangeFilterOwner): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/filter/{id}/permission */
          permission: {
            /**
             * Method: get /rest/api/3/filter/{id}/permission
             * operationId: getSharePermissions
             * sum: Get share permissions
             * doc: Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** None, however, share permissions are only returned for:
             * 
             *  *  filters owned by the user.
             *  *  filters shared with a group that the user is a member of.
             *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
             *  *  filters shared with a public project.
             *  *  filters shared with the public.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  the filter is not found.
             *  *  the user does not have permission to view the filter.
             */
            $get(): Promise<Array<SharePermission>>;
            /**
             * Method: post /rest/api/3/filter/{id}/permission
             * operationId: addSharePermission
             * sum: Add share permission
             * doc: Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.
             * 
             * Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).
             * 
             * **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
             * 201: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.
             *  *  the user does not own the filter.
             *  *  the user does not have the required permissions.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  the filter is not found.
             *  *  the user does not have permission to view the filter.
             */
            $post(body: SharePermissionInputBean): Promise<Array<SharePermission>>;
            /* Endpoint path: /rest/api/3/filter/{id}/permission/{permissionId} */
            "$"(permissionId: string): {
              /**
               * Method: get /rest/api/3/filter/{id}/permission/{permissionId}
               * operationId: getSharePermission
               * sum: Get share permission
               * doc: Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** None, however, a share permission is only returned for:
               * 
               *  *  filters owned by the user.
               *  *  filters shared with a group that the user is a member of.
               *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
               *  *  filters shared with a public project.
               *  *  filters shared with the public.
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if:
               * 
               *  *  the filter is not found.
               *  *  the permission is not found.
               *  *  the user does not have permission to view the filter.
               */
              $get(): Promise<SharePermission>;
              /**
               * Method: delete /rest/api/3/filter/{id}/permission/{permissionId}
               * operationId: deleteSharePermission
               * sum: Delete share permission
               * doc: Deletes a share permission from a filter.
               * 
               * **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
               * 204: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if:
               * 
               *  *  the filter is not found.
               *  *  the user does not own the filter.
               */
              $delete(): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/group */
      group: {
        /**
         * Method: get /rest/api/3/group
         * operationId: getGroup
         * sum: Get group
         * doc: This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).
         * 
         * Returns all users in a group.
         * 
         * **[Permissions](#permissions) required:** either of:
         * 
         *  *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 400: Returned if the group name is not specified.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the calling user does not have the Administer Jira global permission.
         * 404: Returned if the group is not found.
         */
        $get(args?: {groupname?: string, groupId?: string, expand?: string}): Promise<Group>;
        /**
         * Method: delete /rest/api/3/group
         * operationId: removeGroup
         * sum: Remove group
         * doc: Deletes a group.
         * 
         * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
         * 200: Returned if the request is successful.
         * 400: Returned if the group name is not specified.
         * 401: Returned if the authentication credentials are incorrect or missing from the request.
         * 403: Returned if the user does not have the necessary permission.
         * 404: Returned if the group is not found.
         */
        $delete(args?: {groupname?: string, groupId?: string, swapGroup?: string, swapGroupId?: string}): Promise<unknown>;
        /**
         * Method: post /rest/api/3/group
         * operationId: createGroup
         * sum: Create group
         * doc: Creates a group.
         * 
         * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
         * 201: Returned if the request is successful.
         * 400: Returned if group name is not specified or the group name is in use.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $post(body: AddGroupBean): Promise<Group>;
        /* Endpoint path: /rest/api/3/group/bulk */
        bulk: {
          /**
           * Method: get /rest/api/3/group/bulk
           * operationId: bulkGetGroups
           * sum: Bulk get groups
           * doc: Returns a [paginated](#pagination) list of groups.
           * 
           * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 500: Returned if the group with the given access level can't be retrieved.
           */
          $get(args?: {startAt?: number, maxResults?: number, groupId?: Array<string>, groupName?: Array<string>, accessType?: string, applicationKey?: string}): Promise<PageBeanGroupDetails>;
        };
        /* Endpoint path: /rest/api/3/group/member */
        member: {
          /**
           * Method: get /rest/api/3/group/member
           * operationId: getUsersFromGroup
           * sum: Get users from group
           * doc: Returns a [paginated](#pagination) list of all users in a group.
           * 
           * Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.
           * 
           * **[Permissions](#permissions) required:** either of:
           * 
           *  *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the group name is not specified.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the calling user does not have the Administer Jira global permission.
           * 404: Returned if the group is not found.
           */
          $get(args?: {groupname?: string, groupId?: string, includeInactiveUsers?: boolean, startAt?: number, maxResults?: number}): Promise<PageBeanUserDetails>;
        };
        /* Endpoint path: /rest/api/3/group/user */
        user: {
          /**
           * Method: delete /rest/api/3/group/user
           * operationId: removeUserFromGroup
           * sum: Remove user from group
           * doc: Removes a user from a group.
           * 
           * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
           * 200: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  `groupName` is missing.
           *  *  `accountId` is missing.
           * 401: Returned if the authentication credentials are incorrect or missing from the request.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the group or user are not found.
           */
          $delete(args: {groupname?: string, groupId?: string, username?: string, accountId: string}): Promise<unknown>;
          /**
           * Method: post /rest/api/3/group/user
           * operationId: addUserToGroup
           * sum: Add user to group
           * doc: Adds a user to a group.
           * 
           * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
           * 201: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  `groupname` is not provided.
           *  *  `accountId` is missing.
           * 401: Returned if the authentication credentials are incorrect or missing from the request.
           * 403: Returned if the calling user does not have the necessary permission.
           * 404: Returned if the group or user are not found.
           */
          $post(body: UpdateUserToGroupBean): Promise<Group>;
        };
      };
      /* Endpoint path: /rest/api/3/groups */
      groups: {
        /* Endpoint path: /rest/api/3/groups/picker */
        picker: {
          /**
           * Method: get /rest/api/3/groups/picker
           * operationId: findGroups
           * sum: Find groups
           * doc: Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.
           * 
           * The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.
           * 
           * The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.
           * 
           * *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
           * 200: Returned if the request is successful.
           */
          $get(args?: {accountId?: string, query?: string, exclude?: Array<string>, excludeId?: Array<string>, maxResults?: number, caseInsensitive?: boolean, userName?: string}): Promise<FoundGroups>;
        };
      };
      /* Endpoint path: /rest/api/3/groupuserpicker */
      groupuserpicker: {
        /**
         * Method: get /rest/api/3/groupuserpicker
         * operationId: findUsersAndGroups
         * sum: Find users and groups
         * doc: Returns a list of users and groups matching a string. The string is used:
         * 
         *  *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
         *  *  for groups, to find a case-sensitive match with group name.
         * 
         * For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.
         * 
         * Optionally, the search can be refined to:
         * 
         *  *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
         *     
         *      *  projects.
         *      *  issue types.
         *     
         *     If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
         *  *  not return Connect app users and groups.
         *  *  return groups that have a case-insensitive match with the query.
         * 
         * The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
         * 200: Returned if the request is successful.
         * 400: Returned if the query parameter is not provided.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         * 429: Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.
         */
        $get(args: {query: string, maxResults?: number, showAvatar?: boolean, fieldId?: string, projectId?: Array<string>, issueTypeId?: Array<string>, avatarSize?: string, caseInsensitive?: boolean, excludeConnectAddons?: boolean}): Promise<FoundUsersAndGroups>;
      };
      /* Endpoint path: /rest/api/3/instance */
      instance: {
        /* Endpoint path: /rest/api/3/instance/license */
        license: {
          /**
           * Method: get /rest/api/3/instance/license
           * operationId: getLicense
           * sum: Get license
           * doc: Returns licensing information about the Jira instance.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(): Promise<License>;
        };
      };
      /* Endpoint path: /rest/api/3/issue */
      issue: {
        /**
         * Method: post /rest/api/3/issue
         * operationId: createIssue
         * sum: Create issue
         * doc: Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
         * 
         * The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
         * 
         * Creating a subtask differs from creating an issue as follows:
         * 
         *  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
         *  *  `parent` must contain the ID or key of the parent issue.
         * 
         * In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
         * 
         * **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
         * 201: Returned if the request is successful.
         * 400: Returned if the request:
         * 
         *  *  is missing required fields.
         *  *  contains invalid field values.
         *  *  contains fields that cannot be set for the issue type.
         *  *  is by a user who does not have the necessary permission.
         *  *  is to create a subtype in a project different that of the parent issue.
         *  *  is for a subtask when the option to create subtasks is disabled.
         *  *  is invalid for any other reason.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         * 422: Returned if a configuration problem prevents the creation of the issue. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*
         */
        $post(body: IssueUpdateDetails): Promise<CreatedIssue>;
        /* Endpoint path: /rest/api/3/issue/archive */
        archive: {
          /**
           * Method: post /rest/api/3/issue/archive
           * operationId: archiveIssuesAsync
           * sum: Archive issue(s) by JQL
           * doc: Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.
           * 
           * You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.
           * 
           * **Note that:**
           * 
           *  *  you can't archive subtasks directly, only through their parent issues
           *  *  you can only archive issues from software, service management, and business projects
           * 
           * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
           * 
           * **License required:** Premium or Enterprise
           * 
           * **Signed-in users only:** This API can't be accessed anonymously.
           * 
           * **Rate limiting:** Only a single request per jira instance can be active at any given time.
           * 
           *   
           *
           * 202: Returns the URL to check the status of the submitted request.
           * 400: Returned if no issues were archived due to a bad request, for example an invalid JQL query.
           * 401: Returned if no issues were archived because the provided authentication credentials are either missing or invalid.
           * 403: Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions.
           * 412: Returned if a request to archive issue(s) is already running.
           */
          $post(body: ArchiveIssueAsyncRequest): Promise<string>;
          /**
           * Method: put /rest/api/3/issue/archive
           * operationId: archiveIssues
           * sum: Archive issue(s) by issue ID/key
           * doc: Enables admins to archive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) archived in the process and the errors encountered, if any.
           * 
           * **Note that:**
           * 
           *  *  you can't archive subtasks directly, only through their parent issues
           *  *  you can only archive issues from software, service management, and business projects
           * 
           * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
           * 
           * **License required:** Premium or Enterprise
           * 
           * **Signed-in users only:** This API can't be accessed anonymously.
           * 
           *   
           *
           * 200: Returned if there is at least one valid issue to archive in the request. The return message will include the count of archived issues and subtasks, as well as error details for issues which failed to get archived.
           * 400: Returned if none of the issues in the request can be archived. Possible reasons:
           * 
           *  *  the issues weren't found
           *  *  the issues are subtasks
           *  *  the issues belong to unlicensed projects
           *  *  the issues belong to archived projects
           * 401: Returned if no issues were archived because the provided authentication credentials are either missing or invalid.
           * 403: Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions.
           * 412: Returned if one or more issues were successfully archived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000.
           */
          $put(body: IssueArchivalSyncRequest): Promise<IssueArchivalSyncResponse>;
        };
        /* Endpoint path: /rest/api/3/issue/bulk */
        bulk: {
          /**
           * Method: post /rest/api/3/issue/bulk
           * operationId: createIssues
           * sum: Bulk create issue
           * doc: Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.
           * 
           * The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
           * 
           * Creating a subtask differs from creating an issue as follows:
           * 
           *  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
           *  *  `parent` the must contain the ID or key of the parent issue.
           * 
           * **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
           * 201: Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:
           * 
           *  *  is missing required fields.
           *  *  contains invalid field values.
           *  *  contains fields that cannot be set for the issue type.
           *  *  is by a user who does not have the necessary permission.
           *  *  is to create a subtype in a project different that of the parent issue.
           *  *  is for a subtask when the option to create subtasks is disabled.
           *  *  is invalid for any other reason.
           * 400: Returned if all requests are invalid. Requests may be unsuccessful when they:
           * 
           *  *  are missing required fields.
           *  *  contain invalid field values.
           *  *  contain fields that cannot be set for the issue type.
           *  *  are by a user who does not have the necessary permission.
           *  *  are to create a subtype in a project different that of the parent issue.
           *  *  is for a subtask when the option to create subtasks is disabled.
           *  *  are invalid for any other reason.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $post(body: IssuesUpdateBean): Promise<CreatedIssues>;
        };
        /* Endpoint path: /rest/api/3/issue/createmeta */
        createmeta: {
          /**
           * Method: get /rest/api/3/issue/createmeta
           * operationId: getCreateIssueMeta
           * sum: Get create issue metadata
           * doc: Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
           * 
           * Deprecated, see [Create Issue Meta Endpoint Deprecation Notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304).
           * 
           * The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {projectIds?: Array<string>, projectKeys?: Array<string>, issuetypeIds?: Array<string>, issuetypeNames?: Array<string>, expand?: string}): Promise<IssueCreateMetadata>;
          /* Endpoint path: /rest/api/3/issue/createmeta/{projectIdOrKey} */
          "$"(projectIdOrKey: string): {
            /* Endpoint path: /rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes */
            issuetypes: {
              /**
               * Method: get /rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes
               * operationId: getCreateIssueMetaIssueTypes
               * sum: Get create metadata issue types for a project
               * doc: Returns a page of issue type metadata for a specified project. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
               * 200: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               */
              $get(args?: {startAt?: number, maxResults?: number}): Promise<PageOfCreateMetaIssueTypes>;
              /* Endpoint path: /rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId} */
              "$"(issueTypeId: string): {
                /**
                 * Method: get /rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}
                 * operationId: getCreateIssueMetaIssueTypeId
                 * sum: Get create field metadata for a project and issue type id
                 * doc: Returns a page of field metadata for a specified project and issuetype id. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
                 * 
                 * This operation can be accessed anonymously.
                 * 
                 * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
                 * 200: Returned if the request is successful.
                 * 400: Returned if the request is invalid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 */
                $get(args?: {startAt?: number, maxResults?: number}): Promise<PageOfCreateMetaIssueTypeWithField>;
              };
            };
          };
        };
        /* Endpoint path: /rest/api/3/issue/limit */
        limit: {
          /* Endpoint path: /rest/api/3/issue/limit/report */
          report: {
            /**
             * Method: get /rest/api/3/issue/limit/report
             * operationId: getIssueLimitReport
             * sum: Get issue limit report
             * doc: Returns all issues breaching and approaching per-issue limits.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) is required for the project the issues are in. Results may be incomplete otherwise
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid. Other possible reasons:
             * 
             *  *  the field queried is not supported
             *  *  the threshold is not within the supported range
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have permission to complete this request.
             */
            $get(args?: {isReturningKeys?: boolean}): Promise<IssueLimitReportResponseBean>;
          };
        };
        /* Endpoint path: /rest/api/3/issue/picker */
        picker: {
          /**
           * Method: get /rest/api/3/issue/picker
           * operationId: getIssuePickerResource
           * sum: Get issue picker suggestions
           * doc: Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.
           * 
           * This operation returns two lists:
           * 
           *  *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
           *  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {query?: string, currentJQL?: string, currentIssueKey?: string, currentProjectId?: string, showSubTasks?: boolean, showSubTaskParent?: boolean}): Promise<IssuePickerSuggestions>;
        };
        /* Endpoint path: /rest/api/3/issue/properties */
        properties: {
          /**
           * Method: post /rest/api/3/issue/properties
           * operationId: bulkSetIssuesPropertiesList
           * sum: Bulk set issues properties by list
           * doc: Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.
           * 
           * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.
           * 
           * This operation is:
           * 
           *  *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
           *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           * 303: Returned if the operation is successful.
           * 400: Return if the request is invalid or the user does not have the necessary permission.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $post(body: IssueEntityProperties): Promise<unknown>;
          /* Endpoint path: /rest/api/3/issue/properties/multi */
          multi: {
            /**
             * Method: post /rest/api/3/issue/properties/multi
             * operationId: bulkSetIssuePropertiesByIssue
             * sum: Bulk set issue properties by issue
             * doc: Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.
             * 
             * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.
             * 
             * This operation is:
             * 
             *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
             *  *  non-transactional. Updating some entities may fail. Such information will available in the task result.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 303: Returned if the operation is successful.
             * 400: Return if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect.
             * 403: Return if the user does not have the necessary permission.
             */
            $post(body: MultiIssueEntityProperties): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/issue/properties/{propertyKey} */
          "$"(propertyKey: string): {
            /**
             * Method: delete /rest/api/3/issue/properties/{propertyKey}
             * operationId: bulkDeleteIssueProperty
             * sum: Bulk delete issue property
             * doc: Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.
             * 
             * The criteria the filter used to identify eligible issues are:
             * 
             *  *  `entityIds` Only issues from this list are eligible.
             *  *  `currentValue` Only issues with the property set to this value are eligible.
             * 
             * If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.
             * 
             * If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
             * 
             * This operation is:
             * 
             *  *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
             *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             *  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
             * 303: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $delete(): Promise<void>;
            /**
             * Method: put /rest/api/3/issue/properties/{propertyKey}
             * operationId: bulkSetIssueProperty
             * sum: Bulk set issue property
             * doc: Sets a property value on multiple issues.
             * 
             * The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.
             * 
             * The issues to be updated can be specified by a filter.
             * 
             * The filter identifies issues eligible for update using these criteria:
             * 
             *  *  `entityIds` Only issues from this list are eligible.
             *  *  `currentValue` Only issues with the property set to this value are eligible.
             *  *  `hasProperty`:
             *     
             *      *  If *true*, only issues with the property are eligible.
             *      *  If *false*, only issues without the property are eligible.
             * 
             * If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.
             * 
             * If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).
             * 
             * The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
             * 
             * This operation is:
             * 
             *  *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
             *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             *  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
             * 303: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $put(body: BulkIssuePropertyUpdateRequest): Promise<unknown>;
          };
        };
        /* Endpoint path: /rest/api/3/issue/unarchive */
        unarchive: {
          /**
           * Method: put /rest/api/3/issue/unarchive
           * operationId: unarchiveIssues
           * sum: Unarchive issue(s) by issue keys/ID
           * doc: Enables admins to unarchive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) unarchived in the process and the errors encountered, if any.
           * 
           * **Note that:**
           * 
           *  *  you can't unarchive subtasks directly, only through their parent issues
           *  *  you can only unarchive issues from software, service management, and business projects
           * 
           * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
           * 
           * **License required:** Premium or Enterprise
           * 
           * **Signed-in users only:** This API can't be accessed anonymously.
           * 
           *   
           *
           * 200: Returned if there is at least one valid issue to unarchive in the request. It will return the count of unarchived issues, which also includes the count of the subtasks unarchived, and it will show the detailed errors for those issues which are not unarchived.
           * 400: Returned if none of the issues in the request are eligible to be unarchived. Possible reasons:
           * 
           *  *  the issues weren't found
           *  *  the issues are subtasks
           *  *  the issues belong to archived projects
           * 401: Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid.
           * 403: Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions.
           * 412: Returned if one or more issues were successfully unarchived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000.
           */
          $put(body: IssueArchivalSyncRequest): Promise<IssueArchivalSyncResponse>;
        };
        /* Endpoint path: /rest/api/3/issue/watching */
        watching: {
          /**
           * Method: post /rest/api/3/issue/watching
           * operationId: getIsWatchingIssueBulk
           * sum: Get is watching issue bulk
           * doc: Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.
           * 
           * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           * 200: Returned if the request is successful
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $post(body: IssueList): Promise<BulkIssueIsWatching>;
        };
        /* Endpoint path: /rest/api/3/issue/{issueIdOrKey} */
        "$"(issueIdOrKey: string): {
          /**
           * Method: get /rest/api/3/issue/{issueIdOrKey}
           * operationId: getIssue
           * sum: Get issue
           * doc: Returns the details for an issue.
           * 
           * The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the issue is not found or the user does not have permission to view it.
           */
          $get(args?: {fields?: Array<string>, fieldsByKeys?: boolean, expand?: string, properties?: Array<string>, updateHistory?: boolean, failFast?: boolean}): Promise<IssueBean>;
          /**
           * Method: delete /rest/api/3/issue/{issueIdOrKey}
           * operationId: deleteIssue
           * sum: Delete issue
           * doc: Deletes an issue.
           * 
           * An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           * 204: Returned if the request is successful.
           * 400: Returned if the issue has subtasks and `deleteSubtasks` is not set to *true*.
           * 401: Returned if the authentication credentials are incorrect.
           * 403: Returned if the user does not have permission to delete the issue.
           * 404: Returned if the issue is not found or the user does not have permission to view the issue.
           */
          $delete(args?: {deleteSubtasks?: string}): Promise<unknown>;
          /**
           * Method: put /rest/api/3/issue/{issueIdOrKey}
           * operationId: editIssue
           * sum: Edit issue
           * doc: Edits an issue. Issue properties may be updated as part of the edit. Please note that issue transition will be ignored as it is not supported yet.
           * 
           * The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).
           * 
           * The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
           * 
           * Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           * 200: Returned if the request is successful and the `returnIssue` parameter is `true`
           * 204: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  the request body is missing.
           *  *  the user does not have the necessary permission to edit one or more fields.
           *  *  the request includes one or more fields that are not found or are not associated with the issue's edit screen.
           *  *  the request includes an invalid transition.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user uses `overrideScreenSecurity` or `overrideEditableFlag` but doesn't have the necessary permission.
           * 404: Returned if the issue is not found or the user does not have permission to view it.
           * 409: Returned if the issue could not be updated due to a conflicting update. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*
           * 422: Returned if a configuration problem prevents the issue being updated. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*
           */
          $put(body: IssueUpdateDetails): Promise<unknown>;
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/assignee */
          assignee: {
            /**
             * Method: put /rest/api/3/issue/{issueIdOrKey}/assignee
             * operationId: assignIssue
             * sum: Assign issue
             * doc: Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.
             * 
             * If `name` or `accountId` is set to:
             * 
             *  *  `"-1"`, the issue is assigned to the default assignee for the project.
             *  *  `null`, the issue is set to unassigned.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 204: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  the user is not found.
             *  *  `name`, `key`, or `accountId` is missing.
             *  *  more than one of `name`, `key`, and `accountId` are provided.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the issue is not found.
             */
            $put(body: User): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/attachments */
          attachments: {
            /**
             * Method: post /rest/api/3/issue/{issueIdOrKey}/attachments
             * operationId: addAttachment
             * sum: Add attachment
             * doc: Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).
             * 
             * Note that:
             * 
             *  *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
             *  *  The name of the multipart/form-data parameter that contains the attachments must be `file`.
             * 
             * The following examples upload a file called *myfile.txt* to the issue *TEST-123*:
             * 
             * #### curl ####
             * 
             *     curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'
             *      -u 'email@example.com:<api_token>'
             *      -H 'X-Atlassian-Token: no-check'
             *      --form 'file=@"myfile.txt"'
             * 
             * #### Node.js ####
             * 
             *     // This code sample uses the 'node-fetch' and 'form-data' libraries:
             *      // https://www.npmjs.com/package/node-fetch
             *      // https://www.npmjs.com/package/form-data
             *      const fetch = require('node-fetch');
             *      const FormData = require('form-data');
             *      const fs = require('fs');
             *     
             *      const filePath = 'myfile.txt';
             *      const form = new FormData();
             *      const stats = fs.statSync(filePath);
             *      const fileSizeInBytes = stats.size;
             *      const fileStream = fs.createReadStream(filePath);
             *     
             *      form.append('file', fileStream, {knownLength: fileSizeInBytes});
             *     
             *      fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {
             *          method: 'POST',
             *          body: form,
             *          headers: {
             *              'Authorization': `Basic ${Buffer.from(
             *                  'email@example.com:'
             *              ).toString('base64')}`,
             *              'Accept': 'application/json',
             *              'X-Atlassian-Token': 'no-check'
             *          }
             *      })
             *          .then(response => {
             *              console.log(
             *                  `Response: ${response.status} ${response.statusText}`
             *              );
             *              return response.text();
             *          })
             *          .then(text => console.log(text))
             *          .catch(err => console.error(err));
             * 
             * #### Java ####
             * 
             *     // This code sample uses the  'Unirest' library:
             *      // http://unirest.io/java.html
             *      HttpResponse response = Unirest.post("https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments")
             *              .basicAuth("email@example.com", "")
             *              .header("Accept", "application/json")
             *              .header("X-Atlassian-Token", "no-check")
             *              .field("file", new File("myfile.txt"))
             *              .asJson();
             *     
             *              System.out.println(response.getBody());
             * 
             * #### Python ####
             * 
             *     # This code sample uses the 'requests' library:
             *      # http://docs.python-requests.org
             *      import requests
             *      from requests.auth import HTTPBasicAuth
             *      import json
             *     
             *      url = "https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments"
             *     
             *      auth = HTTPBasicAuth("email@example.com", "")
             *     
             *      headers = {
             *         "Accept": "application/json",
             *         "X-Atlassian-Token": "no-check"
             *      }
             *     
             *      response = requests.request(
             *         "POST",
             *         url,
             *         headers = headers,
             *         auth = auth,
             *         files = {
             *              "file": ("myfile.txt", open("myfile.txt","rb"), "application-type")
             *         }
             *      )
             *     
             *      print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")))
             * 
             * #### PHP ####
             * 
             *     // This code sample uses the 'Unirest' library:
             *      // http://unirest.io/php.html
             *      Unirest\Request::auth('email@example.com', '');
             *     
             *      $headers = array(
             *        'Accept' => 'application/json',
             *        'X-Atlassian-Token' => 'no-check'
             *      );
             *     
             *      $parameters = array(
             *        'file' => File::add('myfile.txt')
             *      );
             *     
             *      $response = Unirest\Request::post(
             *        'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',
             *        $headers,
             *        $parameters
             *      );
             *     
             *      var_dump($response)
             * 
             * #### Forge ####
             * 
             *     // This sample uses Atlassian Forge and the `form-data` library.
             *      // https://developer.atlassian.com/platform/forge/
             *      // https://www.npmjs.com/package/form-data
             *      import api from "@forge/api";
             *      import FormData from "form-data";
             *     
             *      const form = new FormData();
             *      form.append('file', fileStream, {knownLength: fileSizeInBytes});
             *     
             *      const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {
             *          method: 'POST',
             *          body: form,
             *          headers: {
             *              'Accept': 'application/json',
             *              'X-Atlassian-Token': 'no-check'
             *          }
             *      });
             *     
             *      console.log(`Response: ${response.status} ${response.statusText}`);
             *      console.log(await response.json());
             * 
             * Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** 
             * 
             *  *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 200: Returned if the request is successful.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if any of the following is true:
             * 
             *  *  the issue is not found.
             *  *  the user does not have permission to view the issue.
             * 413: Returned if any of the following is true:
             * 
             *  *  the attachments exceed the maximum attachment size for issues.
             *  *  more than 60 files are requested to be uploaded.
             *  *  the per-issue limit for attachments has been breached.
             * 
             * See [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM) for details.
             */
            $post(): Promise<Array<Attachment>>;
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/changelog */
          changelog: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/changelog
             * operationId: getChangeLogs
             * sum: Get changelogs
             * doc: Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 200: Returned if the request is successful.
             * 404: Returned if the issue is not found or the user does not have permission to view it.
             */
            $get(args?: {startAt?: number, maxResults?: number}): Promise<PageBeanChangelog>;
            /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/changelog/list */
            list: {
              /**
               * Method: post /rest/api/3/issue/{issueIdOrKey}/changelog/list
               * operationId: getChangeLogsByIds
               * sum: Get changelogs by IDs
               * doc: Returns changelogs for an issue specified by a list of changelog IDs.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 200: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 404: Returned if the issue is not found or the user does not have the necessary permission.
               */
              $post(body: IssueChangelogIds): Promise<PageOfChangelogs>;
            };
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/comment */
          comment: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/comment
             * operationId: getComments
             * sum: Get comments
             * doc: Returns all comments for an issue.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** Comments are included in the response where the user has:
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
             * 200: Returned if the request is successful.
             * 400: Returned if `orderBy` is set to a value other than *created*.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the issue is not found or the user does not have permission to view it.
             */
            $get(args?: {startAt?: number, maxResults?: number, orderBy?: string, expand?: string}): Promise<PageOfComments>;
            /**
             * Method: post /rest/api/3/issue/{issueIdOrKey}/comment
             * operationId: addComment
             * sum: Add comment
             * doc: Adds a comment to an issue.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 201: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect.
             * 404: Returned if the issue is not found or the user does not have permission to view it.
             * 413: Returned if the per-issue limit has been breached for one of the following fields:
             * 
             *  *  comments
             *  *  attachments
             */
            $post(body: Comment): Promise<Comment>;
            /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/comment/{id} */
            "$"(id: string): {
              /**
               * Method: get /rest/api/3/issue/{issueIdOrKey}/comment/{id}
               * operationId: getComment
               * sum: Get comment
               * doc: Returns a comment.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.
               */
              $get(args?: {expand?: string}): Promise<Comment>;
              /**
               * Method: delete /rest/api/3/issue/{issueIdOrKey}/comment/{id}
               * operationId: deleteComment
               * sum: Delete comment
               * doc: Deletes a comment.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               *  *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
               *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
               * 204: Returned if the request is successful.
               * 400: Returned if the user does not have permission to delete the comment.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.
               * 405: Returned if an anonymous call is made to the operation.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/issue/{issueIdOrKey}/comment/{id}
               * operationId: updateComment
               * sum: Update comment
               * doc: Updates a comment.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               *  *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
               *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
               * 200: Returned if the request is successful.
               * 400: Returned if the user does not have permission to edit the comment or the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.
               */
              $put(body: Comment): Promise<Comment>;
            };
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/editmeta */
          editmeta: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/editmeta
             * operationId: getEditIssueMeta
             * sum: Get edit issue metadata
             * doc: Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).
             * 
             * This endpoint will check for these conditions:
             * 
             * 1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.
             * 2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.
             * 3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.
             * 4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.
             * 5.  Issue has a project, issue type, and status defined.
             * 6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.
             * 7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.
             * 8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).
             * 9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.
             * 
             * Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.
             * 
             * Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:
             * 
             *  *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).
             *  *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 
             * Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user uses an override parameter but doesn't have permission to do so.
             * 404: Returned if the issue is not found or the user does not have permission to view it.
             */
            $get(args?: {overrideScreenSecurity?: boolean, overrideEditableFlag?: boolean}): Promise<IssueUpdateMetadata>;
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/notify */
          notify: {
            /**
             * Method: post /rest/api/3/issue/{issueIdOrKey}/notify
             * operationId: notify
             * sum: Send notification for issue
             * doc: Creates an email notification for an issue and adds it to the mail queue.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 204: Returned if the email is queued for sending.
             * 400: Returned if:
             * 
             *  *  the recipient is the same as the calling user.
             *  *  the recipient is invalid. For example, the recipient is set to the assignee, but the issue is unassigned.
             *  *  the request is invalid. For example, required fields are missing or have invalid values.
             * 403: Returned if:
             * 
             *  *  outgoing emails are disabled.
             *  *  no SMTP server is configured.
             * 404: Returned if the issue is not found.
             */
            $post(body: Notification): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/properties */
          properties: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/properties
             * operationId: getIssuePropertyKeys
             * sum: Get issue property keys
             * doc: Returns the URLs and keys of an issue's properties.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** Property details are only returned where the user has:
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 200: Returned if the request is successful.
             * 404: Returned if the issue is not found or the user does not have permissions to view the issue.
             */
            $get(): Promise<PropertyKeys>;
            /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey} */
            "$"(propertyKey: string): {
              /**
               * Method: get /rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}
               * operationId: getIssueProperty
               * sum: Get issue property
               * doc: Returns the key and value of an issue's property.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the issue or property is not found or the user does not have permission to see the issue.
               */
              $get(): Promise<EntityProperty>;
              /**
               * Method: delete /rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}
               * operationId: deleteIssueProperty
               * sum: Delete issue property
               * doc: Deletes an issue's property.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 204: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the issue or property is not found, or the user does not have permission to edit the issue.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}
               * operationId: setIssueProperty
               * sum: Set issue property
               * doc: Sets the value of an issue's property. Use this resource to store custom data against an issue.
               * 
               * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 200: Returned if the issue property is updated.
               * 201: Returned if the issue property is created.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have permission to edit the issue.
               * 404: Returned if the issue is not found or the user does not have permission to view the issue.
               */
              $put(body: any /* 264 */): Promise<unknown>;
            };
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/remotelink */
          remotelink: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/remotelink
             * operationId: getRemoteIssueLinks
             * sum: Get remote issue links
             * doc: Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
             * 
             * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if issue linking is disabled.
             * 404: Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.
             * 413: Returned if the per-issue limit for remote links has been breached.
             */
            $get(args?: {globalId?: string}): Promise<RemoteIssueLink>;
            /**
             * Method: delete /rest/api/3/issue/{issueIdOrKey}/remotelink
             * operationId: deleteRemoteIssueLinkByGlobalId
             * sum: Delete remote issue link by global ID
             * doc: Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
             * 
             * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
             * 204: Returned if the request is successful.
             * 400: Returned if a global ID isn't provided.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have permission to link issues.
             * 404: Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.
             */
            $delete(args: {globalId: string}): Promise<unknown>;
            /**
             * Method: post /rest/api/3/issue/{issueIdOrKey}/remotelink
             * operationId: createOrUpdateRemoteIssueLink
             * sum: Create or update remote issue link
             * doc: Creates or updates a remote issue link for an issue.
             * 
             * If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.
             * 
             * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 200: Returned if the remote issue link is updated.
             * 201: Returned if the remote issue link is created.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have permission to link issues.
             * 404: Returned if the issue is not found or the user does not have permission to view the issue.
             */
            $post(body: RemoteIssueLinkRequest): Promise<RemoteIssueLinkIdentifies>;
            /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId} */
            "$"(linkId: string): {
              /**
               * Method: get /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}
               * operationId: getRemoteIssueLinkById
               * sum: Get remote issue link by ID
               * doc: Returns a remote issue link for an issue.
               * 
               * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 200: Returned if the request is successful.
               * 400: Returned if the link ID is invalid or the remote issue link does not belong to the issue.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if issue linking is disabled.
               * 404: Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.
               */
              $get(): Promise<RemoteIssueLink>;
              /**
               * Method: delete /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}
               * operationId: deleteRemoteIssueLinkById
               * sum: Delete remote issue link by ID
               * doc: Deletes a remote issue link from an issue.
               * 
               * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 204: Returned if the request is successful.
               * 400: Returned if the link ID is invalid or the remote issue link does not belong to the issue.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have permission to link issues.
               * 404: Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}
               * operationId: updateRemoteIssueLink
               * sum: Update remote issue link by ID
               * doc: Updates a remote issue link for an issue.
               * 
               * Note: Fields without values in the request are set to null.
               * 
               * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               * 204: Returned if the request is successful.
               * 400: Returned if:
               * 
               *  *  the link ID is invalid.
               *  *  the remote issue link does not belong to the issue.
               *  *  the request body is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have permission to link issues.
               * 404: Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.
               */
              $put(body: RemoteIssueLinkRequest): Promise<unknown>;
            };
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/transitions */
          transitions: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/transitions
             * operationId: getTransitions
             * sum: Get transitions
             * doc: Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.
             * 
             * Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required: A list or transition is returned only when the user has:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 
             * However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the issue is not found or the user does not have permission to view it.
             */
            $get(args?: {expand?: string, transitionId?: string, skipRemoteOnlyCondition?: boolean, includeUnavailableTransitions?: boolean, sortByOpsBarAndStatus?: boolean}): Promise<Transitions>;
            /**
             * Method: post /rest/api/3/issue/{issueIdOrKey}/transitions
             * operationId: doTransition
             * sum: Transition issue
             * doc: Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.
             * 
             * sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 204: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  no transition is specified.
             *  *  the user does not have permission to transition the issue.
             *  *  a field that isn't included on the transition screen is defined in `fields` or `update`.
             *  *  a field is specified in both `fields` and `update`.
             *  *  the request is invalid for any other reason.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the issue is not found or the user does not have permission to view it.
             * 409: Returned if the issue could not be updated due to a conflicting update. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*
             * 413: Returned if a per-issue limit has been breached for one of the following fields:
             * 
             *  *  comments
             *  *  worklogs
             *  *  attachments
             *  *  issue links
             *  *  remote issue links
             * 422: Returned if a configuration problem prevents the creation of the issue. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.*
             */
            $post(body: IssueUpdateDetails): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/votes */
          votes: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/votes
             * operationId: getVotes
             * sum: Get votes
             * doc: Returns details about the votes on an issue.
             * 
             * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 
             * Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  voting is disabled.
             *  *  the user does not have permission to view the issue.
             *  *  the issue is not found.
             */
            $get(): Promise<Votes>;
            /**
             * Method: delete /rest/api/3/issue/{issueIdOrKey}/votes
             * operationId: removeVote
             * sum: Delete vote
             * doc: Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.
             * 
             * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 204: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  voting is disabled.
             *  *  the user has not voted on the issue.
             *  *  the issue is not found.
             */
            $delete(): Promise<unknown>;
            /**
             * Method: post /rest/api/3/issue/{issueIdOrKey}/votes
             * operationId: addVote
             * sum: Add vote
             * doc: Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.
             * 
             * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 204: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  voting is disabled.
             *  *  the issue is not found.
             */
            $post(): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/watchers */
          watchers: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/watchers
             * operationId: getIssueWatchers
             * sum: Get issue watchers
             * doc: Returns the watchers for an issue.
             * 
             * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             *  *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             * 200: Returned if the request is successful
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the issue is not found or the user does not have permission to view it.
             */
            $get(): Promise<Watchers>;
            /**
             * Method: delete /rest/api/3/issue/{issueIdOrKey}/watchers
             * operationId: removeWatcher
             * sum: Delete watcher
             * doc: Deletes a user as a watcher of an issue.
             * 
             * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             *  *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             * 204: Returned if the request is successful.
             * 400: Returned if `accountId` is not supplied.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the permission to manage the watcher list.
             * 404: Returned if the issue or the user is not found or the user does not have permission to view the issue.
             */
            $delete(args?: {username?: string, accountId?: string}): Promise<unknown>;
            /**
             * Method: post /rest/api/3/issue/{issueIdOrKey}/watchers
             * operationId: addWatcher
             * sum: Add watcher
             * doc: Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.
             * 
             * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             *  *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             * 204: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the permission to manage the watcher list.
             * 404: Returned if the issue or the user is not found or the user does not have permission to view the issue.
             */
            $post(body: string): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/worklog */
          worklog: {
            /**
             * Method: get /rest/api/3/issue/{issueIdOrKey}/worklog
             * operationId: getIssueWorklog
             * sum: Get issue worklogs
             * doc: Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.
             * 
             * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** Workloads are only returned where the user has:
             * 
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
             * 200: Returned if the request is successful
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  the issue is not found or the user does not have permission to view the issue.
             *  *  `startAt` or `maxResults` has non-numeric values.
             *  *  time tracking is disabled.
             */
            $get(args?: {startAt?: number, maxResults?: number, startedAfter?: number, startedBefore?: number, expand?: string}): Promise<PageOfWorklogs>;
            /**
             * Method: post /rest/api/3/issue/{issueIdOrKey}/worklog
             * operationId: addWorklog
             * sum: Add worklog
             * doc: Adds a worklog to an issue.
             * 
             * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
             *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
             * 201: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
             *  *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.
             *  *  the user does not have permission to add the worklog.
             *  *  the request JSON is malformed.
             * 401: Returned if the authentication credentials are incorrect.
             * 404: Returned if the issue is not found or the user does not have permission to view it.
             * 413: Returned if the per-issue limit has been breached for one of the following fields:
             * 
             *  *  worklogs
             *  *  attachments
             */
            $post(body: Worklog): Promise<Worklog>;
            /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/worklog/{id} */
            "$"(id: string): {
              /**
               * Method: get /rest/api/3/issue/{issueIdOrKey}/worklog/{id}
               * operationId: getWorklog
               * sum: Get worklog
               * doc: Returns a worklog.
               * 
               * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect.
               * 404: Returned if:
               * 
               *  *  the issue is not found or the user does not have permission to view it.
               *  *  the worklog is not found or the user does not have permission to view it.
               *  *  time tracking is disabled.
               * 
               * .
               */
              $get(args?: {expand?: string}): Promise<Worklog>;
              /**
               * Method: delete /rest/api/3/issue/{issueIdOrKey}/worklog/{id}
               * operationId: deleteWorklog
               * sum: Delete worklog
               * doc: Deletes a worklog from an issue.
               * 
               * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               *  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
               *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
               * 204: Returned if the request is successful.
               * 400: Returned if:
               * 
               *  *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
               *  *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.
               *  *  the user does not have permission to delete the worklog.
               * 401: Returned if the authentication credentials are incorrect.
               * 404: Returned if:
               * 
               *  *  the issue is not found or user does not have permission to view the issue.
               *  *  the worklog is not found or the user does not have permission to view it.
               *  *  time tracking is disabled.
               */
              $delete(args?: {notifyUsers?: boolean, adjustEstimate?: string, newEstimate?: string, increaseBy?: string, overrideEditableFlag?: boolean}): Promise<unknown>;
              /**
               * Method: put /rest/api/3/issue/{issueIdOrKey}/worklog/{id}
               * operationId: updateWorklog
               * sum: Update worklog
               * doc: Updates a worklog.
               * 
               * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
               *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
               *  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
               *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
               * 200: Returned if the request is successful
               * 400: Returned if:
               * 
               *  *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
               *  *  the user does not have permission to update the worklog.
               *  *  the request JSON is malformed.
               * 401: Returned if the authentication credentials are incorrect.
               * 404: Returned if:
               * 
               *  *  the issue is not found or user does not have permission to view the issue.
               *  *  the worklog is not found or the user does not have permission to view it.
               *  *  time tracking is disabled.
               */
              $put(body: Worklog): Promise<Worklog>;
            };
            /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId} */
            "$"(worklogId: string): {
              /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties */
              properties: {
                /**
                 * Method: get /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties
                 * operationId: getWorklogPropertyKeys
                 * sum: Get worklog property keys
                 * doc: Returns the keys of all properties for a worklog.
                 * 
                 * This operation can be accessed anonymously.
                 * 
                 * **[Permissions](#permissions) required:**
                 * 
                 *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
                 *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
                 *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
                 * 200: Returned if the request is successful.
                 * 400: Returned if the worklog ID is invalid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 404: Returned if:
                 * 
                 *  *  the issue or worklog is not found.
                 *  *  the user does not have permission to view the issue or worklog.
                 */
                $get(): Promise<PropertyKeys>;
                /* Endpoint path: /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey} */
                "$"(propertyKey: string): {
                  /**
                   * Method: get /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}
                   * operationId: getWorklogProperty
                   * sum: Get worklog property
                   * doc: Returns the value of a worklog property.
                   * 
                   * This operation can be accessed anonymously.
                   * 
                   * **[Permissions](#permissions) required:**
                   * 
                   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
                   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
                   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
                   * 200: Returned if the request is successful.
                   * 400: Returned if the worklog ID is invalid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 404: Returned if:
                   * 
                   *  *  the issue, worklog, or property is not found.
                   *  *  the user does not have permission to view the issue or worklog.
                   */
                  $get(): Promise<EntityProperty>;
                  /**
                   * Method: delete /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}
                   * operationId: deleteWorklogProperty
                   * sum: Delete worklog property
                   * doc: Deletes a worklog property.
                   * 
                   * This operation can be accessed anonymously.
                   * 
                   * **[Permissions](#permissions) required:**
                   * 
                   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
                   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
                   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
                   * 204: Returned if the worklog property is removed.
                   * 400: Returned if the worklog key or id is invalid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user does not have permission to edit the worklog.
                   * 404: Returned if:
                   * 
                   *  *  the issue, worklog, or property is not found.
                   *  *  the user does not have permission to view the issue or worklog.
                   */
                  $delete(): Promise<unknown>;
                  /**
                   * Method: put /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}
                   * operationId: setWorklogProperty
                   * sum: Set worklog property
                   * doc: Sets the value of a worklog property. Use this operation to store custom data against the worklog.
                   * 
                   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
                   * 
                   * This operation can be accessed anonymously.
                   * 
                   * **[Permissions](#permissions) required:**
                   * 
                   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
                   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
                   *  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
                   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
                   * 200: Returned if the worklog property is updated.
                   * 201: Returned if the worklog property is created.
                   * 400: Returned if the worklog ID is invalid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user does not have permission to edit the worklog.
                   * 404: Returned if:
                   * 
                   *  *  the issue or worklog is not found.
                   *  *  the user does not have permission to view the issue or worklog.
                   */
                  $put(body: any /* 264 */): Promise<unknown>;
                };
              };
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/issueLink */
      issueLink: {
        /**
         * Method: post /rest/api/3/issueLink
         * operationId: linkIssues
         * sum: Create issue link
         * doc: Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.
         * 
         * This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.
         * 
         * If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:**
         * 
         *  *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
         *  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
         *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
         * 201: Returned if the request is successful.
         * 400: Returned if the comment is not created. The response contains an error message indicating why the comment wasn't created. The issue link is also not created.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if:
         * 
         *  *  issue linking is disabled.
         *  *  the user cannot view one or both of the issues. For example, the user doesn't have *Browse project* project permission for a project containing one of the issues.
         *  *  the user does not have *link issues* project permission.
         *  *  either of the link issues are not found.
         *  *  the issue link type is not found.
         * 413: Returned if the per-issue limit for issue links has been breached.
         */
        $post(body: LinkIssueRequestJsonBean): Promise<unknown>;
        /* Endpoint path: /rest/api/3/issueLink/{linkId} */
        "$"(linkId: string): {
          /**
           * Method: get /rest/api/3/issueLink/{linkId}
           * operationId: getIssueLink
           * sum: Get issue link
           * doc: Returns an issue link.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
           * 200: Returned if the request is successful.
           * 400: Returned if the issue link ID is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  issue linking is disabled.
           *  *  the issue link is not found.
           *  *  the user doesn't have the required permissions.
           */
          $get(): Promise<IssueLink>;
          /**
           * Method: delete /rest/api/3/issueLink/{linkId}
           * operationId: deleteIssueLink
           * sum: Delete issue link
           * doc: Deletes an issue link.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
           *  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
           * 200: 200 response
           * 204: Returned if the request is successful.
           * 400: Returned if the issue link ID is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  issue linking is disabled.
           *  *  the issue link is not found.
           *  *  the user doesn't have the required permissions.
           */
          $delete(): Promise<unknown>;
        };
      };
      /* Endpoint path: /rest/api/3/issueLinkType */
      issueLinkType: {
        /**
         * Method: get /rest/api/3/issueLinkType
         * operationId: getIssueLinkTypes
         * sum: Get issue link types
         * doc: Returns a list of all issue link types.
         * 
         * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if issue linking is disabled.
         */
        $get(): Promise<IssueLinkTypes>;
        /**
         * Method: post /rest/api/3/issueLinkType
         * operationId: createIssueLinkType
         * sum: Create issue link type
         * doc: Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.
         * 
         * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if:
         * 
         *  *  issue linking is disabled.
         *  *  the issue link type name is in use.
         *  *  the user does not have the required permissions.
         */
        $post(body: IssueLinkType): Promise<IssueLinkType>;
        /* Endpoint path: /rest/api/3/issueLinkType/{issueLinkTypeId} */
        "$"(issueLinkTypeId: string): {
          /**
           * Method: get /rest/api/3/issueLinkType/{issueLinkTypeId}
           * operationId: getIssueLinkType
           * sum: Get issue link type
           * doc: Returns an issue link type.
           * 
           * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
           * 200: Returned if the request is successful.
           * 400: Returned if the issue link type ID is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  issue linking is disabled.
           *  *  the issue link type is not found.
           *  *  the user does not have the required permissions.
           */
          $get(): Promise<IssueLinkType>;
          /**
           * Method: delete /rest/api/3/issueLinkType/{issueLinkTypeId}
           * operationId: deleteIssueLinkType
           * sum: Delete issue link type
           * doc: Deletes an issue link type.
           * 
           * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the issue link type ID is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  issue linking is disabled.
           *  *  the issue link type is not found.
           *  *  the user does not have the required permissions.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/issueLinkType/{issueLinkTypeId}
           * operationId: updateIssueLinkType
           * sum: Update issue link type
           * doc: Updates an issue link type.
           * 
           * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the issue link type ID or the request body are invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  issue linking is disabled.
           *  *  the issue link type is not found.
           *  *  the user does not have the required permissions.
           */
          $put(body: IssueLinkType): Promise<IssueLinkType>;
        };
      };
      /* Endpoint path: /rest/api/3/issues */
      issues: {
        /* Endpoint path: /rest/api/3/issues/archive */
        archive: {
          /* Endpoint path: /rest/api/3/issues/archive/export */
          export: {
            /**
             * Method: put /rest/api/3/issues/archive/export
             * operationId: exportArchivedIssues
             * sum: Export archived issue(s)
             * doc: Enables admins to retrieve details of all archived issues. Upon a successful request, the admin who submitted it will receive an email with a link to download a CSV file with the issue details.
             * 
             * Note that this API only exports the values of system fields and archival-specific fields (`ArchivedBy` and `ArchivedDate`). Custom fields aren't supported.
             * 
             * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
             * 
             * **License required:** Premium or Enterprise
             * 
             * **Signed-in users only:** This API can't be accessed anonymously.
             * 
             * **Rate limiting:** Only a single request can be active at any given time.
             * 
             *   
             *
             * 202: Returns the details of your export task. You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) API to view the progress of your request.
             * 400: Returned when:
             * 
             *  *  The request is invalid, or the filters provided are incorrect
             *  *  You requested too many issues for export. The limit is one million issues per request
             * 401: Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid.
             * 403: Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions.
             * 412: Returned if a request to export archived issues is already running.
             */
            $put(body: ArchivedIssuesFilterRequest): Promise<ExportArchivedIssuesTaskProgressResponse>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/issuesecurityschemes */
      issuesecurityschemes: {
        /**
         * Method: get /rest/api/3/issuesecurityschemes
         * operationId: getIssueSecuritySchemes
         * sum: Get issue security schemes
         * doc: Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect.
         * 403: Returned if the user does not have permission to administer issue security schemes.
         */
        $get(): Promise<SecuritySchemes>;
        /**
         * Method: post /rest/api/3/issuesecurityschemes
         * operationId: createIssueSecurityScheme
         * sum: Create issue security scheme
         * doc: Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user doesn't have the necessary permission.
         */
        $post(body: CreateIssueSecuritySchemeDetails): Promise<SecuritySchemeId>;
        /* Endpoint path: /rest/api/3/issuesecurityschemes/level */
        level: {
          /**
           * Method: get /rest/api/3/issuesecurityschemes/level
           * operationId: getSecurityLevels
           * sum: Get issue security levels
           * doc: Returns a [paginated](#pagination) list of issue security levels.
           * 
           * Only issue security levels in the context of classic projects are returned.
           * 
           * Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           */
          $get(args?: {startAt?: string, maxResults?: string, id?: Array<string>, schemeId?: Array<string>, onlyDefault?: boolean}): Promise<PageBeanSecurityLevel>;
          /* Endpoint path: /rest/api/3/issuesecurityschemes/level/default */
          default: {
            /**
             * Method: put /rest/api/3/issuesecurityschemes/level/default
             * operationId: setDefaultLevels
             * sum: Set default issue security levels
             * doc: Sets default issue security levels for schemes.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user doesn't have the necessary permission.
             * 404: Returned if the issue resolution isn't found.
             */
            $put(body: SetDefaultLevelsRequest): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/issuesecurityschemes/level/member */
          member: {
            /**
             * Method: get /rest/api/3/issuesecurityschemes/level/member
             * operationId: getSecurityLevelMembers
             * sum: Get issue security level members
             * doc: Returns a [paginated](#pagination) list of issue security level members.
             * 
             * Only issue security level members in the context of classic projects are returned.
             * 
             * Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user doesn't have the necessary permission.
             */
            $get(args?: {startAt?: string, maxResults?: string, id?: Array<string>, schemeId?: Array<string>, levelId?: Array<string>, expand?: string}): Promise<PageBeanSecurityLevelMember>;
          };
        };
        /* Endpoint path: /rest/api/3/issuesecurityschemes/project */
        project: {
          /**
           * Method: get /rest/api/3/issuesecurityschemes/project
           * operationId: searchProjectsUsingSecuritySchemes
           * sum: Get projects using issue security schemes
           * doc: Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the search criteria is invalid.If you specify the project ID parameter
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           */
          $get(args?: {startAt?: string, maxResults?: string, issueSecuritySchemeId?: Array<string>, projectId?: Array<string>}): Promise<PageBeanIssueSecuritySchemeToProjectMapping>;
          /**
           * Method: put /rest/api/3/issuesecurityschemes/project
           * operationId: associateSchemesToProjects
           * sum: Associate security scheme to project
           * doc: Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.
           * 
           * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 303: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the security scheme isn't found.
           * 409: Returned if a task to remove the issue security level is already running.
           */
          $put(body: AssociateSecuritySchemeWithProjectDetails): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/issuesecurityschemes/search */
        search: {
          /**
           * Method: get /rest/api/3/issuesecurityschemes/search
           * operationId: searchSecuritySchemes
           * sum: Search issue security schemes
           * doc: Returns a [paginated](#pagination) list of issue security schemes.  
           * If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \{@link IssueSecuritySchemeResource\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\} to obtain all projects related to scheme.
           * 
           * Only issue security schemes in the context of classic projects are returned.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           */
          $get(args?: {startAt?: string, maxResults?: string, id?: Array<string>, projectId?: Array<string>}): Promise<PageBeanSecuritySchemeWithProjects>;
        };
        /* Endpoint path: /rest/api/3/issuesecurityschemes/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/issuesecurityschemes/{id}
           * operationId: getIssueSecurityScheme
           * sum: Get issue security scheme
           * doc: Returns an issue security scheme along with its security levels.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission.
           */
          $get(): Promise<SecurityScheme>;
          /**
           * Method: put /rest/api/3/issuesecurityschemes/{id}
           * operationId: updateIssueSecurityScheme
           * sum: Update issue security scheme
           * doc: Updates the issue security scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue security scheme isn't found.
           */
          $put(body: UpdateIssueSecuritySchemeRequestBean): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/issuesecurityschemes/{issueSecuritySchemeId} */
        "$"(issueSecuritySchemeId: string): {
          /* Endpoint path: /rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members */
          members: {
            /**
             * Method: get /rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members
             * operationId: getIssueSecurityLevelMembers
             * sum: Get issue security level members by issue security scheme
             * doc: Returns issue security level members.
             * 
             * Only issue security level members in context of classic projects are returned.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if no issue security level members are found.
             */
            $get(args?: {startAt?: number, maxResults?: number, issueSecurityLevelId?: Array<string>, expand?: string}): Promise<PageBeanIssueSecurityLevelMember>;
          };
        };
        /* Endpoint path: /rest/api/3/issuesecurityschemes/{schemeId} */
        "$"(schemeId: string): {
          /**
           * Method: delete /rest/api/3/issuesecurityschemes/{schemeId}
           * operationId: deleteSecurityScheme
           * sum: Delete issue security scheme
           * doc: Deletes an issue security scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue security scheme isn't found.
           */
          $delete(): Promise<unknown>;
          /* Endpoint path: /rest/api/3/issuesecurityschemes/{schemeId}/level */
          level: {
            /**
             * Method: put /rest/api/3/issuesecurityschemes/{schemeId}/level
             * operationId: addSecurityLevel
             * sum: Add issue security levels
             * doc: Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user doesn't have the necessary permission.
             * 404: Returned if the security scheme isn't found.
             */
            $put(body: AddSecuritySchemeLevelsRequestBean): Promise<unknown>;
            /* Endpoint path: /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId} */
            "$"(levelId: string): {
              /**
               * Method: delete /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}
               * operationId: removeLevel
               * sum: Remove issue security level
               * doc: Deletes an issue security level.
               * 
               * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 303: Returned if the request is successful.
               * 400: Returned if the request isn't valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user doesn't have the necessary permission.
               * 404: Returned if the issue security level isn't found.
               * 409: Returned if a task to remove the issue security level is already running.
               */
              $delete(args?: {replaceWith?: string}): Promise<void>;
              /**
               * Method: put /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}
               * operationId: updateSecurityLevel
               * sum: Update issue security level
               * doc: Updates the issue security level.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request isn't valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user doesn't have the necessary permission.
               * 404: Returned if the issue security level isn't found.
               */
              $put(body: UpdateIssueSecurityLevelDetails): Promise<unknown>;
              /* Endpoint path: /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member */
              member: {
                /**
                 * Method: put /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member
                 * operationId: addSecurityLevelMembers
                 * sum: Add issue security level members
                 * doc: Adds members to the issue security level. You can add up to 100 members per request.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 204: Returned if the request is successful.
                 * 400: Returned if the request is invalid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user doesn't have the necessary permission.
                 * 404: Returned if the security scheme isn't found.
                 */
                $put(body: SecuritySchemeMembersRequest): Promise<unknown>;
                /* Endpoint path: /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId} */
                "$"(memberId: string): {
                  /**
                   * Method: delete /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}
                   * operationId: removeMemberFromSecurityLevel
                   * sum: Remove member from issue security level
                   * doc: Removes an issue security level member from an issue security scheme.
                   * 
                   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                   * 204: Returned if the request is successful.
                   * 400: Returned if the request is invalid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user doesn't have the necessary permission.
                   * 404: Returned if the security scheme isn't found.
                   */
                  $delete(): Promise<unknown>;
                };
              };
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/issuetype */
      issuetype: {
        /**
         * Method: get /rest/api/3/issuetype
         * operationId: getIssueAllTypes
         * sum: Get all issue types for user
         * doc: Returns all issue types.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** Issue types are only returned as follows:
         * 
         *  *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
         *  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(): Promise<Array<IssueTypeDetails>>;
        /**
         * Method: post /rest/api/3/issuetype
         * operationId: createIssueType
         * sum: Create issue type
         * doc: Creates an issue type and adds it to the default issue type scheme.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is invalid because:
         * 
         *  *  no content is sent.
         *  *  the issue type name exceeds 60 characters.
         *  *  a subtask issue type is requested on an instance where subtasks are disabled.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         * 409: Returned if the issue type name is in use.
         */
        $post(body: IssueTypeCreateBean): Promise<IssueTypeDetails>;
        /* Endpoint path: /rest/api/3/issuetype/project */
        project: {
          /**
           * Method: get /rest/api/3/issuetype/project
           * operationId: getIssueTypesForProject
           * sum: Get issue types for project
           * doc: Returns issue types for a project.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  the project is not found.
           *  *  the user does not have the necessary permission.
           */
          $get(args: {projectId: number, level?: number}): Promise<Array<IssueTypeDetails>>;
        };
        /* Endpoint path: /rest/api/3/issuetype/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/issuetype/{id}
           * operationId: getIssueType
           * sum: Get issue type
           * doc: Returns an issue type.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the issue type ID is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  the issue type is not found.
           *  *  the user does not have the required permissions.
           */
          $get(): Promise<IssueTypeDetails>;
          /**
           * Method: delete /rest/api/3/issuetype/{id}
           * operationId: deleteIssueType
           * sum: Delete issue type
           * doc: Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if any issues cannot be updated with the alternative issue type.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if:
           * 
           *  *  the issue type is in use and an alternative issue type is not specified.
           *  *  the issue type or alternative issue type is not found.
           * 409: Returned if the issue type is in use and:
           * 
           *  *  also specified as the alternative issue type.
           *  *  is a *standard* issue type and the alternative issue type is a *subtask*.
           */
          $delete(args?: {alternativeIssueTypeId?: string}): Promise<unknown>;
          /**
           * Method: put /rest/api/3/issuetype/{id}
           * operationId: updateIssueType
           * sum: Update issue type
           * doc: Updates the issue type.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid because:
           * 
           *  *  no content is sent.
           *  *  the issue type name exceeds 60 characters.
           *  *  the avatar is not associated with this issue type.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the issue type is not found.
           * 409: Returned if the issue type name is in use.
           */
          $put(body: IssueTypeUpdateBean): Promise<IssueTypeDetails>;
          /* Endpoint path: /rest/api/3/issuetype/{id}/alternatives */
          alternatives: {
            /**
             * Method: get /rest/api/3/issuetype/{id}/alternatives
             * operationId: getAlternativeIssueTypes
             * sum: Get alternative issue types
             * doc: Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** None.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  the issue type is not found.
             *  *  the user does not have the required permissions.
             */
            $get(): Promise<Array<IssueTypeDetails>>;
          };
          /* Endpoint path: /rest/api/3/issuetype/{id}/avatar2 */
          avatar2: {
            /**
             * Method: post /rest/api/3/issuetype/{id}/avatar2
             * operationId: createIssueTypeAvatar
             * sum: Load issue type avatar
             * doc: Loads an avatar for the issue type.
             * 
             * Specify the avatar's local file location in the body of the request. Also, include the following headers:
             * 
             *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
             *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
             * 
             * For example:  
             * `curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`
             * 
             * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
             * 
             * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
             * 
             * After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 201: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  an image isn't included in the request.
             *  *  the image type is unsupported.
             *  *  the crop parameters extend the crop area beyond the edge of the image.
             *  *  `cropSize` is missing.
             *  *  the issue type ID is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the issue type is not found.
             */
            $post(): Promise<Avatar>;
          };
        };
        /* Endpoint path: /rest/api/3/issuetype/{issueTypeId} */
        "$"(issueTypeId: string): {
          /* Endpoint path: /rest/api/3/issuetype/{issueTypeId}/properties */
          properties: {
            /**
             * Method: get /rest/api/3/issuetype/{issueTypeId}/properties
             * operationId: getIssueTypePropertyKeys
             * sum: Get issue type property keys
             * doc: Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
             *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
             * 200: Returned if the request is successful.
             * 400: Returned if the issue type ID is invalid.
             * 404: Returned if:
             * 
             *  *  the issue type is not found.
             *  *  the user does not have the required permissions.
             */
            $get(): Promise<PropertyKeys>;
            /* Endpoint path: /rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey} */
            "$"(propertyKey: string): {
              /**
               * Method: get /rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}
               * operationId: getIssueTypeProperty
               * sum: Get issue type property
               * doc: Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
               *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
               * 200: Returned if the request is successful.
               * 400: Returned if the issue type ID is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the issue type or property is not found or the user does not have the required permissions.
               */
              $get(): Promise<EntityProperty>;
              /**
               * Method: delete /rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}
               * operationId: deleteIssueTypeProperty
               * sum: Delete issue type property
               * doc: Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the issue type property is deleted.
               * 400: Returned if the issue type ID is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the issue type or property is not found.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}
               * operationId: setIssueTypeProperty
               * sum: Set issue type property
               * doc: Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.
               * 
               * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the issue type property is updated.
               * 201: Returned if the issue type property is created.
               * 400: Returned if:
               * 
               *  *  the issue type ID is invalid.
               *  *  a property value is not provided.
               *  *  the property value JSON content is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have permission to modify the issue type.
               * 404: Returned if:
               * 
               *  *  the issue type is not found.
               *  *  the user does not have the permission view the issue type.
               */
              $put(body: any /* 264 */): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/issuetypescheme */
      issuetypescheme: {
        /**
         * Method: get /rest/api/3/issuetypescheme
         * operationId: getAllIssueTypeSchemes
         * sum: Get all issue type schemes
         * doc: Returns a [paginated](#pagination) list of issue type schemes.
         * 
         * Only issue type schemes used in classic projects are returned.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the required permissions.
         */
        $get(args?: {startAt?: number, maxResults?: number, id?: Array<number>, orderBy?: string, expand?: string, queryString?: string}): Promise<PageBeanIssueTypeScheme>;
        /**
         * Method: post /rest/api/3/issuetypescheme
         * operationId: createIssueTypeScheme
         * sum: Create issue type scheme
         * doc: Creates an issue type scheme.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the required permissions.
         * 409: Returned if the scheme name is used by another scheme.
         */
        $post(body: IssueTypeSchemeDetails): Promise<IssueTypeSchemeID>;
        /* Endpoint path: /rest/api/3/issuetypescheme/mapping */
        mapping: {
          /**
           * Method: get /rest/api/3/issuetypescheme/mapping
           * operationId: getIssueTypeSchemesMapping
           * sum: Get issue type scheme items
           * doc: Returns a [paginated](#pagination) list of issue type scheme items.
           * 
           * Only issue type scheme items used in classic projects are returned.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           */
          $get(args?: {startAt?: number, maxResults?: number, issueTypeSchemeId?: Array<number>}): Promise<PageBeanIssueTypeSchemeMapping>;
        };
        /* Endpoint path: /rest/api/3/issuetypescheme/project */
        project: {
          /**
           * Method: get /rest/api/3/issuetypescheme/project
           * operationId: getIssueTypeSchemeForProjects
           * sum: Get issue type schemes for projects
           * doc: Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.
           * 
           * Only issue type schemes used in classic projects are returned.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           */
          $get(args: {startAt?: number, maxResults?: number, projectId: Array<number>}): Promise<PageBeanIssueTypeSchemeProjects>;
          /**
           * Method: put /rest/api/3/issuetypescheme/project
           * operationId: assignIssueTypeSchemeToProject
           * sum: Assign issue type scheme to project
           * doc: Assigns an issue type scheme to a project.
           * 
           * If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.
           * 
           * Issue type schemes can only be assigned to classic projects.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the issue type scheme or the project is not found.
           */
          $put(body: IssueTypeSchemeProjectAssociation): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/issuetypescheme/{issueTypeSchemeId} */
        "$"(issueTypeSchemeId: string): {
          /**
           * Method: delete /rest/api/3/issuetypescheme/{issueTypeSchemeId}
           * operationId: deleteIssueTypeScheme
           * sum: Delete issue type scheme
           * doc: Deletes an issue type scheme.
           * 
           * Only issue type schemes used in classic projects can be deleted.
           * 
           * Any projects assigned to the scheme are reassigned to the default issue type scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the issue type scheme is deleted.
           * 400: Returned if the request is to delete the default issue type scheme.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the issue type scheme is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/issuetypescheme/{issueTypeSchemeId}
           * operationId: updateIssueTypeScheme
           * sum: Update issue type scheme
           * doc: Updates an issue type scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the issue type scheme is not found.
           */
          $put(body: IssueTypeSchemeUpdateDetails): Promise<unknown>;
          /* Endpoint path: /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype */
          issuetype: {
            /**
             * Method: put /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype
             * operationId: addIssueTypesToIssueTypeScheme
             * sum: Add issue types to issue type scheme
             * doc: Adds issue types to an issue type scheme.
             * 
             * The added issue types are appended to the issue types list.
             * 
             * If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the required permissions.
             * 404: Returned if the issue type or the issue type scheme is not found.
             */
            $put(body: IssueTypeIds): Promise<unknown>;
            /* Endpoint path: /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move */
            move: {
              /**
               * Method: put /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move
               * operationId: reorderIssueTypesInIssueTypeScheme
               * sum: Change order of issue types
               * doc: Changes the order of issue types in an issue type scheme.
               * 
               * The request body parameters must meet the following requirements:
               * 
               *  *  all of the issue types must belong to the issue type scheme.
               *  *  either `after` or `position` must be provided.
               *  *  the issue type in `after` must not be in the issue type list.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the issue type scheme is not found.
               */
              $put(body: OrderOfIssueTypes): Promise<unknown>;
            };
            /* Endpoint path: /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId} */
            "$"(issueTypeId: string): {
              /**
               * Method: delete /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}
               * operationId: removeIssueTypeFromIssueTypeScheme
               * sum: Remove issue type from issue type scheme
               * doc: Removes an issue type from an issue type scheme.
               * 
               * This operation cannot remove:
               * 
               *  *  any issue type used by issues.
               *  *  any issue types from the default issue type scheme.
               *  *  the last standard issue type from an issue type scheme.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the issue type scheme is missing or the issue type is not found in the issue type scheme.
               */
              $delete(): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/issuetypescreenscheme */
      issuetypescreenscheme: {
        /**
         * Method: get /rest/api/3/issuetypescreenscheme
         * operationId: getIssueTypeScreenSchemes
         * sum: Get issue type screen schemes
         * doc: Returns a [paginated](#pagination) list of issue type screen schemes.
         * 
         * Only issue type screen schemes used in classic projects are returned.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the required permissions.
         */
        $get(args?: {startAt?: number, maxResults?: number, id?: Array<number>, queryString?: string, orderBy?: string, expand?: string}): Promise<PageBeanIssueTypeScreenScheme>;
        /**
         * Method: post /rest/api/3/issuetypescreenscheme
         * operationId: createIssueTypeScreenScheme
         * sum: Create issue type screen scheme
         * doc: Creates an issue type screen scheme.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the required permissions.
         * 404: Returned if the issue type or screen scheme is not found.
         * 409: Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.
         */
        $post(body: IssueTypeScreenSchemeDetails): Promise<IssueTypeScreenSchemeId>;
        /* Endpoint path: /rest/api/3/issuetypescreenscheme/mapping */
        mapping: {
          /**
           * Method: get /rest/api/3/issuetypescreenscheme/mapping
           * operationId: getIssueTypeScreenSchemeMappings
           * sum: Get issue type screen scheme items
           * doc: Returns a [paginated](#pagination) list of issue type screen scheme items.
           * 
           * Only issue type screen schemes used in classic projects are returned.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           */
          $get(args?: {startAt?: number, maxResults?: number, issueTypeScreenSchemeId?: Array<number>}): Promise<PageBeanIssueTypeScreenSchemeItem>;
        };
        /* Endpoint path: /rest/api/3/issuetypescreenscheme/project */
        project: {
          /**
           * Method: get /rest/api/3/issuetypescreenscheme/project
           * operationId: getIssueTypeScreenSchemeProjectAssociations
           * sum: Get issue type screen schemes for projects
           * doc: Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.
           * 
           * Only issue type screen schemes used in classic projects are returned.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           */
          $get(args: {startAt?: number, maxResults?: number, projectId: Array<number>}): Promise<PageBeanIssueTypeScreenSchemesProjects>;
          /**
           * Method: put /rest/api/3/issuetypescreenscheme/project
           * operationId: assignIssueTypeScreenSchemeToProject
           * sum: Assign issue type screen scheme to project
           * doc: Assigns an issue type screen scheme to a project.
           * 
           * Issue type screen schemes can only be assigned to classic projects.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  project is not found.
           *  *  issue type screen scheme is not found.
           *  *  the project is not a classic project.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the issue type screen scheme or the project are missing.
           */
          $put(body: IssueTypeScreenSchemeProjectAssociation): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId} */
        "$"(issueTypeScreenSchemeId: string): {
          /**
           * Method: delete /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}
           * operationId: deleteIssueTypeScreenScheme
           * sum: Delete issue type screen scheme
           * doc: Deletes an issue type screen scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the issue type screen scheme is deleted.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the issue type screen scheme is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}
           * operationId: updateIssueTypeScreenScheme
           * sum: Update issue type screen scheme
           * doc: Updates an issue type screen scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the issue type screen scheme is not found.
           */
          $put(body: IssueTypeScreenSchemeUpdateDetails): Promise<unknown>;
          /* Endpoint path: /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping */
          mapping: {
            /**
             * Method: put /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping
             * operationId: appendMappingsForIssueTypeScreenScheme
             * sum: Append mappings to issue type screen scheme
             * doc: Appends issue type to screen scheme mappings to an issue type screen scheme.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the required permissions.
             * 404: Returned if the issue type screen scheme, issue type, or screen scheme is not found.
             * 409: Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.
             */
            $put(body: IssueTypeScreenSchemeMappingDetails): Promise<unknown>;
            /* Endpoint path: /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default */
            default: {
              /**
               * Method: put /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default
               * operationId: updateDefaultScreenScheme
               * sum: Update issue type screen scheme default screen scheme
               * doc: Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the issue type screen scheme or the screen scheme is not found, or the screen scheme isn't used in classic projects.
               */
              $put(body: UpdateDefaultScreenScheme): Promise<unknown>;
            };
            /* Endpoint path: /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove */
            remove: {
              /**
               * Method: post /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove
               * operationId: removeMappingsFromIssueTypeScreenScheme
               * sum: Remove mappings from issue type screen scheme
               * doc: Removes issue type to screen scheme mappings from an issue type screen scheme.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the screen scheme mappings are removed from the issue type screen scheme.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the issue type screen scheme or one or more issue type mappings are not found.
               */
              $post(body: IssueTypeIds): Promise<unknown>;
            };
          };
          /* Endpoint path: /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project */
          project: {
            /**
             * Method: get /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project
             * operationId: getProjectsForIssueTypeScreenScheme
             * sum: Get issue type screen scheme projects
             * doc: Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.
             * 
             * Only company-managed projects associated with an issue type screen scheme are returned.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the required permissions.
             */
            $get(args?: {startAt?: number, maxResults?: number, query?: string}): Promise<PageBeanProjectDetails>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/jql */
      jql: {
        /* Endpoint path: /rest/api/3/jql/autocompletedata */
        autocompletedata: {
          /**
           * Method: get /rest/api/3/jql/autocompletedata
           * operationId: getAutoComplete
           * sum: Get field reference data (GET)
           * doc: Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
           * 
           * To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $get(): Promise<JQLReferenceData>;
          /**
           * Method: post /rest/api/3/jql/autocompletedata
           * operationId: getAutoCompletePost
           * sum: Get field reference data (POST)
           * doc: Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
           * 
           * This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.
           * 
           * It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $post(body: SearchAutoCompleteFilter): Promise<JQLReferenceData>;
          /* Endpoint path: /rest/api/3/jql/autocompletedata/suggestions */
          suggestions: {
            /**
             * Method: get /rest/api/3/jql/autocompletedata/suggestions
             * operationId: getFieldAutoCompleteForQueryString
             * sum: Get field auto complete suggestions
             * doc: Returns the JQL search auto complete suggestions for a field.
             * 
             * Suggestions can be obtained by providing:
             * 
             *  *  `fieldName` to get a list of all values for the field.
             *  *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
             *  *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
             *  *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** None.
             * 200: Returned if the request is successful.
             * 400: Returned if an invalid combination of parameters is passed.
             * 401: Returned if the authentication credentials are incorrect.
             */
            $get(args?: {fieldName?: string, fieldValue?: string, predicateName?: string, predicateValue?: string}): Promise<AutoCompleteSuggestions>;
          };
        };
        /* Endpoint path: /rest/api/3/jql/function */
        function: {
          /* Endpoint path: /rest/api/3/jql/function/computation */
          computation: {
            /**
             * Method: get /rest/api/3/jql/function/computation
             * operationId: getPrecomputations
             * sum: Get precomputations (apps)
             * doc: Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.
             * 
             * **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the request is not authenticated as the app that provided the function.
             * 404: Returned if the function is not found.
             */
            $get(args?: {functionKey?: Array<string>, startAt?: number, maxResults?: number, orderBy?: string}): Promise<PageBeanJqlFunctionPrecomputationBean>;
            /**
             * Method: post /rest/api/3/jql/function/computation
             * operationId: updatePrecomputations
             * sum: Update precomputations (apps)
             * doc: Update the precomputation value of a function created by a Forge/Connect app.
             * 
             * **[Permissions](#permissions) required:** An API for apps to update their own precomputations.
             * 204: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 403: Returned if the request is not authenticated as the app that provided the function.
             * 404: Returned if the function is not found.
             */
            $post(body: JqlFunctionPrecomputationUpdateRequestBean): Promise<unknown>;
          };
        };
        /* Endpoint path: /rest/api/3/jql/match */
        match: {
          /**
           * Method: post /rest/api/3/jql/match
           * operationId: matchIssues
           * sum: Check issues against JQL
           * doc: Checks whether one or more issues would be returned by one or more JQL queries.
           * 
           * **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:
           * 
           *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           * 200: Returned if the request is successful.
           * 400: Returned if `jqls` exceeds the maximum number of JQL queries or `issueIds` exceeds the maximum number of issue IDs.
           */
          $post(body: IssuesAndJQLQueries): Promise<IssueMatches>;
        };
        /* Endpoint path: /rest/api/3/jql/parse */
        parse: {
          /**
           * Method: post /rest/api/3/jql/parse
           * operationId: parseJqlQueries
           * sum: Parse JQL query
           * doc: Parses and validates JQL queries.
           * 
           * Validation is performed in context of the current user.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $post(body: JqlQueriesToParse): Promise<ParsedJqlQueries>;
        };
        /* Endpoint path: /rest/api/3/jql/pdcleaner */
        pdcleaner: {
          /**
           * Method: post /rest/api/3/jql/pdcleaner
           * operationId: migrateQueries
           * sum: Convert user identifiers to account IDs in JQL queries
           * doc: Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.
           * 
           * You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed.
           * 400: Returned if at least one of the queries cannot be converted. For example, the JQL has invalid operators or invalid keywords, or the users in the query cannot be found.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $post(body: JQLPersonalDataMigrationRequest): Promise<ConvertedJQLQueries>;
        };
        /* Endpoint path: /rest/api/3/jql/sanitize */
        sanitize: {
          /**
           * Method: post /rest/api/3/jql/sanitize
           * operationId: sanitiseJqlQueries
           * sum: Sanitize JQL queries
           * doc: Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.
           * 
           * For example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project "Secret project", the sanitized query replaces the clause with *project = 12345"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.
           * 
           * Note that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).
           * 
           * Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $post(body: JqlQueriesToSanitize): Promise<SanitizedJqlQueries>;
        };
      };
      /* Endpoint path: /rest/api/3/label */
      label: {
        /**
         * Method: get /rest/api/3/label
         * operationId: getAllLabels
         * sum: Get all labels
         * doc: Returns a [paginated](#pagination) list of labels.
         * 200: Returned if the request is successful.
         */
        $get(args?: {startAt?: number, maxResults?: number}): Promise<PageBeanString>;
      };
      /* Endpoint path: /rest/api/3/license */
      license: {
        /* Endpoint path: /rest/api/3/license/approximateLicenseCount */
        approximateLicenseCount: {
          /**
           * Method: get /rest/api/3/license/approximateLicenseCount
           * operationId: getApproximateLicenseCount
           * sum: Get approximate license count
           * doc: Returns the approximate number of user accounts across all Jira licenses. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have permission to complete this request.
           */
          $get(): Promise<LicenseMetric>;
          /* Endpoint path: /rest/api/3/license/approximateLicenseCount/product */
          product: {
            /* Endpoint path: /rest/api/3/license/approximateLicenseCount/product/{applicationKey} */
            "$"(applicationKey: string): {
              /**
               * Method: get /rest/api/3/license/approximateLicenseCount/product/{applicationKey}
               * operationId: getApproximateApplicationLicenseCount
               * sum: Get approximate application license count
               * doc: Returns the total approximate number of user accounts for a single Jira license. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have permission to complete this request.
               */
              $get(): Promise<LicenseMetric>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/mypermissions */
      mypermissions: {
        /**
         * Method: get /rest/api/3/mypermissions
         * operationId: getMyPermissions
         * sum: Get my permissions
         * doc: Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.
         * 
         * The user is reported as having a project permission:
         * 
         *  *  in the global context, if the user has the project permission in any project.
         *  *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
         *  *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.
         *  *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\_PROJECTS, a 400 error will be returned.
         * 
         * This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue.
         * 
         * For [Jira Service Management project permissions](https://support.atlassian.com/jira-cloud-administration/docs/customize-jira-service-management-permissions/), this will be evaluated similarly to a user in the customer portal. For example, if the BROWSE\_PROJECTS permission is granted to Service Project Customer - Portal Access, any users with access to the customer portal will have the BROWSE\_PROJECTS permission.
         * 
         * Global permissions are unaffected by context.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 400: Returned if `permissions` is empty, contains an invalid key, or does not equal BROWSE\_PROJECTS when commentId is provided.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if the project or issue is not found or the user does not have permission to view the project or issue.
         */
        $get(args?: {projectKey?: string, projectId?: string, issueKey?: string, issueId?: string, permissions?: string, projectUuid?: string, projectConfigurationUuid?: string, commentId?: string}): Promise<Permissions>;
      };
      /* Endpoint path: /rest/api/3/mypreferences */
      mypreferences: {
        /**
         * Method: get /rest/api/3/mypreferences
         * operationId: getPreference
         * sum: Get preference
         * doc: Returns the value of a preference of the current user.
         * 
         * Note that these keys are deprecated:
         * 
         *  *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
         *  *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
         * 
         * These system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.
         * 
         *  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
         *  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
         *  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
         *  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
         * 
         * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if the key is not provided or not found.
         */
        $get(args: {key: string}): Promise<string>;
        /**
         * Method: delete /rest/api/3/mypreferences
         * operationId: removePreference
         * sum: Delete preference
         * doc: Deletes a preference of the user, which restores the default value of system defined settings.
         * 
         * Note that these keys are deprecated:
         * 
         *  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
         *  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
         * 
         * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 204: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if the key is not provided or not found.
         */
        $delete(args: {key: string}): Promise<unknown>;
        /**
         * Method: put /rest/api/3/mypreferences
         * operationId: setPreference
         * sum: Set preference
         * doc: Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
         * 
         *  *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
         *  *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
         *  *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
         *  *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
         *  *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.
         * 
         * Note that these keys are deprecated:
         * 
         *  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
         *  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
         * 
         * These system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.
         * 
         *  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
         *  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
         *  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
         *  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
         * 
         * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 204: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if the key or value is not provided or invalid.
         */
        $put(body: string): Promise<unknown>;
        /* Endpoint path: /rest/api/3/mypreferences/locale */
        locale: {
          /**
           * Method: get /rest/api/3/mypreferences/locale
           * operationId: getLocale
           * sum: Get locale
           * doc: Returns the locale for the user.
           * 
           * If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(): Promise<Locale>;
          /**
           * Method: delete /rest/api/3/mypreferences/locale
           * operationId: deleteLocale
           * sum: Delete locale
           * doc: Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
           * 
           * Deletes the locale of the user, which restores the default setting.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 204: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/mypreferences/locale
           * operationId: setLocale
           * sum: Set locale
           * doc: Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
           * 
           * Sets the locale of the user. The locale must be one supported by the instance of Jira.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 204: Returned if the request is successful.
           * 400: Returned if request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $put(body: Locale): Promise<unknown>;
        };
      };
      /* Endpoint path: /rest/api/3/myself */
      myself: {
        /**
         * Method: get /rest/api/3/myself
         * operationId: getCurrentUser
         * sum: Get current user
         * doc: Returns details for the current user.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(args?: {expand?: string}): Promise<User>;
      };
      /* Endpoint path: /rest/api/3/notificationscheme */
      notificationscheme: {
        /**
         * Method: get /rest/api/3/notificationscheme
         * operationId: getNotificationSchemes
         * sum: Get notification schemes paginated
         * doc: Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.
         * 
         * *Note that you should allow for events without recipients to appear in responses.*
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
         * 200: Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.
         * 400: Returned if the request isn't valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(args?: {startAt?: string, maxResults?: string, id?: Array<string>, projectId?: Array<string>, onlyDefault?: boolean, expand?: string}): Promise<PageBeanNotificationScheme>;
        /**
         * Method: post /rest/api/3/notificationscheme
         * operationId: createNotificationScheme
         * sum: Create notification scheme
         * doc: Creates a notification scheme with notifications. You can create up to 1000 notifications per request.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request isn't valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user doesn't have the necessary permission.
         */
        $post(body: CreateNotificationSchemeDetails): Promise<NotificationSchemeId>;
        /* Endpoint path: /rest/api/3/notificationscheme/project */
        project: {
          /**
           * Method: get /rest/api/3/notificationscheme/project
           * operationId: getNotificationSchemeToProjectMappings
           * sum: Get projects using notification schemes paginated
           * doc: Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 400: Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {startAt?: string, maxResults?: string, notificationSchemeId?: Array<string>, projectId?: Array<string>}): Promise<PageBeanNotificationSchemeAndProjectMappingJsonBean>;
        };
        /* Endpoint path: /rest/api/3/notificationscheme/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/notificationscheme/{id}
           * operationId: getNotificationScheme
           * sum: Get notification scheme
           * doc: Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the notification scheme is not found or the user does not have permission to view it.
           */
          $get(args?: {expand?: string}): Promise<NotificationScheme>;
          /**
           * Method: put /rest/api/3/notificationscheme/{id}
           * operationId: updateNotificationScheme
           * sum: Update notification scheme
           * doc: Updates a notification scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the notification scheme isn't found.
           */
          $put(body: UpdateNotificationSchemeDetails): Promise<unknown>;
          /* Endpoint path: /rest/api/3/notificationscheme/{id}/notification */
          notification: {
            /**
             * Method: put /rest/api/3/notificationscheme/{id}/notification
             * operationId: addNotifications
             * sum: Add notifications to notification scheme
             * doc: Adds notifications to a notification scheme. You can add up to 1000 notifications per request.
             * 
             * *Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned if the request isn't valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user doesn't have the necessary permission.
             * 404: Returned if the notification scheme isn't found.
             */
            $put(body: AddNotificationsDetails): Promise<unknown>;
          };
        };
        /* Endpoint path: /rest/api/3/notificationscheme/{notificationSchemeId} */
        "$"(notificationSchemeId: string): {
          /**
           * Method: delete /rest/api/3/notificationscheme/{notificationSchemeId}
           * operationId: deleteNotificationScheme
           * sum: Delete notification scheme
           * doc: Deletes a notification scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the notification scheme isn't found.
           */
          $delete(): Promise<unknown>;
          /* Endpoint path: /rest/api/3/notificationscheme/{notificationSchemeId}/notification */
          notification: {
            /* Endpoint path: /rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId} */
            "$"(notificationId: string): {
              /**
               * Method: delete /rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}
               * operationId: removeNotificationFromNotificationScheme
               * sum: Remove notification from notification scheme
               * doc: Removes a notification from a notification scheme.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request isn't valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user doesn't have the necessary permission.
               * 404: Returned if either the notification scheme or notification isn't found.
               */
              $delete(): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/permissions */
      permissions: {
        /**
         * Method: get /rest/api/3/permissions
         * operationId: getAllPermissions
         * sum: Get all permissions
         * doc: Returns all permissions, including:
         * 
         *  *  global permissions.
         *  *  project permissions.
         *  *  global permissions added by plugins.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $get(): Promise<Permissions>;
        /* Endpoint path: /rest/api/3/permissions/check */
        check: {
          /**
           * Method: post /rest/api/3/permissions/check
           * operationId: getBulkPermissions
           * sum: Get bulk permissions
           * doc: Returns:
           * 
           *  *  for a list of global permissions, the global permissions granted to a user.
           *  *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.
           * 
           * If no account ID is provided, the operation returns details for the logged in user.
           * 
           * Note that:
           * 
           *  *  Invalid project and issue IDs are ignored.
           *  *  A maximum of 1000 projects and 1000 issues can be checked.
           *  *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.
           *  *  Empty strings in `projectPermissions.permissions` are ignored.
           * 
           * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
           * 
           *  *  **Classic**: `read:jira-work`
           *  *  **Granular**: `read:permission:jira`
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.
           * 200: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  `projectPermissions` is provided without at least one project permission being provided.
           *  *  an invalid global permission is provided in the global permissions list.
           *  *  an invalid project permission is provided in the project permissions list.
           *  *  more than 1000 valid project IDs or more than 1000 valid issue IDs are provided.
           *  *  an invalid account ID is provided.
           * 403: Returned if the user does not have the necessary permission.
           */
          $post(body: BulkPermissionsRequestBean): Promise<BulkPermissionGrants>;
        };
        /* Endpoint path: /rest/api/3/permissions/project */
        project: {
          /**
           * Method: post /rest/api/3/permissions/project
           * operationId: getPermittedProjects
           * sum: Get permitted projects
           * doc: Returns all the projects where the user is granted a list of project permissions.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 400: Returned if a project permission is not found.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $post(body: PermissionsKeysBean): Promise<PermittedProjects>;
        };
      };
      /* Endpoint path: /rest/api/3/permissionscheme */
      permissionscheme: {
        /**
         * Method: get /rest/api/3/permissionscheme
         * operationId: getAllPermissionSchemes
         * sum: Get all permission schemes
         * doc: Returns all permission schemes.
         * 
         * ### About permission schemes and grants ###
         * 
         * A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.
         * 
         * #### Holder object ####
         * 
         * The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.
         * 
         * The `holder` object is defined by the following properties:
         * 
         *  *  `type` Identifies the user or group (see the list of types below).
         *  *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
         *  *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`
         * 
         * The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):
         * 
         *  *  `anyone` Grant for anonymous users.
         *  *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
         *  *  `assignee` Grant for the user currently assigned to an issue.
         *  *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
         *  *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
         *  *  `projectLead` Grant for a project lead.
         *  *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
         *  *  `reporter` Grant for the user who reported the issue.
         *  *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
         *  *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
         *  *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
         * 
         * #### Built-in permissions ####
         * 
         * The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.
         * 
         * **Project permissions**
         * 
         *  *  `ADMINISTER_PROJECTS`
         *  *  `BROWSE_PROJECTS`
         *  *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
         *  *  `SERVICEDESK_AGENT` (Jira Service Desk only)
         *  *  `VIEW_DEV_TOOLS` (Jira Software only)
         *  *  `VIEW_READONLY_WORKFLOW`
         * 
         * **Issue permissions**
         * 
         *  *  `ASSIGNABLE_USER`
         *  *  `ASSIGN_ISSUES`
         *  *  `CLOSE_ISSUES`
         *  *  `CREATE_ISSUES`
         *  *  `DELETE_ISSUES`
         *  *  `EDIT_ISSUES`
         *  *  `LINK_ISSUES`
         *  *  `MODIFY_REPORTER`
         *  *  `MOVE_ISSUES`
         *  *  `RESOLVE_ISSUES`
         *  *  `SCHEDULE_ISSUES`
         *  *  `SET_ISSUE_SECURITY`
         *  *  `TRANSITION_ISSUES`
         * 
         * **Voters and watchers permissions**
         * 
         *  *  `MANAGE_WATCHERS`
         *  *  `VIEW_VOTERS_AND_WATCHERS`
         * 
         * **Comments permissions**
         * 
         *  *  `ADD_COMMENTS`
         *  *  `DELETE_ALL_COMMENTS`
         *  *  `DELETE_OWN_COMMENTS`
         *  *  `EDIT_ALL_COMMENTS`
         *  *  `EDIT_OWN_COMMENTS`
         * 
         * **Attachments permissions**
         * 
         *  *  `CREATE_ATTACHMENTS`
         *  *  `DELETE_ALL_ATTACHMENTS`
         *  *  `DELETE_OWN_ATTACHMENTS`
         * 
         * **Time tracking permissions**
         * 
         *  *  `DELETE_ALL_WORKLOGS`
         *  *  `DELETE_OWN_WORKLOGS`
         *  *  `EDIT_ALL_WORKLOGS`
         *  *  `EDIT_OWN_WORKLOGS`
         *  *  `WORK_ON_ISSUES`
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(args?: {expand?: string}): Promise<PermissionSchemes>;
        /**
         * Method: post /rest/api/3/permissionscheme
         * operationId: createPermissionScheme
         * sum: Create permission scheme
         * doc: Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the permission scheme is created.
         * 400: Returned if the request is invalid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission or the feature is not available in the Jira plan.
         */
        $post(body: PermissionScheme): Promise<PermissionScheme>;
        /* Endpoint path: /rest/api/3/permissionscheme/{schemeId} */
        "$"(schemeId: string): {
          /**
           * Method: get /rest/api/3/permissionscheme/{schemeId}
           * operationId: getPermissionScheme
           * sum: Get permission scheme
           * doc: Returns a permission scheme.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the permission scheme is not found or the user does not have the necessary permission.
           */
          $get(args?: {expand?: string}): Promise<PermissionScheme>;
          /**
           * Method: delete /rest/api/3/permissionscheme/{schemeId}
           * operationId: deletePermissionScheme
           * sum: Delete permission scheme
           * doc: Deletes a permission scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the permission scheme is deleted.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the permission scheme is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/permissionscheme/{schemeId}
           * operationId: updatePermissionScheme
           * sum: Update permission scheme
           * doc: Updates a permission scheme. Below are some important things to note when using this resource:
           * 
           *  *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
           *  *  If you want to update only the name and description, then do not send a permissions list in the request.
           *  *  Sending an empty list will remove all permission grants from the permission scheme.
           * 
           * If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).
           * 
           * See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the scheme is updated.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if:
           * 
           *  *  the user does not have the necessary permission to update permission schemes.
           *  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans.
           * 404: Returned if the permission scheme is not found.
           */
          $put(body: PermissionScheme): Promise<PermissionScheme>;
          /* Endpoint path: /rest/api/3/permissionscheme/{schemeId}/permission */
          permission: {
            /**
             * Method: get /rest/api/3/permissionscheme/{schemeId}/permission
             * operationId: getPermissionSchemeGrants
             * sum: Get permission scheme grants
             * doc: Returns all permission grants for a permission scheme.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the permission schemes is not found or the user does not have the necessary permission.
             */
            $get(args?: {expand?: string}): Promise<PermissionGrants>;
            /**
             * Method: post /rest/api/3/permissionscheme/{schemeId}/permission
             * operationId: createPermissionGrant
             * sum: Create permission grant
             * doc: Creates a permission grant in a permission scheme.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 201: Returned if the scheme permission is created.
             * 400: Returned if the value for expand is invalid or the same permission grant is present.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             */
            $post(body: PermissionGrant): Promise<PermissionGrant>;
            /* Endpoint path: /rest/api/3/permissionscheme/{schemeId}/permission/{permissionId} */
            "$"(permissionId: string): {
              /**
               * Method: get /rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}
               * operationId: getPermissionSchemeGrant
               * sum: Get permission scheme grant
               * doc: Returns a permission grant.
               * 
               * **[Permissions](#permissions) required:** Permission to access Jira.
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission.
               */
              $get(args?: {expand?: string}): Promise<PermissionGrant>;
              /**
               * Method: delete /rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}
               * operationId: deletePermissionSchemeEntity
               * sum: Delete permission scheme grant
               * doc: Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the permission grant is deleted.
               * 400: Returned if permission grant with the provided ID is not found.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               */
              $delete(): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/priority */
      priority: {
        /**
         * Method: get /rest/api/3/priority
         * operationId: getPriorities
         * sum: Get priorities
         * doc: Returns the list of all issue priorities.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect.
         */
        $get(): Promise<Array<Priority>>;
        /**
         * Method: post /rest/api/3/priority
         * operationId: createPriority
         * sum: Create priority
         * doc: Creates an issue priority.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request isn't valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user doesn't have the necessary permission.
         */
        $post(body: CreatePriorityDetails): Promise<PriorityId>;
        /* Endpoint path: /rest/api/3/priority/default */
        default: {
          /**
           * Method: put /rest/api/3/priority/default
           * operationId: setDefaultPriority
           * sum: Set default priority
           * doc: Sets default issue priority.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue priority isn't found.
           */
          $put(body: SetDefaultPriorityRequest): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/priority/move */
        move: {
          /**
           * Method: put /rest/api/3/priority/move
           * operationId: movePriorities
           * sum: Move priorities
           * doc: Changes the order of issue priorities.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue priority isn't found.
           */
          $put(body: ReorderIssuePriorities): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/priority/search */
        search: {
          /**
           * Method: get /rest/api/3/priority/search
           * operationId: searchPriorities
           * sum: Search priorities
           * doc: Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:
           * 
           *  *  a list of priority IDs. Any invalid priority IDs are ignored.
           *  *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.
           *  *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {startAt?: string, maxResults?: string, id?: Array<string>, projectId?: Array<string>, priorityName?: string, onlyDefault?: boolean, expand?: string}): Promise<PageBeanPriority>;
        };
        /* Endpoint path: /rest/api/3/priority/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/priority/{id}
           * operationId: getPriority
           * sum: Get priority
           * doc: Returns an issue priority.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect.
           * 404: Returned if the issue priority isn't found.
           */
          $get(): Promise<Priority>;
          /**
           * Method: delete /rest/api/3/priority/{id}
           * operationId: deletePriority
           * sum: Delete priority
           * doc: Deletes an issue priority.
           * 
           * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 303: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue priority isn't found.
           * 409: Returned if a task to delete the issue priority is already running.
           */
          $delete(): Promise<void>;
          /**
           * Method: put /rest/api/3/priority/{id}
           * operationId: updatePriority
           * sum: Update priority
           * doc: Updates an issue priority.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue priority isn't found.
           */
          $put(body: UpdatePriorityDetails): Promise<unknown>;
        };
      };
      /* Endpoint path: /rest/api/3/priorityscheme */
      priorityscheme: {
        /**
         * Method: get /rest/api/3/priorityscheme
         * operationId: getPrioritySchemes
         * sum: Get priority schemes
         * doc: Returns a [paginated](#pagination) list of priority schemes.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 400: Returned if the request isn't valid.
         * 401: Returned if the authentication credentials are incorrect.
         */
        $get(args?: {startAt?: string, maxResults?: string, priorityId?: Array<number>, schemeId?: Array<number>, schemeName?: string, onlyDefault?: boolean, orderBy?: string, expand?: string}): Promise<PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects>;
        /**
         * Method: post /rest/api/3/priorityscheme
         * operationId: createPriorityScheme
         * sum: Create priority scheme
         * doc: Creates a new priority scheme.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is completed.
         * 202: Returned if the request is accepted.
         * 400: Returned if the request isn't valid.
         * 401: Returned if the authentication credentials are incorrect.
         * 403: Returned if the user doesn't have the necessary permissions.
         * 409: Returned if an action with this priority scheme is still in progress.
         */
        $post(body: CreatePrioritySchemeDetails): Promise<PrioritySchemeId>;
        /* Endpoint path: /rest/api/3/priorityscheme/mappings */
        mappings: {
          /**
           * Method: post /rest/api/3/priorityscheme/mappings
           * operationId: suggestedPrioritiesForMappings
           * sum: Suggested priorities for mappings
           * doc: Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $post(body: SuggestedMappingsRequestBean): Promise<PageBeanPriorityWithSequence>;
        };
        /* Endpoint path: /rest/api/3/priorityscheme/priorities */
        priorities: {
          /* Endpoint path: /rest/api/3/priorityscheme/priorities/available */
          available: {
            /**
             * Method: get /rest/api/3/priorityscheme/priorities/available
             * operationId: getAvailablePrioritiesByPriorityScheme
             * sum: Get available priorities by priority scheme
             * doc: Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira.
             * 200: Returned if the request is successful.
             * 400: Returned if the request isn't valid.
             * 401: Returned if the authentication credentials are incorrect.
             */
            $get(args: {startAt?: string, maxResults?: string, query?: string, schemeId: string, exclude?: Array<string>}): Promise<PageBeanPriorityWithSequence>;
          };
        };
        /* Endpoint path: /rest/api/3/priorityscheme/{schemeId} */
        "$"(schemeId: string): {
          /**
           * Method: delete /rest/api/3/priorityscheme/{schemeId}
           * operationId: deletePriorityScheme
           * sum: Delete priority scheme
           * doc: Deletes a priority scheme.
           * 
           * This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permissions.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/priorityscheme/{schemeId}
           * operationId: updatePriorityScheme
           * sum: Update priority scheme
           * doc: Updates a priority scheme. This includes its details, the lists of priorities and projects in it
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 202: Returned if the request is accepted.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permissions.
           * 409: Returned if an action with this priority scheme is still in progress.
           */
          $put(body: UpdatePrioritySchemeRequestBean): Promise<UpdatePrioritySchemeResponseBean>;
          /* Endpoint path: /rest/api/3/priorityscheme/{schemeId}/priorities */
          priorities: {
            /**
             * Method: get /rest/api/3/priorityscheme/{schemeId}/priorities
             * operationId: getPrioritiesByPriorityScheme
             * sum: Get priorities by priority scheme
             * doc: Returns a [paginated](#pagination) list of priorities by scheme.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira.
             * 200: Returned if the request is successful.
             * 400: Returned if the request isn't valid.
             * 401: Returned if the authentication credentials are incorrect.
             */
            $get(args?: {startAt?: string, maxResults?: string}): Promise<PageBeanPriorityWithSequence>;
          };
          /* Endpoint path: /rest/api/3/priorityscheme/{schemeId}/projects */
          projects: {
            /**
             * Method: get /rest/api/3/priorityscheme/{schemeId}/projects
             * operationId: getProjectsByPriorityScheme
             * sum: Get projects by priority scheme
             * doc: Returns a [paginated](#pagination) list of projects by scheme.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira.
             * 200: Returned if the request is successful.
             * 400: Returned if the request isn't valid.
             * 401: Returned if the authentication credentials are incorrect.
             */
            $get(args?: {startAt?: string, maxResults?: string, projectId?: Array<number>, query?: string}): Promise<PageBeanProject>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/project */
      project: {
        /**
         * Method: get /rest/api/3/project
         * operationId: getAllProjects
         * sum: Get all projects
         * doc: Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(args?: {expand?: string, recent?: number, properties?: Array<string>}): Promise<Array<Project>>;
        /**
         * Method: post /rest/api/3/project
         * operationId: createProject
         * sum: Create project
         * doc: Creates a project based on a project type template, as shown in the following table:
         * 
         * | Project Type Key | Project Template Key |  
         * |--|--|  
         * | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  
         * | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |  
         * | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  
         * The project types are available according to the installed Jira features as follows:
         * 
         *  *  Jira Core, the default, enables `business` projects.
         *  *  Jira Service Management enables `service_desk` projects.
         *  *  Jira Software enables `software` projects.
         * 
         * To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the project is created.
         * 400: Returned if the request is not valid and the project could not be created.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have permission to create projects.
         */
        $post(body: CreateProjectDetails): Promise<ProjectIdentifiers>;
        /* Endpoint path: /rest/api/3/project/recent */
        recent: {
          /**
           * Method: get /rest/api/3/project/recent
           * operationId: getRecent
           * sum: Get recent projects
           * doc: Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** Projects are returned only where the user has one of:
           * 
           *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
           *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {expand?: string, properties?: Array<StringList>}): Promise<Array<Project>>;
        };
        /* Endpoint path: /rest/api/3/project/search */
        search: {
          /**
           * Method: get /rest/api/3/project/search
           * operationId: searchProjects
           * sum: Get projects paginated
           * doc: Returns a [paginated](#pagination) list of projects visible to the user.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** Projects are returned only where the user has one of:
           * 
           *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
           *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if no projects matching the search criteria are found.
           */
          $get(args?: {startAt?: number, maxResults?: number, orderBy?: string, id?: Array<number>, keys?: Array<string>, query?: string, typeKey?: string, categoryId?: number, action?: string, expand?: string, status?: Array<string>, properties?: Array<StringList>, propertyQuery?: string}): Promise<PageBeanProject>;
        };
        /* Endpoint path: /rest/api/3/project/type */
        type: {
          /**
           * Method: get /rest/api/3/project/type
           * operationId: getAllProjectTypes
           * sum: Get all project types
           * doc: Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $get(): Promise<Array<ProjectType>>;
          /* Endpoint path: /rest/api/3/project/type/accessible */
          accessible: {
            /**
             * Method: get /rest/api/3/project/type/accessible
             * operationId: getAllAccessibleProjectTypes
             * sum: Get licensed project types
             * doc: Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.
             * 200: Returned if the request is successful.
             */
            $get(): Promise<Array<ProjectType>>;
          };
          /* Endpoint path: /rest/api/3/project/type/{projectTypeKey} */
          "$"(projectTypeKey: string): {
            /**
             * Method: get /rest/api/3/project/type/{projectTypeKey}
             * operationId: getProjectTypeByKey
             * sum: Get project type by key
             * doc: Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** None.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect.
             * 404: Returned if the project type is not found.
             */
            $get(): Promise<ProjectType>;
            /* Endpoint path: /rest/api/3/project/type/{projectTypeKey}/accessible */
            accessible: {
              /**
               * Method: get /rest/api/3/project/type/{projectTypeKey}/accessible
               * operationId: getAccessibleProjectTypeByKey
               * sum: Get accessible project type by key
               * doc: Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.
               * 
               * **[Permissions](#permissions) required:** Permission to access Jira.
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the project type is not accessible to the user.
               */
              $get(): Promise<ProjectType>;
            };
          };
        };
        /* Endpoint path: /rest/api/3/project/{projectIdOrKey} */
        "$"(projectIdOrKey: string): {
          /**
           * Method: get /rest/api/3/project/{projectIdOrKey}
           * operationId: getProject
           * sum: Get project
           * doc: Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
           * 200: Returned if successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the project is not found or the user does not have permission to view it.
           */
          $get(args?: {expand?: string, properties?: Array<string>}): Promise<Project>;
          /**
           * Method: delete /rest/api/3/project/{projectIdOrKey}
           * operationId: deleteProject
           * sum: Delete project
           * doc: Deletes a project.
           * 
           * You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the project is deleted.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the project is not found or the user does not have permission to delete it.
           */
          $delete(args?: {enableUndo?: boolean}): Promise<unknown>;
          /**
           * Method: put /rest/api/3/project/{projectIdOrKey}
           * operationId: updateProject
           * sum: Update project
           * doc: Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.
           * 
           * All parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
           * 200: Returned if the project is updated.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if:
           * 
           *  *  the user does not have the necessary permission to update project details.
           *  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans.
           * 404: Returned if the project is not found.
           */
          $put(body: UpdateProjectDetails): Promise<Project>;
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/archive */
          archive: {
            /**
             * Method: post /rest/api/3/project/{projectIdOrKey}/archive
             * operationId: archiveProject
             * sum: Archive project
             * doc: Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permissions.
             * 404: Returned if the project is not found.
             */
            $post(): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/avatar */
          avatar: {
            /**
             * Method: put /rest/api/3/project/{projectIdOrKey}/avatar
             * operationId: updateProjectAvatar
             * sum: Set project avatar
             * doc: Sets the avatar displayed for a project.
             * 
             * Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.
             * 
             * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
             * 204: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have permission to administer the project.
             * 404: Returned if the project or avatar is not found or the user does not have permission to view the project.
             */
            $put(body: Avatar): Promise<unknown>;
            /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/avatar/{id} */
            "$"(id: string): {
              /**
               * Method: delete /rest/api/3/project/{projectIdOrKey}/avatar/{id}
               * operationId: deleteProjectAvatar
               * sum: Delete project avatar
               * doc: Deletes a custom avatar from a project. Note that system avatars cannot be deleted.
               * 
               * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
               * 204: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the avatar is a system avatar or the user does not have permission to administer the project.
               * 404: Returned if the project or avatar is not found or the user does not have permission to view the project.
               */
              $delete(): Promise<unknown>;
            };
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/avatar2 */
          avatar2: {
            /**
             * Method: post /rest/api/3/project/{projectIdOrKey}/avatar2
             * operationId: createProjectAvatar
             * sum: Load project avatar
             * doc: Loads an avatar for a project.
             * 
             * Specify the avatar's local file location in the body of the request. Also, include the following headers:
             * 
             *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
             *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
             * 
             * For example:  
             * `curl --request POST `
             * 
             * `--user email@example.com:<api_token> `
             * 
             * `--header 'X-Atlassian-Token: no-check' `
             * 
             * `--header 'Content-Type: image/< image_type>' `
             * 
             * `--data-binary "<@/path/to/file/with/your/avatar>" `
             * 
             * `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`
             * 
             * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
             * 
             * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
             * 
             * After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
             * 
             * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
             * 201: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  an image isn't included in the request.
             *  *  the image type is unsupported.
             *  *  the crop parameters extend the crop area beyond the edge of the image.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have permission to administer the project or an anonymous call is made to the operation.
             * 404: Returned if the project is not found or the user does not have permission to view the project.
             */
            $post(): Promise<Avatar>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/avatars */
          avatars: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/avatars
             * operationId: getAllProjectAvatars
             * sum: Get all project avatars
             * doc: Returns all project avatars, grouped by system and custom avatars.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or the user does not have permission to view the project.
             */
            $get(): Promise<ProjectAvatars>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/classification-level */
          "classification-level": {
            /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/classification-level/default */
            default: {
              /**
               * Method: get /rest/api/3/project/{projectIdOrKey}/classification-level/default
               * operationId: getDefaultProjectClassification
               * sum: Get the default data classification level of a project
               * doc: Returns the default data classification for a project.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
               *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
               *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the user does not have the necessary permission.
               * 404: Returned if the project is not found.
               */
              $get(): Promise<unknown>;
              /**
               * Method: delete /rest/api/3/project/{projectIdOrKey}/classification-level/default
               * operationId: removeDefaultProjectClassification
               * sum: Remove the default data classification level from a project
               * doc: Remove the default data classification level for a project.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
               *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the user does not have the necessary permission.
               * 404: Returned if the project is not found.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/project/{projectIdOrKey}/classification-level/default
               * operationId: updateDefaultProjectClassification
               * sum: Update the default data classification level of a project
               * doc: Updates the default data classification level for a project.
               * 
               * **[Permissions](#permissions) required:**
               * 
               *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
               *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the user does not have the necessary permission.
               * 404: Returned if the project is not found.
               */
              $put(body: UpdateDefaultProjectClassificationBean): Promise<unknown>;
            };
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/component */
          component: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/component
             * operationId: getProjectComponentsPaginated
             * sum: Get project components paginated
             * doc: Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.
             * 
             * If your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or the user does not have permission to view it.
             */
            $get(args?: {startAt?: number, maxResults?: number, orderBy?: string, componentSource?: string, query?: string}): Promise<PageBeanComponentWithIssueCount>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/components */
          components: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/components
             * operationId: getProjectComponents
             * sum: Get project components
             * doc: Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.
             * 
             * If your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or the user does not have permission to view it.
             */
            $get(args?: {componentSource?: string}): Promise<Array<ProjectComponent>>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/delete */
          delete: {
            /**
             * Method: post /rest/api/3/project/{projectIdOrKey}/delete
             * operationId: deleteProjectAsynchronously
             * sum: Delete project asynchronously
             * doc: Deletes a project asynchronously.
             * 
             * This operation is:
             * 
             *  *  transactional, that is, if part of the delete fails the project is not deleted.
             *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 303: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or the user does not have the necessary permission.
             */
            $post(): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/features */
          features: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/features
             * operationId: getFeaturesForProject
             * sum: Get project features
             * doc: Returns the list of features for a project.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the required permissions.
             * 404: Returned if the project is not found.
             */
            $get(): Promise<ContainerForProjectFeatures>;
            /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/features/{featureKey} */
            "$"(featureKey: string): {
              /**
               * Method: put /rest/api/3/project/{projectIdOrKey}/features/{featureKey}
               * operationId: toggleFeatureForProject
               * sum: Set project feature state
               * doc: Sets the state of a project feature.
               * 200: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the project or project feature is not found.
               */
              $put(body: ProjectFeatureState): Promise<ContainerForProjectFeatures>;
            };
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/properties */
          properties: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/properties
             * operationId: getProjectPropertyKeys
             * sum: Get project property keys
             * doc: Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect.
             * 403: Returned if the user does not have permission to view the project.
             * 404: Returned if the project is not found.
             */
            $get(): Promise<PropertyKeys>;
            /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/properties/{propertyKey} */
            "$"(propertyKey: string): {
              /**
               * Method: get /rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}
               * operationId: getProjectProperty
               * sum: Get project property
               * doc: Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
               * 200: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect.
               * 403: Returned if the user does not have permission to view the project.
               * 404: Returned if the project or property is not found.
               */
              $get(): Promise<EntityProperty>;
              /**
               * Method: delete /rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}
               * operationId: deleteProjectProperty
               * sum: Delete project property
               * doc: Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
               * 204: Returned if the project property is deleted.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect.
               * 403: Returned if the user does not have permission to administer the project.
               * 404: Returned if the project or property is not found.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}
               * operationId: setProjectProperty
               * sum: Set project property
               * doc: Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.
               * 
               * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.
               * 200: Returned if the project property is updated.
               * 201: Returned if the project property is created.
               * 400: Returned if the project key or id is invalid.
               * 401: Returned if the authentication credentials are incorrect.
               * 403: Returned if the user does not have permission to administer the project.
               * 404: Returned if the project is not found.
               */
              $put(body: any /* 264 */): Promise<unknown>;
            };
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/restore */
          restore: {
            /**
             * Method: post /rest/api/3/project/{projectIdOrKey}/restore
             * operationId: restore
             * sum: Restore deleted or archived project
             * doc: Restores a project that has been archived or placed in the Jira recycle bin.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or the user does not have the necessary permission.
             */
            $post(): Promise<Project>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/role */
          role: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/role
             * operationId: getProjectRoles
             * sum: Get project roles for project
             * doc: Returns a list of [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) for the project returning the name and self URL for each role.
             * 
             * Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project.
             * 404: Returned if the project is not found or or if the user does not have administrative permissions for the project.
             */
            $get(): Promise<object>;
            /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/role/{id} */
            "$"(id: string): {
              /**
               * Method: get /rest/api/3/project/{projectIdOrKey}/role/{id}
               * operationId: getProjectRole
               * sum: Get project role for project
               * doc: Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.
               * 
               * To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if:
               * 
               *  *  the project or project role is not found.
               *  *  the user does not have administrative permission.
               */
              $get(args?: {excludeInactiveUsers?: boolean}): Promise<ProjectRole>;
              /**
               * Method: delete /rest/api/3/project/{projectIdOrKey}/role/{id}
               * operationId: deleteActor
               * sum: Delete actors from project role
               * doc: Deletes actors from a project role for the project.
               * 
               * To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 404: Returned if:
               * 
               *  *  the project or project role is not found.
               *  *  the calling user does not have administrative permission.
               */
              $delete(args?: {user?: string, group?: string, groupId?: string}): Promise<unknown>;
              /**
               * Method: post /rest/api/3/project/{projectIdOrKey}/role/{id}
               * operationId: addActorUsers
               * sum: Add actors to project role
               * doc: Adds actors to a project role for the project.
               * 
               * To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful. The complete list of actors for the project is returned.
               * 
               * For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a `user` actor for this project.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project.
               * 404: Returned if:
               * 
               *  *  the project is not found.
               *  *  the user or group is not found.
               *  *  the group or user is not active.
               */
              $post(body: ActorsMap): Promise<ProjectRole>;
              /**
               * Method: put /rest/api/3/project/{projectIdOrKey}/role/{id}
               * operationId: setActors
               * sum: Set actors for project role
               * doc: Sets the actors for a project role for a project, replacing all existing actors.
               * 
               * To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).
               * 
               * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful. The complete list of actors for the project is returned.
               * 400: Returned if the request is not valid.
               * 401: Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project.
               * 404: Returned if:
               * 
               *  *  the project is not found.
               *  *  a user or group is not found.
               *  *  a group or user is not active.
               */
              $put(body: ProjectRoleActorsUpdateBean): Promise<ProjectRole>;
            };
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/roledetails */
          roledetails: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/roledetails
             * operationId: getProjectRoleDetails
             * sum: Get project role details
             * doc: Returns all [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) and the details for each role. Note that the list of project roles is common to all projects.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or if the user does not have the necessary permissions for the project.
             */
            $get(args?: {currentMember?: boolean, excludeConnectAddons?: boolean}): Promise<Array<ProjectRoleDetails>>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/statuses */
          statuses: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/statuses
             * operationId: getAllStatuses
             * sum: Get all statuses for project
             * doc: Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or the user does not have permission to view it.
             */
            $get(): Promise<Array<IssueTypeWithStatus>>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/version */
          version: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/version
             * operationId: getProjectVersionsPaginated
             * sum: Get project versions paginated
             * doc: Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 404: Returned if the project is not found or the user does not have permission to view it.
             */
            $get(args?: {startAt?: number, maxResults?: number, orderBy?: string, query?: string, status?: string, expand?: string}): Promise<PageBeanVersion>;
          };
          /* Endpoint path: /rest/api/3/project/{projectIdOrKey}/versions */
          versions: {
            /**
             * Method: get /rest/api/3/project/{projectIdOrKey}/versions
             * operationId: getProjectVersions
             * sum: Get project versions
             * doc: Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 404: Returned if the project is not found or the user does not have permission to view it.
             */
            $get(args?: {expand?: string}): Promise<Array<Version>>;
          };
        };
        /* Endpoint path: /rest/api/3/project/{projectId} */
        "$"(projectId: string): {
          /* Endpoint path: /rest/api/3/project/{projectId}/email */
          email: {
            /**
             * Method: get /rest/api/3/project/{projectId}/email
             * operationId: getProjectEmail
             * sum: Get project's sender email
             * doc: Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
             * 
             * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have permission to read project.
             * 404: Returned if the project or project's sender email address is not found.
             */
            $get(): Promise<ProjectEmailAddress>;
            /**
             * Method: put /rest/api/3/project/{projectId}/email
             * operationId: updateProjectEmail
             * sum: Set project's sender email
             * doc: Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
             * 
             * If `emailAddress` is an empty string, the default email address is restored.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
             * 204: Returned if the project's sender email address is successfully set.
             * 400: Returned if the request is not valid, if the email address is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have permission to administer the project.
             * 404: Returned if the project is not found.
             */
            $put(body: ProjectEmailAddress): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/project/{projectId}/hierarchy */
          hierarchy: {
            /**
             * Method: get /rest/api/3/project/{projectId}/hierarchy
             * operationId: getHierarchy
             * sum: Get project issue type hierarchy
             * doc: Get the issue type hierarchy for a next-gen project.
             * 
             * The issue type hierarchy for a project consists of:
             * 
             *  *  *Epic* at level 1 (optional).
             *  *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
             *  *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.
             * 
             * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or the user does not have the necessary permission.
             */
            $get(): Promise<ProjectIssueTypeHierarchy>;
          };
        };
        /* Endpoint path: /rest/api/3/project/{projectKeyOrId} */
        "$"(projectKeyOrId: string): {
          /* Endpoint path: /rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme */
          issuesecuritylevelscheme: {
            /**
             * Method: get /rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme
             * operationId: getProjectIssueSecurityScheme
             * sum: Get project issue security scheme
             * doc: Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the project is visible to the user but the user doesn't have administrative permissions.
             * 404: Returned if the project is not found or the user does not have permission to view it.
             */
            $get(): Promise<SecurityScheme>;
          };
          /* Endpoint path: /rest/api/3/project/{projectKeyOrId}/notificationscheme */
          notificationscheme: {
            /**
             * Method: get /rest/api/3/project/{projectKeyOrId}/notificationscheme
             * operationId: getNotificationSchemeForProject
             * sum: Get project notification scheme
             * doc: Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project is not found or the user is not an administrator.
             */
            $get(args?: {expand?: string}): Promise<NotificationScheme>;
          };
          /* Endpoint path: /rest/api/3/project/{projectKeyOrId}/permissionscheme */
          permissionscheme: {
            /**
             * Method: get /rest/api/3/project/{projectKeyOrId}/permissionscheme
             * operationId: getAssignedPermissionScheme
             * sum: Get assigned permission scheme
             * doc: Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have permission to view the project's configuration.
             * 404: Returned if the project is not found or the user does not have permission to view the project.
             */
            $get(args?: {expand?: string}): Promise<PermissionScheme>;
            /**
             * Method: put /rest/api/3/project/{projectKeyOrId}/permissionscheme
             * operationId: assignPermissionScheme
             * sum: Assign permission scheme
             * doc: Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if:
             * 
             *  *  the user does not have the necessary permission to edit the project's configuration.
             *  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be assigned to projects on free plans.
             * 404: Returned if the project or permission scheme is not found.
             */
            $put(body: IdBean): Promise<PermissionScheme>;
          };
          /* Endpoint path: /rest/api/3/project/{projectKeyOrId}/securitylevel */
          securitylevel: {
            /**
             * Method: get /rest/api/3/project/{projectKeyOrId}/securitylevel
             * operationId: getSecurityLevelsForProject
             * sum: Get project issue security levels
             * doc: Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.
             * 200: Returned if the request is successful.
             * 404: Returned if the project is not found or the user does not have permission to view it.
             */
            $get(): Promise<ProjectIssueSecurityLevels>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/projectCategory */
      projectCategory: {
        /**
         * Method: get /rest/api/3/projectCategory
         * operationId: getAllProjectCategories
         * sum: Get all project categories
         * doc: Returns all project categories.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(): Promise<Array<ProjectCategory>>;
        /**
         * Method: post /rest/api/3/projectCategory
         * operationId: createProjectCategory
         * sum: Create project category
         * doc: Creates a project category.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if:
         * 
         *  *  `name` is not provided or exceeds 255 characters.
         *  *  `description` exceeds 1000 characters.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         * 409: Returned if the project category name is in use.
         */
        $post(body: ProjectCategory): Promise<ProjectCategory>;
        /* Endpoint path: /rest/api/3/projectCategory/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/projectCategory/{id}
           * operationId: getProjectCategoryById
           * sum: Get project category by ID
           * doc: Returns a project category.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the project category is not found.
           */
          $get(): Promise<ProjectCategory>;
          /**
           * Method: delete /rest/api/3/projectCategory/{id}
           * operationId: removeProjectCategory
           * sum: Delete project category
           * doc: Deletes a project category.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the project category is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/projectCategory/{id}
           * operationId: updateProjectCategory
           * sum: Update project category
           * doc: Updates a project category.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  `name` has been modified and exceeds 255 characters.
           *  *  `description` has been modified and exceeds 1000 characters.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the project category is not found.
           */
          $put(body: ProjectCategory): Promise<UpdatedProjectCategory>;
        };
      };
      /* Endpoint path: /rest/api/3/projectvalidate */
      projectvalidate: {
        /* Endpoint path: /rest/api/3/projectvalidate/key */
        key: {
          /**
           * Method: get /rest/api/3/projectvalidate/key
           * operationId: validateProjectKey
           * sum: Validate project key
           * doc: Validates a project key by confirming the key is a valid string and not in use.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $get(args?: {key?: string}): Promise<ErrorCollection>;
        };
        /* Endpoint path: /rest/api/3/projectvalidate/validProjectKey */
        validProjectKey: {
          /**
           * Method: get /rest/api/3/projectvalidate/validProjectKey
           * operationId: getValidProjectKey
           * sum: Get valid project key
           * doc: Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $get(args?: {key?: string}): Promise<string>;
        };
        /* Endpoint path: /rest/api/3/projectvalidate/validProjectName */
        validProjectName: {
          /**
           * Method: get /rest/api/3/projectvalidate/validProjectName
           * operationId: getValidProjectName
           * sum: Get valid project name
           * doc: Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect.
           * 404: Returned if a valid project name cannot be generated.
           */
          $get(args: {name: string}): Promise<string>;
        };
      };
      /* Endpoint path: /rest/api/3/resolution */
      resolution: {
        /**
         * Method: get /rest/api/3/resolution
         * operationId: getResolutions
         * sum: Get resolutions
         * doc: Returns a list of all issue resolution values.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(): Promise<Array<Resolution>>;
        /**
         * Method: post /rest/api/3/resolution
         * operationId: createResolution
         * sum: Create resolution
         * doc: Creates an issue resolution.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request isn't valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user doesn't have the necessary permission.
         */
        $post(body: CreateResolutionDetails): Promise<ResolutionId>;
        /* Endpoint path: /rest/api/3/resolution/default */
        default: {
          /**
           * Method: put /rest/api/3/resolution/default
           * operationId: setDefaultResolution
           * sum: Set default resolution
           * doc: Sets default issue resolution.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue resolution isn't found.
           */
          $put(body: SetDefaultResolutionRequest): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/resolution/move */
        move: {
          /**
           * Method: put /rest/api/3/resolution/move
           * operationId: moveResolutions
           * sum: Move resolutions
           * doc: Changes the order of issue resolutions.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue resolution isn't found.
           */
          $put(body: ReorderIssueResolutionsRequest): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/resolution/search */
        search: {
          /**
           * Method: get /rest/api/3/resolution/search
           * operationId: searchResolutions
           * sum: Search resolutions
           * doc: Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:
           * 
           *  *  a list of resolutions IDs.
           *  *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {startAt?: string, maxResults?: string, id?: Array<string>, onlyDefault?: boolean}): Promise<PageBeanResolutionJsonBean>;
        };
        /* Endpoint path: /rest/api/3/resolution/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/resolution/{id}
           * operationId: getResolution
           * sum: Get resolution
           * doc: Returns an issue resolution value.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the issue resolution value is not found.
           */
          $get(): Promise<Resolution>;
          /**
           * Method: delete /rest/api/3/resolution/{id}
           * operationId: deleteResolution
           * sum: Delete resolution
           * doc: Deletes an issue resolution.
           * 
           * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 303: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue resolution isn't found.
           * 409: Returned if a task to delete the issue resolution is already running.
           */
          $delete(args: {replaceWith: string}): Promise<void>;
          /**
           * Method: put /rest/api/3/resolution/{id}
           * operationId: updateResolution
           * sum: Update resolution
           * doc: Updates an issue resolution.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request isn't valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user doesn't have the necessary permission.
           * 404: Returned if the issue resolution isn't found.
           */
          $put(body: UpdateResolutionDetails): Promise<unknown>;
        };
      };
      /* Endpoint path: /rest/api/3/role */
      role: {
        /**
         * Method: get /rest/api/3/role
         * operationId: getAllProjectRoles
         * sum: Get all project roles
         * doc: Gets a list of all project roles, complete with project role details and default actors.
         * 
         * ### About project roles ###
         * 
         * [Project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).
         * 
         * Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.
         * 
         * #### Members and actors ####
         * 
         * In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.
         * 
         * Actors may be set as [default members](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/#Specifying-'default-members'-for-a-project-role) of the project role or set at the project level:
         * 
         *  *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
         *  *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have administrative permissions.
         */
        $get(): Promise<Array<ProjectRole>>;
        /**
         * Method: post /rest/api/3/role
         * operationId: createProjectRole
         * sum: Create project role
         * doc: Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.
         * 
         * *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have administrative permissions.
         * 409: Returned if a project role with the provided name already exists.
         */
        $post(body: CreateUpdateRoleRequestBean): Promise<ProjectRole>;
        /* Endpoint path: /rest/api/3/role/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/role/{id}
           * operationId: getProjectRoleById
           * sum: Get project role by ID
           * doc: Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have administrative permissions.
           * 404: Returned if the project role is not found.
           */
          $get(): Promise<ProjectRole>;
          /**
           * Method: delete /rest/api/3/role/{id}
           * operationId: deleteProjectRole
           * sum: Delete project role
           * doc: Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is invalid or if the replacement project role is not found.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have administrative permissions.
           * 404: Returned if the project role being deleted is not found.
           * 409: Returned if the project role being deleted is in use and a replacement project role is not specified in the request.
           */
          $delete(args?: {swap?: number}): Promise<unknown>;
          /**
           * Method: post /rest/api/3/role/{id}
           * operationId: partialUpdateProjectRole
           * sum: Partial update project role
           * doc: Updates either the project role's name or its description.
           * 
           * You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have administrative permissions.
           * 404: Returned if the project role is not found.
           */
          $post(body: CreateUpdateRoleRequestBean): Promise<ProjectRole>;
          /**
           * Method: put /rest/api/3/role/{id}
           * operationId: fullyUpdateProjectRole
           * sum: Fully update project role
           * doc: Updates the project role's name and description. You must include both a name and a description in the request.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have administrative permissions.
           * 404: Returned if the project role is not found.
           */
          $put(body: CreateUpdateRoleRequestBean): Promise<ProjectRole>;
          /* Endpoint path: /rest/api/3/role/{id}/actors */
          actors: {
            /**
             * Method: get /rest/api/3/role/{id}/actors
             * operationId: getProjectRoleActorsForRole
             * sum: Get default actors for project role
             * doc: Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have administrative permissions.
             * 404: Returned if the project role is not found.
             */
            $get(): Promise<ProjectRole>;
            /**
             * Method: delete /rest/api/3/role/{id}/actors
             * operationId: deleteProjectRoleActorsFromRole
             * sum: Delete default actors from project role
             * doc: Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.
             * 
             * Changing a project role's default actors does not affect project role members for projects already created.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have administrative permissions.
             * 404: Returned if the project role is not found.
             */
            $delete(args?: {user?: string, groupId?: string, group?: string}): Promise<ProjectRole>;
            /**
             * Method: post /rest/api/3/role/{id}/actors
             * operationId: addProjectRoleActorsToRole
             * sum: Add default actors to project role
             * doc: Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.
             * 
             * Changing a project role's default actors does not affect project role members for projects already created.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have administrative permissions.
             * 404: Returned if the project role is not found.
             */
            $post(body: ActorInputBean): Promise<ProjectRole>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/screens */
      screens: {
        /**
         * Method: get /rest/api/3/screens
         * operationId: getScreens
         * sum: Get screens
         * doc: Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $get(args?: {startAt?: number, maxResults?: number, id?: Array<number>, queryString?: string, scope?: Array<string>, orderBy?: string}): Promise<PageBeanScreen>;
        /**
         * Method: post /rest/api/3/screens
         * operationId: createScreen
         * sum: Create screen
         * doc: Creates a screen with a default field tab.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the required permissions.
         */
        $post(body: ScreenDetails): Promise<Screen>;
        /* Endpoint path: /rest/api/3/screens/addToDefault */
        addToDefault: {
          /* Endpoint path: /rest/api/3/screens/addToDefault/{fieldId} */
          "$"(fieldId: string): {
            /**
             * Method: post /rest/api/3/screens/addToDefault/{fieldId}
             * operationId: addFieldToDefaultScreen
             * sum: Add field to default screen
             * doc: Adds a field to the default tab of the default screen.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the field it not found or the field is already present.
             */
            $post(): Promise<unknown>;
          };
        };
        /* Endpoint path: /rest/api/3/screens/tabs */
        tabs: {
          /**
           * Method: get /rest/api/3/screens/tabs
           * operationId: getBulkScreenTabs
           * sum: Get bulk screen tabs
           * doc: Returns the list of tabs for a bulk of screens.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the screen ID or the tab ID is empty.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $get(args?: {screenId?: Array<number>, tabId?: Array<number>, startAt?: number, maxResult?: number}): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/screens/{screenId} */
        "$"(screenId: string): {
          /**
           * Method: delete /rest/api/3/screens/{screenId}
           * operationId: deleteScreen
           * sum: Delete screen
           * doc: Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.
           * 
           * Only screens used in classic projects can be deleted.
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the screen is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/screens/{screenId}
           * operationId: updateScreen
           * sum: Update screen
           * doc: Updates a screen. Only screens used in classic projects can be updated.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the screen is not found.
           */
          $put(body: UpdateScreenDetails): Promise<Screen>;
          /* Endpoint path: /rest/api/3/screens/{screenId}/availableFields */
          availableFields: {
            /**
             * Method: get /rest/api/3/screens/{screenId}/availableFields
             * operationId: getAvailableScreenFields
             * sum: Get available screen fields
             * doc: Returns the fields that can be added to a tab on a screen.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the screen is not found.
             */
            $get(): Promise<Array<ScreenableField>>;
          };
          /* Endpoint path: /rest/api/3/screens/{screenId}/tabs */
          tabs: {
            /**
             * Method: get /rest/api/3/screens/{screenId}/tabs
             * operationId: getAllScreenTabs
             * sum: Get all screen tabs
             * doc: Returns the list of tabs for a screen.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
             * 200: Returned if the request is successful.
             * 400: Returned if the screen ID is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the screen is not found.
             */
            $get(args?: {projectKey?: string}): Promise<Array<ScreenableTab>>;
            /**
             * Method: post /rest/api/3/screens/{screenId}/tabs
             * operationId: addScreenTab
             * sum: Create screen tab
             * doc: Creates a tab for a screen.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the screen is not found.
             */
            $post(body: ScreenableTab): Promise<ScreenableTab>;
            /* Endpoint path: /rest/api/3/screens/{screenId}/tabs/{tabId} */
            "$"(tabId: string): {
              /**
               * Method: delete /rest/api/3/screens/{screenId}/tabs/{tabId}
               * operationId: deleteScreenTab
               * sum: Delete screen tab
               * doc: Deletes a screen tab.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the screen or screen tab is not found.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/api/3/screens/{screenId}/tabs/{tabId}
               * operationId: renameScreenTab
               * sum: Update screen tab
               * doc: Updates the name of a screen tab.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the screen or screen tab is not found.
               */
              $put(body: ScreenableTab): Promise<ScreenableTab>;
              /* Endpoint path: /rest/api/3/screens/{screenId}/tabs/{tabId}/fields */
              fields: {
                /**
                 * Method: get /rest/api/3/screens/{screenId}/tabs/{tabId}/fields
                 * operationId: getAllScreenTabFields
                 * sum: Get all screen tab fields
                 * doc: Returns all fields for a screen tab.
                 * 
                 * **[Permissions](#permissions) required:**
                 * 
                 *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
                 * 200: Returned if the request is successful.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the screen or screen tab is not found.
                 */
                $get(args?: {projectKey?: string}): Promise<Array<ScreenableField>>;
                /**
                 * Method: post /rest/api/3/screens/{screenId}/tabs/{tabId}/fields
                 * operationId: addScreenTabField
                 * sum: Add screen tab field
                 * doc: Adds a field to a screen tab.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 200: Returned if the request is successful.
                 * 400: Returned if the request is invalid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the screen, screen tab, or field is not found.
                 */
                $post(body: AddFieldBean): Promise<ScreenableField>;
                /* Endpoint path: /rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id} */
                "$"(id: string): {
                  /**
                   * Method: delete /rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}
                   * operationId: removeScreenTabField
                   * sum: Remove screen tab field
                   * doc: Removes a field from a screen tab.
                   * 
                   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                   * 204: Returned if the request is successful.
                   * 400: Returned if the request is invalid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user does not have the necessary permission.
                   * 404: Returned if the screen, screen tab, or field is not found.
                   */
                  $delete(): Promise<unknown>;
                  /* Endpoint path: /rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move */
                  move: {
                    /**
                     * Method: post /rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move
                     * operationId: moveScreenTabField
                     * sum: Move screen tab field
                     * doc: Moves a screen tab field.
                     * 
                     * If `after` and `position` are provided in the request, `position` is ignored.
                     * 
                     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                     * 204: Returned if the request is successful.
                     * 400: Returned if the request is invalid.
                     * 401: Returned if the authentication credentials are incorrect or missing.
                     * 403: Returned if the user does not have the necessary permission.
                     * 404: Returned if the screen, screen tab, or field is not found or the field can't be moved to the requested position.
                     */
                    $post(body: MoveFieldBean): Promise<unknown>;
                  };
                };
              };
              /* Endpoint path: /rest/api/3/screens/{screenId}/tabs/{tabId}/move */
              move: {
                /* Endpoint path: /rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos} */
                "$"(pos: string): {
                  /**
                   * Method: post /rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}
                   * operationId: moveScreenTab
                   * sum: Move screen tab
                   * doc: Moves a screen tab.
                   * 
                   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                   * 204: Returned if the request is successful.
                   * 400: Returned if the request is invalid.
                   * 401: Returned if the authentication credentials are incorrect or missing.
                   * 403: Returned if the user does not have the necessary permission.
                   * 404: Returned if the screen or screen tab is not found or the position is invalid.
                   */
                  $post(): Promise<unknown>;
                };
              };
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/screenscheme */
      screenscheme: {
        /**
         * Method: get /rest/api/3/screenscheme
         * operationId: getScreenSchemes
         * sum: Get screen schemes
         * doc: Returns a [paginated](#pagination) list of screen schemes.
         * 
         * Only screen schemes used in classic projects are returned.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $get(args?: {startAt?: number, maxResults?: number, id?: Array<number>, expand?: string, queryString?: string, orderBy?: string}): Promise<PageBeanScreenScheme>;
        /**
         * Method: post /rest/api/3/screenscheme
         * operationId: createScreenScheme
         * sum: Create screen scheme
         * doc: Creates a screen scheme.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the required permissions.
         * 404: Returned if a screen used as one of the screen types in the screen scheme is not found.
         */
        $post(body: ScreenSchemeDetails): Promise<ScreenSchemeId>;
        /* Endpoint path: /rest/api/3/screenscheme/{screenSchemeId} */
        "$"(screenSchemeId: string): {
          /**
           * Method: delete /rest/api/3/screenscheme/{screenSchemeId}
           * operationId: deleteScreenScheme
           * sum: Delete screen scheme
           * doc: Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.
           * 
           * Only screens schemes used in classic projects can be deleted.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the screen scheme is deleted.
           * 400: Returned if the screen scheme is used in an issue type screen scheme.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the screen scheme is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/screenscheme/{screenSchemeId}
           * operationId: updateScreenScheme
           * sum: Update screen scheme
           * doc: Updates a screen scheme. Only screen schemes used in classic projects can be updated.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the screen scheme or a screen used as one of the screen types is not found.
           */
          $put(body: UpdateScreenSchemeDetails): Promise<unknown>;
        };
      };
      /* Endpoint path: /rest/api/3/search */
      search: {
        /**
         * Method: get /rest/api/3/search
         * operationId: searchForIssuesUsingJql
         * sum: Search for issues using JQL (GET)
         * doc: Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
         * 
         * If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
         * 
         *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         * 200: Returned if the request is successful.
         * 400: Returned if the JQL query is invalid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(args?: {jql?: string, startAt?: number, maxResults?: number, validateQuery?: string, fields?: Array<string>, expand?: string, properties?: Array<string>, fieldsByKeys?: boolean, failFast?: boolean}): Promise<SearchResults>;
        /**
         * Method: post /rest/api/3/search
         * operationId: searchForIssuesUsingJqlPost
         * sum: Search for issues using JQL (POST)
         * doc: Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
         * 
         * There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
         * 
         *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         * 200: Returned if the request is successful.
         * 400: Returned if the JQL query is invalid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $post(body: SearchRequestBean): Promise<SearchResults>;
        /* Endpoint path: /rest/api/3/search/id */
        id: {
          /**
           * Method: post /rest/api/3/search/id
           * operationId: searchForIssuesIds
           * sum: Search issue IDs using JQL
           * doc: Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
           * 
           * Use the [Search](#api-rest-api-3-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn't provide the total number of results for your query.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
           * 
           *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
           *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
           * 200: Returned if the request is successful.
           * 400: Returned if the JQL query is invalid.
           * 401: Returned if the authentication credentials are incorrect.
           */
          $post(body: IdSearchRequestBean): Promise<IdSearchResults>;
        };
      };
      /* Endpoint path: /rest/api/3/securitylevel */
      securitylevel: {
        /* Endpoint path: /rest/api/3/securitylevel/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/securitylevel/{id}
           * operationId: getIssueSecurityLevel
           * sum: Get issue security level
           * doc: Returns details of an issue security level.
           * 
           * Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect.
           * 404: Returned if the issue security level is not found.
           */
          $get(): Promise<SecurityLevel>;
        };
      };
      /* Endpoint path: /rest/api/3/serverInfo */
      serverInfo: {
        /**
         * Method: get /rest/api/3/serverInfo
         * operationId: getServerInfo
         * sum: Get Jira instance info
         * doc: Returns information about the Jira instance.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect.
         */
        $get(): Promise<ServerInformation>;
      };
      /* Endpoint path: /rest/api/3/settings */
      settings: {
        /* Endpoint path: /rest/api/3/settings/columns */
        columns: {
          /**
           * Method: get /rest/api/3/settings/columns
           * operationId: getIssueNavigatorDefaultColumns
           * sum: Get issue navigator default columns
           * doc: Returns the default issue navigator columns.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $get(): Promise<Array<ColumnItem>>;
          /**
           * Method: put /rest/api/3/settings/columns
           * operationId: setIssueNavigatorDefaultColumns
           * sum: Set issue navigator default columns
           * doc: Sets the default issue navigator columns.
           * 
           * The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:
           * 
           * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`
           * 
           * If no column details are sent, then all default columns are removed.
           * 
           * A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if invalid parameters are passed.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if a navigable field value is not found.
           */
          $put(): Promise<unknown>;
        };
      };
      /* Endpoint path: /rest/api/3/status */
      status: {
        /**
         * Method: get /rest/api/3/status
         * operationId: getStatuses
         * sum: Get all statuses
         * doc: Returns a list of all statuses associated with active workflows.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(): Promise<Array<StatusDetails>>;
        /* Endpoint path: /rest/api/3/status/{idOrName} */
        "$"(idOrName: string): {
          /**
           * Method: get /rest/api/3/status/{idOrName}
           * operationId: getStatus
           * sum: Get status
           * doc: Returns a status. The status must be associated with an active workflow to be returned.
           * 
           * If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.
           * 
           * This operation can be accessed anonymously.
           * 
           * [Permissions](#permissions) required: None.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if:
           * 
           *  *  the status is not found.
           *  *  the status is not associated with a workflow.
           *  *  the user does not have the required permissions.
           */
          $get(): Promise<StatusDetails>;
        };
      };
      /* Endpoint path: /rest/api/3/statuscategory */
      statuscategory: {
        /**
         * Method: get /rest/api/3/statuscategory
         * operationId: getStatusCategories
         * sum: Get all status categories
         * doc: Returns a list of all status categories.
         * 
         * **[Permissions](#permissions) required:** Permission to access Jira.
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         */
        $get(): Promise<Array<StatusCategory>>;
        /* Endpoint path: /rest/api/3/statuscategory/{idOrKey} */
        "$"(idOrKey: string): {
          /**
           * Method: get /rest/api/3/statuscategory/{idOrKey}
           * operationId: getStatusCategory
           * sum: Get status category
           * doc: Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the status category is not found.
           */
          $get(): Promise<StatusCategory>;
        };
      };
      /* Endpoint path: /rest/api/3/statuses */
      statuses: {
        /**
         * Method: get /rest/api/3/statuses
         * operationId: getStatusesById
         * sum: Bulk get statuses
         * doc: Returns a list of the statuses specified by one or more status IDs.
         * 
         * **[Permissions](#permissions) required:**
         * 
         *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
         *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
         */
        $get(args: {expand?: string, id: Array<string>}): Promise<Array<JiraStatus>>;
        /**
         * Method: delete /rest/api/3/statuses
         * operationId: deleteStatusesById
         * sum: Bulk delete Statuses
         * doc: Deletes statuses by ID.
         * 
         * **[Permissions](#permissions) required:**
         * 
         *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
         *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
         * 204: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
         */
        $delete(args: {id: Array<string>}): Promise<unknown>;
        /**
         * Method: post /rest/api/3/statuses
         * operationId: createStatuses
         * sum: Bulk create statuses
         * doc: Creates statuses for a global or project scope.
         * 
         * **[Permissions](#permissions) required:**
         * 
         *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
         *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
         * 409: Returned if another workflow configuration update task is ongoing.
         */
        $post(body: StatusCreateRequest): Promise<Array<JiraStatus>>;
        /**
         * Method: put /rest/api/3/statuses
         * operationId: updateStatuses
         * sum: Bulk update statuses
         * doc: Updates statuses by ID.
         * 
         * **[Permissions](#permissions) required:**
         * 
         *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
         *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
         * 204: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
         * 409: Returned if another workflow configuration update task is ongoing.
         */
        $put(body: StatusUpdateRequest): Promise<unknown>;
        /* Endpoint path: /rest/api/3/statuses/search */
        search: {
          /**
           * Method: get /rest/api/3/statuses/search
           * operationId: search
           * sum: Search statuses paginated
           * doc: Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
           *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
           */
          $get(args?: {expand?: string, projectId?: string, startAt?: number, maxResults?: number, searchString?: string, statusCategory?: string}): Promise<PageOfStatuses>;
        };
      };
      /* Endpoint path: /rest/api/3/task */
      task: {
        /* Endpoint path: /rest/api/3/task/{taskId} */
        "$"(taskId: string): {
          /**
           * Method: get /rest/api/3/task/{taskId}
           * operationId: getTask
           * sum: Get task
           * doc: Returns the status of a [long-running asynchronous task](#async).
           * 
           * When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.
           * 
           * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
           * 
           *  *  `read:jira-work`
           * 
           * **[Permissions](#permissions) required:** either of:
           * 
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           *  *  Creator of the task.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the task is not found.
           */
          $get(): Promise<TaskProgressBeanObject>;
          /* Endpoint path: /rest/api/3/task/{taskId}/cancel */
          cancel: {
            /**
             * Method: post /rest/api/3/task/{taskId}/cancel
             * operationId: cancelTask
             * sum: Cancel task
             * doc: Cancels a task.
             * 
             * **[Permissions](#permissions) required:** either of:
             * 
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             *  *  Creator of the task.
             * 202: Returned if the request is successful.
             * 400: Returned if cancellation of the task is not possible.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the task is not found.
             */
            $post(): Promise<unknown>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/uiModifications */
      uiModifications: {
        /**
         * Method: get /rest/api/3/uiModifications
         * operationId: getUiModifications
         * sum: Get UI modifications
         * doc: Gets UI modifications. UI modifications can only be retrieved by Forge apps.
         * 
         * **[Permissions](#permissions) required:** None.
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the request is not from a Forge app.
         */
        $get(args?: {startAt?: number, maxResults?: number, expand?: string}): Promise<PageBeanUiModificationDetails>;
        /**
         * Method: post /rest/api/3/uiModifications
         * operationId: createUiModification
         * sum: Create UI modification
         * doc: Creates a UI modification. UI modification can only be created by Forge apps.
         * 
         * Each app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
         * 
         * **[Permissions](#permissions) required:**
         * 
         *  *  *None* if the UI modification is created without contexts.
         *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
         * 201: Returned if the UI modification is created.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the request is not from a Forge app.
         * 404: Returned if a project or an issue type in the context are not found.
         */
        $post(body: CreateUiModificationDetails): Promise<UiModificationIdentifiers>;
        /* Endpoint path: /rest/api/3/uiModifications/{uiModificationId} */
        "$"(uiModificationId: string): {
          /**
           * Method: delete /rest/api/3/uiModifications/{uiModificationId}
           * operationId: deleteUiModification
           * sum: Delete UI modification
           * doc: Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.
           * 
           * **[Permissions](#permissions) required:** None.
           * 204: Returned if the UI modification is deleted.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the request is not from a Forge app.
           * 404: Returned if the UI modification is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/uiModifications/{uiModificationId}
           * operationId: updateUiModification
           * sum: Update UI modification
           * doc: Updates a UI modification. UI modification can only be updated by Forge apps.
           * 
           * Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *None* if the UI modification is created without contexts.
           *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
           * 204: Returned if the UI modification is updated.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the request is not from a Forge app.
           * 404: Returned if the UI modification, a project or an issue type in the context are not found.
           */
          $put(body: UpdateUiModificationDetails): Promise<unknown>;
        };
      };
      /* Endpoint path: /rest/api/3/universal_avatar */
      universal_avatar: {
        /* Endpoint path: /rest/api/3/universal_avatar/type */
        type: {
          /* Endpoint path: /rest/api/3/universal_avatar/type/{type} */
          "$"(type: string): {
            /* Endpoint path: /rest/api/3/universal_avatar/type/{type}/owner */
            owner: {
              /* Endpoint path: /rest/api/3/universal_avatar/type/{type}/owner/{entityId} */
              "$"(entityId: string): {
                /**
                 * Method: get /rest/api/3/universal_avatar/type/{type}/owner/{entityId}
                 * operationId: getAvatars
                 * sum: Get avatars
                 * doc: Returns the system and custom avatars for a project or issue type.
                 * 
                 * This operation can be accessed anonymously.
                 * 
                 * **[Permissions](#permissions) required:**
                 * 
                 *  *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
                 *  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
                 *  *  for system avatars, none.
                 * 200: Returned if the request is successful.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 404: Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.
                 */
                $get(): Promise<Avatars>;
                /**
                 * Method: post /rest/api/3/universal_avatar/type/{type}/owner/{entityId}
                 * operationId: storeAvatar
                 * sum: Load avatar
                 * doc: Loads a custom avatar for a project or issue type.
                 * 
                 * Specify the avatar's local file location in the body of the request. Also, include the following headers:
                 * 
                 *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
                 *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
                 * 
                 * For example:  
                 * `curl --request POST `
                 * 
                 * `--user email@example.com:<api_token> `
                 * 
                 * `--header 'X-Atlassian-Token: no-check' `
                 * 
                 * `--header 'Content-Type: image/< image_type>' `
                 * 
                 * `--data-binary "<@/path/to/file/with/your/avatar>" `
                 * 
                 * `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`
                 * 
                 * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
                 * 
                 * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
                 * 
                 * After creating the avatar use:
                 * 
                 *  *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
                 *  *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 201: Returned if the request is successful.
                 * 400: Returned if:
                 * 
                 *  *  an image isn't included in the request.
                 *  *  the image type is unsupported.
                 *  *  the crop parameters extend the crop area beyond the edge of the image.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permissions.
                 * 404: Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.
                 */
                $post(): Promise<Avatar>;
              };
              /* Endpoint path: /rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId} */
              "$"(owningObjectId: string): {
                /* Endpoint path: /rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar */
                avatar: {
                  /* Endpoint path: /rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id} */
                  "$"(id: string): {
                    /**
                     * Method: delete /rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}
                     * operationId: deleteAvatar
                     * sum: Delete avatar
                     * doc: Deletes an avatar from a project or issue type.
                     * 
                     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                     * 204: Returned if the request is successful.
                     * 400: Returned if the request is invalid.
                     * 403: Returned if the user does not have permission to delete the avatar, the avatar is not deletable.
                     * 404: Returned if the avatar type, associated item ID, or avatar ID is invalid.
                     */
                    $delete(): Promise<unknown>;
                  };
                };
              };
            };
          };
        };
        /* Endpoint path: /rest/api/3/universal_avatar/view */
        view: {
          /* Endpoint path: /rest/api/3/universal_avatar/view/type */
          type: {
            /* Endpoint path: /rest/api/3/universal_avatar/view/type/{type} */
            "$"(type: string): {
              /**
               * Method: get /rest/api/3/universal_avatar/view/type/{type}
               * operationId: getAvatarImageByType
               * sum: Get avatar image by type
               * doc: Returns the default project or issue type avatar image.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** None.
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if an avatar is not found or an avatar matching the requested size is not found.
               */
              $get(args?: {size?: string, format?: string}): Promise<StreamingResponseBody>;
              /* Endpoint path: /rest/api/3/universal_avatar/view/type/{type}/avatar */
              avatar: {
                /* Endpoint path: /rest/api/3/universal_avatar/view/type/{type}/avatar/{id} */
                "$"(id: string): {
                  /**
                   * Method: get /rest/api/3/universal_avatar/view/type/{type}/avatar/{id}
                   * operationId: getAvatarImageByID
                   * sum: Get avatar image by ID
                   * doc: Returns a project or issue type avatar image by ID.
                   * 
                   * This operation can be accessed anonymously.
                   * 
                   * **[Permissions](#permissions) required:**
                   * 
                   *  *  For system avatars, none.
                   *  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
                   *  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
                   * 200: Returned if the request is successful.
                   * 400: Returned if the request is not valid.
                   * 401: Returned if the authentication credentials are incorrect.
                   * 403: Returned if the user does not have the necessary permission.
                   * 404: Returned if an avatar is not found or an avatar matching the requested size is not found.
                   */
                  $get(args?: {size?: string, format?: string}): Promise<StreamingResponseBody>;
                };
              };
              /* Endpoint path: /rest/api/3/universal_avatar/view/type/{type}/owner */
              owner: {
                /* Endpoint path: /rest/api/3/universal_avatar/view/type/{type}/owner/{entityId} */
                "$"(entityId: string): {
                  /**
                   * Method: get /rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}
                   * operationId: getAvatarImageByOwner
                   * sum: Get avatar image by owner
                   * doc: Returns the avatar image for a project or issue type.
                   * 
                   * This operation can be accessed anonymously.
                   * 
                   * **[Permissions](#permissions) required:**
                   * 
                   *  *  For system avatars, none.
                   *  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
                   *  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
                   * 200: Returned if the request is successful.
                   * 400: Returned if the request is not valid.
                   * 401: Returned if the authentication credentials are incorrect.
                   * 403: Returned if the user does not have the necessary permission.
                   * 404: Returned if an avatar is not found or an avatar matching the requested size is not found.
                   */
                  $get(args?: {size?: string, format?: string}): Promise<StreamingResponseBody>;
                };
              };
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/user */
      user: {
        /**
         * Method: get /rest/api/3/user
         * operationId: getUser
         * sum: Get user
         * doc: Returns a user.
         * 
         * Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
         * 
         * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the calling user does not have the *Browse users and groups* global permission.
         * 404: Returned if the user is not found.
         */
        $get(args?: {accountId?: string, username?: string, key?: string, expand?: string}): Promise<User>;
        /**
         * Method: delete /rest/api/3/user
         * operationId: removeUser
         * sum: Delete user
         * doc: Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
         * 
         * **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
         * 204: Returned if the request is successful.
         * 400: Returned if the user cannot be removed.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         * 404: Returned if the user is not found.
         */
        $delete(args: {accountId: string, username?: string, key?: string}): Promise<unknown>;
        /**
         * Method: post /rest/api/3/user
         * operationId: createUser
         * sum: Create user
         * doc: Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
         * 
         * If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is invalid or the number of licensed users is exceeded.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $post(body: NewUserDetails): Promise<User>;
        /* Endpoint path: /rest/api/3/user/assignable */
        assignable: {
          /* Endpoint path: /rest/api/3/user/assignable/multiProjectSearch */
          multiProjectSearch: {
            /**
             * Method: get /rest/api/3/user/assignable/multiProjectSearch
             * operationId: findBulkAssignableUsers
             * sum: Find users assignable to projects
             * doc: Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.
             * 
             * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
             * 
             * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** None.
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  `projectKeys` is missing.
             *  *  `query` or `accountId` is missing.
             *  *  `query` and `accountId` are provided.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if one or more of the projects is not found.
             * 429: Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.
             */
            $get(args: {query?: string, username?: string, accountId?: string, projectKeys: string, startAt?: number, maxResults?: number}): Promise<Array<User>>;
          };
          /* Endpoint path: /rest/api/3/user/assignable/search */
          search: {
            /**
             * Method: get /rest/api/3/user/assignable/search
             * operationId: findAssignableUsers
             * sum: Find users assignable to issues
             * doc: Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:
             * 
             *  *  a new issue, by providing the `projectKeyOrId`.
             *  *  an updated issue, by providing the `issueKey`.
             *  *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).
             * 
             * In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.
             * 
             * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
             * 
             * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
             * 
             * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Assign issues* [project permission](https://confluence.atlassian.com/x/yodKLg)
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  `issueKey` or `project` is missing.
             *  *  `query` or `accountId` is missing.
             *  *  `query` and `accountId` are provided.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the project, issue, or transition is not found.
             * 429: Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.
             */
            $get(args?: {query?: string, sessionId?: string, username?: string, accountId?: string, project?: string, issueKey?: string, startAt?: number, maxResults?: number, actionDescriptorId?: number, recommend?: boolean}): Promise<Array<User>>;
          };
        };
        /* Endpoint path: /rest/api/3/user/bulk */
        bulk: {
          /**
           * Method: get /rest/api/3/user/bulk
           * operationId: bulkGetUsers
           * sum: Bulk get users
           * doc: Returns a [paginated](#pagination) list of the users specified by one or more account IDs.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 400: Returned if `accountID` is missing.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args: {startAt?: number, maxResults?: number, username?: Array<string>, key?: Array<string>, accountId: Array<string>}): Promise<PageBeanUser>;
          /* Endpoint path: /rest/api/3/user/bulk/migration */
          migration: {
            /**
             * Method: get /rest/api/3/user/bulk/migration
             * operationId: bulkGetUsersMigration
             * sum: Get account IDs for users
             * doc: Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.
             * 
             * **[Permissions](#permissions) required:** Permission to access Jira.
             * 200: Returned if the request is successful.
             * 400: Returned if `key` or `username`
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $get(args?: {startAt?: number, maxResults?: number, username?: Array<string>, key?: Array<string>}): Promise<Array<UserMigrationBean>>;
          };
        };
        /* Endpoint path: /rest/api/3/user/columns */
        columns: {
          /**
           * Method: get /rest/api/3/user/columns
           * operationId: getUserDefaultColumns
           * sum: Get user default columns
           * doc: Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
           *  *  Permission to access Jira, to get the calling user's column details.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission or is not accessing their user record.
           * 404: Returned if the requested user is not found.
           */
          $get(args?: {accountId?: string, username?: string}): Promise<Array<ColumnItem>>;
          /**
           * Method: delete /rest/api/3/user/columns
           * operationId: resetUserColumns
           * sum: Reset user default columns
           * doc: Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
           *  *  Permission to access Jira, to set the calling user's columns.
           * 204: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission or is not accessing their user record.
           */
          $delete(args?: {accountId?: string, username?: string}): Promise<unknown>;
          /**
           * Method: put /rest/api/3/user/columns
           * operationId: setUserColumns
           * sum: Set user default columns
           * doc: Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.
           * 
           * The parameters for this resource are expressed as HTML form data. For example, in curl:
           * 
           * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
           *  *  Permission to access Jira, to set the calling user's columns.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission or is not accessing their user record.
           * 404: Returned if the requested user is not found.
           * 429: Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.
           * 500: Returned if an invalid issue table column ID is sent.
           */
          $put(): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/user/email */
        email: {
          /**
           * Method: get /rest/api/3/user/email
           * operationId: getUserEmail
           * sum: Get user email
           * doc: Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
           * 200: Returned if the request is successful.
           * 400: Returned if the calling app is not approved to use this API.
           * 401: Returned if the authentication credentials are incorrect or missing from the request (for example if a user is trying to access this API).
           * 404: Returned if a user with the given `accountId` doesn't exist
           * 503: Indicates the API is not currently enabled
           */
          $get(args: {accountId: string}): Promise<UnrestrictedUserEmail>;
          /* Endpoint path: /rest/api/3/user/email/bulk */
          bulk: {
            /**
             * Method: get /rest/api/3/user/email/bulk
             * operationId: getUserEmailBulk
             * sum: Get user email bulk
             * doc: Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
             * 200: Returned if the request is successful.
             * 400: Returned if the calling app is not approved to use this API.
             * 401: Returned if the authentication credentials are incorrect, or missing from the request (for example if a user is trying to access this API).
             * 503: Indicates the API is not currently enabled.
             */
            $get(args: {accountId: Array<string>}): Promise<UnrestrictedUserEmail>;
          };
        };
        /* Endpoint path: /rest/api/3/user/groups */
        groups: {
          /**
           * Method: get /rest/api/3/user/groups
           * operationId: getUserGroups
           * sum: Get user groups
           * doc: Returns the groups to which a user belongs.
           * 
           * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the calling user does not have the *Browse users and groups* global permission.
           * 404: Returned if the user is not found.
           */
          $get(args: {accountId: string, username?: string, key?: string}): Promise<Array<GroupName>>;
        };
        /* Endpoint path: /rest/api/3/user/permission */
        permission: {
          /* Endpoint path: /rest/api/3/user/permission/search */
          search: {
            /**
             * Method: get /rest/api/3/user/permission/search
             * operationId: findUsersWithAllPermissions
             * sum: Find users with permissions
             * doc: Returns a list of users who fulfill these criteria:
             * 
             *  *  their user attributes match a search string.
             *  *  they have a set of permissions for a project or issue.
             * 
             * If no search string is provided, a list of all users with the permissions is returned.
             * 
             * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
             * 
             * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
             *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  `issueKey` or `projectKey` is missing.
             *  *  `query` or `accountId` is missing.
             *  *  `query` and `accountId` are provided.
             *  *  `permissions` is empty or contains an invalid entry.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the issue or project is not found.
             * 429: Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.
             */
            $get(args: {query?: string, username?: string, accountId?: string, permissions: string, issueKey?: string, projectKey?: string, startAt?: number, maxResults?: number}): Promise<Array<User>>;
          };
        };
        /* Endpoint path: /rest/api/3/user/picker */
        picker: {
          /**
           * Method: get /rest/api/3/user/picker
           * operationId: findUsersForPicker
           * sum: Find users for picker
           * doc: Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.
           * 
           * This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
           * 
           * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.
           * 200: Returned if the request is successful.
           * 400: Returned if `exclude` and `excludeAccountIds` are provided.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 429: Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.
           */
          $get(args: {query: string, maxResults?: number, showAvatar?: boolean, exclude?: Array<string>, excludeAccountIds?: Array<string>, avatarSize?: string, excludeConnectUsers?: boolean}): Promise<FoundUsers>;
        };
        /* Endpoint path: /rest/api/3/user/properties */
        properties: {
          /**
           * Method: get /rest/api/3/user/properties
           * operationId: getUserPropertyKeys
           * sum: Get user property keys
           * doc: Returns the keys of all properties for a user.
           * 
           * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
           *  *  Access to Jira, to access the calling user's property keys.
           * 200: Returned if the request is successful.
           * 400: Returned if `accountId` is missing.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission or is not accessing their user record.
           * 404: Returned if the user is not found.
           */
          $get(args?: {accountId?: string, userKey?: string, username?: string}): Promise<PropertyKeys>;
          /* Endpoint path: /rest/api/3/user/properties/{propertyKey} */
          "$"(propertyKey: string): {
            /**
             * Method: get /rest/api/3/user/properties/{propertyKey}
             * operationId: getUserProperty
             * sum: Get user property
             * doc: Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.
             * 
             * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
             *  *  Access to Jira, to get a property from the calling user's record.
             * 200: Returned if the request is successful.
             * 400: Returned if `accountId` is missing.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission or is not accessing their user record.
             * 404: Returned if the user is not found.
             */
            $get(args?: {accountId?: string, userKey?: string, username?: string}): Promise<EntityProperty>;
            /**
             * Method: delete /rest/api/3/user/properties/{propertyKey}
             * operationId: deleteUserProperty
             * sum: Delete user property
             * doc: Deletes a property from a user.
             * 
             * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
             *  *  Access to Jira, to delete a property from the calling user's record.
             * 204: Returned if the user property is deleted.
             * 400: Returned if `accountId` is missing.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission or is not accessing their user record.
             * 404: Returned if the user or the property is not found.
             */
            $delete(args?: {accountId?: string, userKey?: string, username?: string}): Promise<unknown>;
            /**
             * Method: put /rest/api/3/user/properties/{propertyKey}
             * operationId: setUserProperty
             * sum: Set user property
             * doc: Sets the value of a user's property. Use this resource to store custom data against a user.
             * 
             * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
             *  *  Access to Jira, to set a property on the calling user's record.
             * 200: Returned if the user property is updated.
             * 201: Returned if the user property is created.
             * 400: Returned if `accountId` is missing.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission or is not accessing their user record.
             * 404: Returned if the user is not found.
             * 405: Returned if the property key is not specified.
             */
            $put(body: any /* 264 */): Promise<unknown>;
          };
        };
        /* Endpoint path: /rest/api/3/user/search */
        search: {
          /**
           * Method: get /rest/api/3/user/search
           * operationId: findUsers
           * sum: Find users
           * doc: Returns a list of active users that match the search string and property.
           * 
           * This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
           * 
           * This operation can be accessed anonymously.
           * 
           * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
           * 
           * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.
           * 200: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  `accountId`, `query` or `property` is missing.
           *  *  `query` and `accountId` are provided.
           *  *  `property` parameter is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 429: Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.
           */
          $get(args?: {query?: string, username?: string, accountId?: string, startAt?: number, maxResults?: number, property?: string}): Promise<Array<User>>;
          /* Endpoint path: /rest/api/3/user/search/query */
          query: {
            /**
             * Method: get /rest/api/3/user/search/query
             * operationId: findUsersByQuery
             * sum: Find users by query
             * doc: Finds users with a structured query and returns a [paginated](#pagination) list of user details.
             * 
             * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
             * 
             * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 
             * The query statements are:
             * 
             *  *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
             *  *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
             *  *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
             *  *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
             *  *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
             *  *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
             *  *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
             *  *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
             * 
             * The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
             * 
             * `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
             * 200: Returned if the request is successful.
             * 400: Returned if the query is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 408: Returned if the search is timed out.
             */
            $get(args: {query: string, startAt?: number, maxResults?: number}): Promise<PageBeanUser>;
            /* Endpoint path: /rest/api/3/user/search/query/key */
            key: {
              /**
               * Method: get /rest/api/3/user/search/query/key
               * operationId: findUserKeysByQuery
               * sum: Find user keys by query
               * doc: Finds users with a structured query and returns a [paginated](#pagination) list of user keys.
               * 
               * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
               * 
               * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 
               * The query statements are:
               * 
               *  *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
               *  *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
               *  *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
               *  *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
               *  *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
               *  *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
               *  *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
               *  *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
               * 
               * The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
               * 
               * `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
               * 200: Returned if the request is successful.
               * 400: Returned if the query is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 408: Returned if the search is timed out.
               */
              $get(args: {query: string, startAt?: number, maxResult?: number}): Promise<PageBeanUserKey>;
            };
          };
        };
        /* Endpoint path: /rest/api/3/user/viewissue */
        viewissue: {
          /* Endpoint path: /rest/api/3/user/viewissue/search */
          search: {
            /**
             * Method: get /rest/api/3/user/viewissue/search
             * operationId: findUsersWithBrowsePermission
             * sum: Find users with browse permission
             * doc: Returns a list of users who fulfill these criteria:
             * 
             *  *  their user attributes match a search string.
             *  *  they have permission to browse issues.
             * 
             * Use this resource to find users who can browse:
             * 
             *  *  an issue, by providing the `issueKey`.
             *  *  any issue in a project, by providing the `projectKey`.
             * 
             * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
             * 
             * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  `issueKey` or `projectKey` is missing.
             *  *  `query` or `accountId` is missing.
             *  *  `query` and `accountId` are provided.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the issue or project is not found.
             * 429: Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.
             */
            $get(args?: {query?: string, username?: string, accountId?: string, issueKey?: string, projectKey?: string, startAt?: number, maxResults?: number}): Promise<Array<User>>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/users */
      users: {
        /**
         * Method: get /rest/api/3/users
         * operationId: getAllUsersDefault
         * sum: Get all users default
         * doc: Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
         * 
         * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
         * 
         * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 403: Returned if the user doesn't have the necessary permission.
         * 409: Returned if the request takes longer than 10 seconds or is interrupted.
         */
        $get(args?: {startAt?: number, maxResults?: number}): Promise<Array<User>>;
        /* Endpoint path: /rest/api/3/users/search */
        search: {
          /**
           * Method: get /rest/api/3/users/search
           * operationId: getAllUsers
           * sum: Get all users
           * doc: Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
           * 
           * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
           * 
           * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 403: Returned if the user doesn't have the necessary permission.
           * 409: Returned if the request takes longer than 10 seconds or is interrupted.
           */
          $get(args?: {startAt?: number, maxResults?: number}): Promise<Array<User>>;
        };
      };
      /* Endpoint path: /rest/api/3/version */
      version: {
        /**
         * Method: post /rest/api/3/version
         * operationId: createVersion
         * sum: Create version
         * doc: Creates a project version.
         * 
         * This operation can be accessed anonymously.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
         * 201: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 404: Returned if:
         * 
         *  *  the project is not found.
         *  *  the user does not have the required permissions.
         */
        $post(body: Version): Promise<Version>;
        /* Endpoint path: /rest/api/3/version/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/version/{id}
           * operationId: getVersion
           * sum: Get version
           * doc: Returns a project version.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 404: Returned if the version is not found or the user does not have the necessary permission.
           */
          $get(args?: {expand?: string}): Promise<Version>;
          /**
           * Method: delete /rest/api/3/version/{id}
           * operationId: deleteVersion
           * sum: Delete version
           * doc: Deletes a project version.
           * 
           * Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.
           * 
           * Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
           * 204: Returned if the version is deleted.
           * 400: Returned if the request is invalid.
           * 401: Returned if:
           * 
           *  *  the authentication credentials are incorrect.
           *  *  the user does not have the required permissions.
           * 404: Returned if the version is not found.
           */
          $delete(args?: {moveFixIssuesTo?: string, moveAffectedIssuesTo?: string}): Promise<unknown>;
          /**
           * Method: put /rest/api/3/version/{id}
           * operationId: updateVersion
           * sum: Update version
           * doc: Updates a project version.
           * 
           * This operation can be accessed anonymously.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
           * 200: Returned if the request is successful.
           * 400: Returned if:
           * 
           *  *  the request is invalid.
           *  *  the user does not have the required permissions.
           * 401: Returned if the authentication credentials are incorrect.
           * 404: Returned if the version is not found.
           */
          $put(body: Version): Promise<Version>;
          /* Endpoint path: /rest/api/3/version/{id}/mergeto */
          mergeto: {
            /* Endpoint path: /rest/api/3/version/{id}/mergeto/{moveIssuesTo} */
            "$"(moveIssuesTo: string): {
              /**
               * Method: put /rest/api/3/version/{id}/mergeto/{moveIssuesTo}
               * operationId: mergeVersions
               * sum: Merge versions
               * doc: Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.
               * 
               * Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
               * 204: Returned if the version is deleted.
               * 400: Returned if the request is invalid.
               * 401: Returned if:
               * 
               *  *  the authentication credentials are incorrect or missing.
               *  *  the user does not have the required permissions.
               * 404: Returned if the version to be deleted or the version to merge to are not found.
               */
              $put(): Promise<unknown>;
            };
          };
          /* Endpoint path: /rest/api/3/version/{id}/move */
          move: {
            /**
             * Method: post /rest/api/3/version/{id}/move
             * operationId: moveVersion
             * sum: Move version
             * doc: Modifies the version's sequence within the project, which affects the display order of the versions in Jira.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * 
             *  *  no body parameters are provided.
             *  *  `after` and `position` are provided.
             *  *  `position` is invalid.
             * 401: Returned if:
             * 
             *  *  the authentication credentials are incorrect or missing
             *  *  the user does not have the required commissions.
             * 404: Returned if the version or move after version are not found.
             */
            $post(body: VersionMoveBean): Promise<Version>;
          };
          /* Endpoint path: /rest/api/3/version/{id}/relatedIssueCounts */
          relatedIssueCounts: {
            /**
             * Method: get /rest/api/3/version/{id}/relatedIssueCounts
             * operationId: getVersionRelatedIssues
             * sum: Get version's related issues count
             * doc: Returns the following counts for a version:
             * 
             *  *  Number of issues where the `fixVersion` is set to the version.
             *  *  Number of issues where the `affectedVersion` is set to the version.
             *  *  Number of issues where a version custom field is set to the version.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect.
             * 404: Returned if:
             * 
             *  *  the version is not found.
             *  *  the user does not have the required permissions.
             */
            $get(): Promise<VersionIssueCounts>;
          };
          /* Endpoint path: /rest/api/3/version/{id}/relatedwork */
          relatedwork: {
            /**
             * Method: get /rest/api/3/version/{id}/relatedwork
             * operationId: getRelatedWork
             * sum: Get related work
             * doc: Returns related work items for the given version id.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if the version is not found or the user does not have the necessary permission.
             * 500: Returned if reading related work fails
             */
            $get(): Promise<Array<VersionRelatedWork>>;
            /**
             * Method: post /rest/api/3/version/{id}/relatedwork
             * operationId: createRelatedWork
             * sum: Create related work
             * doc: Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
             * 201: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the required permissions.
             * 404: Returned if the version is not found.
             */
            $post(body: VersionRelatedWork): Promise<VersionRelatedWork>;
            /**
             * Method: put /rest/api/3/version/{id}/relatedwork
             * operationId: updateRelatedWork
             * sum: Update related work
             * doc: Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can't be edited.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
             * 200: Returned if the request is successful together with updated related work.
             * 400: Returned if the request data is invalid
             * 401: Returned if the authentication credentials are incorrect.
             * 403: Returned if the user does not have the required permissions.
             * 404: Returned if the version or the related work is not found.
             */
            $put(body: VersionRelatedWork): Promise<VersionRelatedWork>;
          };
          /* Endpoint path: /rest/api/3/version/{id}/removeAndSwap */
          removeAndSwap: {
            /**
             * Method: post /rest/api/3/version/{id}/removeAndSwap
             * operationId: deleteAndReplaceVersion
             * sum: Delete and replace version
             * doc: Deletes a project version.
             * 
             * Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
             * 204: Returned if the version is deleted.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  the version to delete is not found.
             *  *  the user does not have the required permissions.
             */
            $post(body: DeleteAndReplaceVersionBean): Promise<unknown>;
          };
          /* Endpoint path: /rest/api/3/version/{id}/unresolvedIssueCount */
          unresolvedIssueCount: {
            /**
             * Method: get /rest/api/3/version/{id}/unresolvedIssueCount
             * operationId: getVersionUnresolvedIssues
             * sum: Get version's unresolved issues count
             * doc: Returns counts of the issues and unresolved issues for the project version.
             * 
             * This operation can be accessed anonymously.
             * 
             * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 404: Returned if:
             * 
             *  *  the version is not found.
             *  *  the user does not have the required permissions.
             */
            $get(): Promise<VersionUnresolvedIssuesCount>;
          };
        };
        /* Endpoint path: /rest/api/3/version/{versionId} */
        "$"(versionId: string): {
          /* Endpoint path: /rest/api/3/version/{versionId}/relatedwork */
          relatedwork: {
            /* Endpoint path: /rest/api/3/version/{versionId}/relatedwork/{relatedWorkId} */
            "$"(relatedWorkId: string): {
              /**
               * Method: delete /rest/api/3/version/{versionId}/relatedwork/{relatedWorkId}
               * operationId: deleteRelatedWork
               * sum: Delete related work
               * doc: Deletes the given related work for the given version.
               * 
               * This operation can be accessed anonymously.
               * 
               * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
               * 204: Returned if the related work is deleted.
               * 400: Returned if the request is invalid.
               * 401: Returned if
               * 
               * the authentication credentials are incorrect.
               * 403: Returned if the user does not have the required permissions.
               * 404: Returned if the version/related work is not found.
               */
              $delete(): Promise<unknown>;
            };
          };
        };
      };
      /* Endpoint path: /rest/api/3/webhook */
      webhook: {
        /**
         * Method: get /rest/api/3/webhook
         * operationId: getDynamicWebhooksForApp
         * sum: Get dynamic webhooks for app
         * doc: Returns a [paginated](#pagination) list of the webhooks registered by the calling app.
         * 
         * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
         * 200: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 403: Returned if the caller isn't an app.
         */
        $get(args?: {startAt?: number, maxResults?: number}): Promise<PageBeanWebhook>;
        /**
         * Method: delete /rest/api/3/webhook
         * operationId: deleteWebhookById
         * sum: Delete webhooks by ID
         * doc: Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.
         * 
         * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
         * 202: Returned if the request is successful.
         * 400: Returned if the list of webhook IDs is missing.
         * 403: Returned if the caller isn't an app.
         */
        $delete(): Promise<unknown>;
        /**
         * Method: post /rest/api/3/webhook
         * operationId: registerDynamicWebhooks
         * sum: Register dynamic webhooks
         * doc: Registers webhooks.
         * 
         * **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.
         * 
         * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
         * 200: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 403: Returned if the caller isn't an app.
         */
        $post(body: WebhookRegistrationDetails): Promise<ContainerForRegisteredWebhooks>;
        /* Endpoint path: /rest/api/3/webhook/failed */
        failed: {
          /**
           * Method: get /rest/api/3/webhook/failed
           * operationId: getFailedWebhooks
           * sum: Get failed webhooks
           * doc: Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.
           * 
           * After 72 hours the failure may no longer be returned by this operation.
           * 
           * The oldest failure is returned first.
           * 
           * This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.
           * 
           * **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
           * 200: Returned if the request is successful.
           * 400: 400 response
           * 403: Returned if the caller is not a Connect app.
           */
          $get(args?: {maxResults?: number, after?: number}): Promise<FailedWebhooks>;
        };
        /* Endpoint path: /rest/api/3/webhook/refresh */
        refresh: {
          /**
           * Method: put /rest/api/3/webhook/refresh
           * operationId: refreshWebhooks
           * sum: Extend webhook life
           * doc: Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.
           * 
           * Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.
           * 
           * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 403: Returned if the caller isn't an app.
           */
          $put(body: ContainerForWebhookIDs): Promise<WebhooksExpirationDate>;
        };
      };
      /* Endpoint path: /rest/api/3/workflow */
      workflow: {
        /**
         * Method: get /rest/api/3/workflow
         * operationId: getAllWorkflows
         * sum: Get all workflows
         * doc: Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).
         * 
         * If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the user does not have the necessary permission.
         */
        $get(args?: {workflowName?: string}): Promise<Array<DeprecatedWorkflow>>;
        /**
         * Method: post /rest/api/3/workflow
         * operationId: createWorkflow
         * sum: Create workflow
         * doc: Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used. Note: This only applies to company-managed scoped workflows. Use [bulk create workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-create-post) to create both team and company-managed scoped workflows.
         * 
         * #### Conditions ####
         * 
         * Conditions enable workflow rules that govern whether a transition can execute.
         * 
         * ##### Always false condition #####
         * 
         * A condition that always fails.
         * 
         *     {
         *        "type": "AlwaysFalseCondition"
         *      }
         * 
         * ##### Block transition until approval #####
         * 
         * A condition that blocks issue transition if there is a pending approval.
         * 
         *     {
         *        "type": "BlockInProgressApprovalCondition"
         *      }
         * 
         * ##### Compare number custom field condition #####
         * 
         * A condition that allows transition if a comparison between a number custom field and a value is true.
         * 
         *     {
         *        "type": "CompareNumberCFCondition",
         *        "configuration": {
         *          "comparator": "=",
         *          "fieldId": "customfield_10029",
         *          "fieldValue": 2
         *        }
         *      }
         * 
         *  *  `comparator` One of the supported comparator: `=`, `>`, and `<`.
         *  *  `fieldId` The custom numeric field ID. Allowed field types:
         *     
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
         *      *  `com.pyxis.greenhopper.jira:jsw-story-points`
         *  *  `fieldValue` The value for comparison.
         * 
         * ##### Hide from user condition #####
         * 
         * A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.
         * 
         *     {
         *        "type": "RemoteOnlyCondition"
         *      }
         * 
         * ##### Only assignee condition #####
         * 
         * A condition that allows only the assignee to execute a transition.
         * 
         *     {
         *        "type": "AllowOnlyAssignee"
         *      }
         * 
         * ##### Only Bamboo notifications workflow condition (deprecated) #####
         * 
         * A condition that makes the transition available only to Bamboo build notifications.
         * 
         *     {
         *        "type": "OnlyBambooNotificationsCondition"
         *      }
         * 
         * ##### Only reporter condition #####
         * 
         * A condition that allows only the reporter to execute a transition.
         * 
         *     {
         *        "type": "AllowOnlyReporter"
         *      }
         * 
         * ##### Permission condition #####
         * 
         * A condition that allows only users with a permission to execute a transition.
         * 
         *     {
         *        "type": "PermissionCondition",
         *        "configuration": {
         *            "permissionKey": "BROWSE_PROJECTS"
         *        }
         *      }
         * 
         *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
         * 
         * ##### Previous status condition #####
         * 
         * A condition that allows a transition based on whether an issue has or has not transitioned through a status.
         * 
         *     {
         *        "type": "PreviousStatusCondition",
         *        "configuration": {
         *          "ignoreLoopTransitions": true,
         *          "includeCurrentStatus": true,
         *          "mostRecentStatusOnly": true,
         *          "reverseCondition": true,
         *          "previousStatus": {
         *            "id": "5"
         *          }
         *        }
         *      }
         * 
         * By default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:
         * 
         *  *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.
         *  *  `includeCurrentStatus` is `true`, then the current issue status is also checked.
         *  *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
         *  *  `reverseCondition` is `true`, then the status must not be present.
         * 
         * ##### Separation of duties condition #####
         * 
         * A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.
         * 
         *     {
         *        "type": "SeparationOfDutiesCondition",
         *        "configuration": {
         *          "fromStatus": {
         *            "id": "5"
         *          },
         *          "toStatus": {
         *            "id": "6"
         *          }
         *        }
         *      }
         * 
         *  *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.
         *  *  `toStatus` An object containing the ID of the target status of the transition that is blocked.
         * 
         * ##### Subtask blocking condition #####
         * 
         * A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.
         * 
         *     {
         *        "type": "SubTaskBlockingCondition",
         *        "configuration": {
         *          "statuses": [
         *            {
         *              "id": "1"
         *            },
         *            {
         *              "id": "3"
         *            }
         *          ]
         *        }
         *      }
         * 
         *  *  `statuses` A list of objects containing status IDs.
         * 
         * ##### User is in any group condition #####
         * 
         * A condition that allows users belonging to any group from a list of groups to execute a transition.
         * 
         *     {
         *        "type": "UserInAnyGroupCondition",
         *        "configuration": {
         *          "groups": [
         *            "administrators",
         *            "atlassian-addons-admin"
         *          ]
         *        }
         *      }
         * 
         *  *  `groups` A list of group names.
         * 
         * ##### User is in any project role condition #####
         * 
         * A condition that allows only users with at least one project roles from a list of project roles to execute a transition.
         * 
         *     {
         *        "type": "InAnyProjectRoleCondition",
         *        "configuration": {
         *          "projectRoles": [
         *            {
         *              "id": "10002"
         *            },
         *            {
         *              "id": "10003"
         *            },
         *            {
         *              "id": "10012"
         *            },
         *            {
         *              "id": "10013"
         *            }
         *          ]
         *        }
         *      }
         * 
         *  *  `projectRoles` A list of objects containing project role IDs.
         * 
         * ##### User is in custom field condition #####
         * 
         * A condition that allows only users listed in a given custom field to execute the transition.
         * 
         *     {
         *        "type": "UserIsInCustomFieldCondition",
         *        "configuration": {
         *          "allowUserInField": false,
         *          "fieldId": "customfield_10010"
         *        }
         *      }
         * 
         *  *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.
         *  *  `fieldId` The ID of the field containing the list of users.
         * 
         * ##### User is in group condition #####
         * 
         * A condition that allows users belonging to a group to execute a transition.
         * 
         *     {
         *        "type": "UserInGroupCondition",
         *        "configuration": {
         *          "group": "administrators"
         *        }
         *      }
         * 
         *  *  `group` The name of the group.
         * 
         * ##### User is in group custom field condition #####
         * 
         * A condition that allows users belonging to a group specified in a custom field to execute a transition.
         * 
         *     {
         *        "type": "InGroupCFCondition",
         *        "configuration": {
         *          "fieldId": "customfield_10012"
         *        }
         *      }
         * 
         *  *  `fieldId` The ID of the field. Allowed field types:
         *     
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
         *      *  `com.pyxis.greenhopper.jira:gh-epic-status`
         * 
         * ##### User is in project role condition #####
         * 
         * A condition that allows users with a project role to execute a transition.
         * 
         *     {
         *        "type": "InProjectRoleCondition",
         *        "configuration": {
         *          "projectRole": {
         *            "id": "10002"
         *          }
         *        }
         *      }
         * 
         *  *  `projectRole` An object containing the ID of a project role.
         * 
         * ##### Value field condition #####
         * 
         * A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.
         * 
         *     {
         *        "type": "ValueFieldCondition",
         *        "configuration": {
         *          "fieldId": "assignee",
         *          "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",
         *          "comparisonType": "NUMBER",
         *          "comparator": "="
         *        }
         *      }
         * 
         *  *  `fieldId` The ID of a field used in the comparison.
         *  *  `fieldValue` The expected value of the field.
         *  *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.
         *  *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.
         * 
         * **Notes:**
         * 
         *  *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.
         *  *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.
         *  *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.
         * 
         * #### Validators ####
         * 
         * Validators check that any input made to the transition is valid before the transition is performed.
         * 
         * ##### Date field validator #####
         * 
         * A validator that compares two dates.
         * 
         *     {
         *        "type": "DateFieldValidator",
         *        "configuration": {
         *            "comparator": ">",
         *            "date1": "updated",
         *            "date2": "created",
         *            "expression": "1d",
         *            "includeTime": true
         *          }
         *      }
         * 
         *  *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.
         *  *  `date1` The date field to validate. Allowed field types:
         *     
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
         *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
         *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
         *      *  `duedate`
         *      *  `created`
         *      *  `updated`
         *      *  `resolutiondate`
         *  *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:
         *     
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
         *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
         *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
         *      *  `duedate`
         *      *  `created`
         *      *  `updated`
         *      *  `resolutiondate`
         *  *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.
         *  *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.
         * 
         * ##### Windows date validator #####
         * 
         * A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.
         * 
         *     {
         *        "type": "WindowsDateValidator",
         *        "configuration": {
         *            "date1": "customfield_10009",
         *            "date2": "created",
         *            "windowsDays": 5
         *          }
         *      }
         * 
         *  *  `date1` The date field to validate. Allowed field types:
         *     
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
         *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
         *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
         *      *  `duedate`
         *      *  `created`
         *      *  `updated`
         *      *  `resolutiondate`
         *  *  `date2` The reference date. Allowed field types:
         *     
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
         *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
         *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
         *      *  `duedate`
         *      *  `created`
         *      *  `updated`
         *      *  `resolutiondate`
         *  *  `windowsDays` A positive integer indicating a number of days.
         * 
         * ##### Field required validator #####
         * 
         * A validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.
         * 
         *     {
         *          "type": "FieldRequiredValidator",
         *          "configuration": {
         *              "ignoreContext": true,
         *              "errorMessage": "Hey",
         *              "fieldIds": [
         *                  "versions",
         *                  "customfield_10037",
         *                  "customfield_10003"
         *              ]
         *          }
         *      }
         * 
         *  *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.
         *  *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.
         *  *  `fieldIds` The list of fields to validate.
         * 
         * ##### Field changed validator #####
         * 
         * A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.
         * 
         *     {
         *          "type": "FieldChangedValidator",
         *          "configuration": {
         *              "fieldId": "comment",
         *              "errorMessage": "Hey",
         *              "exemptedGroups": [
         *                  "administrators",
         *                  "atlassian-addons-admin"
         *              ]
         *          }
         *      }
         * 
         *  *  `fieldId` The ID of a field.
         *  *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.
         *  *  `exemptedGroups` OPTIONAL. The list of groups.
         * 
         * ##### Field has single value validator #####
         * 
         * A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.
         * 
         *     {
         *          "type": "FieldHasSingleValueValidator",
         *          "configuration": {
         *              "fieldId": "attachment,
         *              "excludeSubtasks": true
         *          }
         *      }
         * 
         *  *  `fieldId` The ID of a field.
         *  *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.
         * 
         * ##### Parent status validator #####
         * 
         * A validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.
         * 
         *     {
         *          "type": "ParentStatusValidator",
         *          "configuration": {
         *              "parentStatuses": [
         *                  {
         *                    "id":"1"
         *                  },
         *                  {
         *                    "id":"2"
         *                  }
         *              ]
         *          }
         *      }
         * 
         *  *  `parentStatus` The list of required parent issue statuses.
         * 
         * ##### Permission validator #####
         * 
         * A validator that checks the user has a permission.
         * 
         *     {
         *        "type": "PermissionValidator",
         *        "configuration": {
         *            "permissionKey": "ADMINISTER_PROJECTS"
         *        }
         *      }
         * 
         *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
         * 
         * ##### Previous status validator #####
         * 
         * A validator that checks if the issue has held a status.
         * 
         *     {
         *        "type": "PreviousStatusValidator",
         *        "configuration": {
         *            "mostRecentStatusOnly": false,
         *            "previousStatus": {
         *                "id": "15"
         *            }
         *        }
         *      }
         * 
         *  *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
         *  *  `previousStatus` An object containing the ID of an issue status.
         * 
         * ##### Regular expression validator #####
         * 
         * A validator that checks the content of a field against a regular expression.
         * 
         *     {
         *        "type": "RegexpFieldValidator",
         *        "configuration": {
         *            "regExp": "[0-9]",
         *            "fieldId": "customfield_10029"
         *        }
         *      }
         * 
         *  *  `regExp`A regular expression.
         *  *  `fieldId` The ID of a field. Allowed field types:
         *     
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:url`
         *      *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
         *      *  `com.pyxis.greenhopper.jira:jsw-story-points`
         *      *  `com.pyxis.greenhopper.jira:gh-epic-status`
         *      *  `description`
         *      *  `summary`
         * 
         * ##### User permission validator #####
         * 
         * A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.
         * 
         *     {
         *          "type": "UserPermissionValidator",
         *          "configuration": {
         *              "permissionKey": "BROWSE_PROJECTS",
         *              "nullAllowed": false,
         *              "username": "TestUser"
         *          }
         *      }
         * 
         *  *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
         *  *  `nullAllowed` If `true`, allows the transition when `username` is empty.
         *  *  `username` The username to validate against the `permissionKey`.
         * 
         * #### Post functions ####
         * 
         * Post functions carry out any additional processing required after a Jira workflow transition is executed.
         * 
         * ##### Fire issue event function #####
         * 
         * A post function that fires an event that is processed by the listeners.
         * 
         *     {
         *        "type": "FireIssueEventFunction",
         *        "configuration": {
         *          "event": {
         *            "id":"1"
         *          }
         *        }
         *      }
         * 
         * **Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.
         * 
         *  *  `event` An object containing the ID of the issue event.
         * 
         * ##### Update issue status #####
         * 
         * A post function that sets issue status to the linked status of the destination workflow status.
         * 
         *     {
         *        "type": "UpdateIssueStatusFunction"
         *      }
         * 
         * **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
         * 
         * ##### Create comment #####
         * 
         * A post function that adds a comment entered during the transition to an issue.
         * 
         *     {
         *        "type": "CreateCommentFunction"
         *      }
         * 
         * **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
         * 
         * ##### Store issue #####
         * 
         * A post function that stores updates to an issue.
         * 
         *     {
         *        "type": "IssueStoreFunction"
         *      }
         * 
         * **Note:** This post function can only be added to the initial transition and can only be added once.
         * 
         * ##### Assign to current user function #####
         * 
         * A post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.
         * 
         *     {
         *          "type": "AssignToCurrentUserFunction"
         *      }
         * 
         * **Note:** This post function can be included once in a transition.
         * 
         * ##### Assign to lead function #####
         * 
         * A post function that assigns the issue to the project or component lead developer.
         * 
         *     {
         *          "type": "AssignToLeadFunction"
         *      }
         * 
         * **Note:** This post function can be included once in a transition.
         * 
         * ##### Assign to reporter function #####
         * 
         * A post function that assigns the issue to the reporter.
         * 
         *     {
         *          "type": "AssignToReporterFunction"
         *      }
         * 
         * **Note:** This post function can be included once in a transition.
         * 
         * ##### Clear field value function #####
         * 
         * A post function that clears the value from a field.
         * 
         *     {
         *        "type": "ClearFieldValuePostFunction",
         *        "configuration": {
         *          "fieldId": "assignee"
         *        }
         *      }
         * 
         *  *  `fieldId` The ID of the field.
         * 
         * ##### Copy value from other field function #####
         * 
         * A post function that copies the value of one field to another, either within an issue or from parent to subtask.
         * 
         *     {
         *        "type": "CopyValueFromOtherFieldPostFunction",
         *        "configuration": {
         *          "sourceFieldId": "assignee",
         *          "destinationFieldId": "creator",
         *          "copyType": "same"
         *        }
         *      }
         * 
         *  *  `sourceFieldId` The ID of the source field.
         *  *  `destinationFieldId` The ID of the destination field.
         *  *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.
         * 
         * ##### Create Crucible review workflow function (deprecated) #####
         * 
         * A post function that creates a Crucible review for all unreviewed code for the issue.
         * 
         *     {
         *          "type": "CreateCrucibleReviewWorkflowFunction"
         *      }
         * 
         * **Note:** This post function can be included once in a transition.
         * 
         * ##### Set issue security level based on user's project role function #####
         * 
         * A post function that sets the issue's security level if the current user has a project role.
         * 
         *     {
         *        "type": "SetIssueSecurityFromRoleFunction",
         *        "configuration": {
         *          "projectRole": {
         *              "id":"10002"
         *          },
         *          "issueSecurityLevel": {
         *              "id":"10000"
         *          }
         *        }
         *      }
         * 
         *  *  `projectRole` An object containing the ID of the project role.
         *  *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.
         * 
         * ##### Trigger a webhook function #####
         * 
         * A post function that triggers a webhook.
         * 
         *     {
         *        "type": "TriggerWebhookFunction",
         *        "configuration": {
         *          "webhook": {
         *            "id": "1"
         *          }
         *        }
         *      }
         * 
         *  *  `webhook` An object containing the ID of the webhook listener to trigger.
         * 
         * ##### Update issue custom field function #####
         * 
         * A post function that updates the content of an issue custom field.
         * 
         *     {
         *        "type": "UpdateIssueCustomFieldPostFunction",
         *        "configuration": {
         *          "mode": "append",
         *          "fieldId": "customfield_10003",
         *          "fieldValue": "yikes"
         *        }
         *      }
         * 
         *  *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.
         *  *  `fieldId` The ID of the field.
         *  *  `fieldValue` The update content.
         * 
         * ##### Update issue field function #####
         * 
         * A post function that updates a simple issue field.
         * 
         *     {
         *        "type": "UpdateIssueFieldFunction",
         *        "configuration": {
         *          "fieldId": "assignee",
         *          "fieldValue": "5f0c277e70b8a90025a00776"
         *        }
         *      }
         * 
         *  *  `fieldId` The ID of the field. Allowed field types:
         *     
         *      *  `assignee`
         *      *  `description`
         *      *  `environment`
         *      *  `priority`
         *      *  `resolution`
         *      *  `summary`
         *      *  `timeoriginalestimate`
         *      *  `timeestimate`
         *      *  `timespent`
         *  *  `fieldValue` The update value.
         *  *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:
         *     
         *      *  an account ID.
         *      *  `automatic`.
         *      *  a blank string, which sets the value to `unassigned`.
         * 
         * #### Connect rules ####
         * 
         * Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.
         * 
         *     {
         *        "type": "appKey__moduleKey",
         *        "configuration": {
         *          "value":"{\"isValid\":\"true\"}"
         *        }
         *      }
         * 
         *  *  `type` A Connect rule key in a form of `appKey__moduleKey`.
         *  *  `value` The stringified JSON configuration of a Connect rule.
         * 
         * #### Forge rules ####
         * 
         * Forge transition rules are not yet supported.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the workflow is created.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the required permissions.
         * 404: Returned if one or more statuses is not found.
         */
        $post(body: CreateWorkflowDetails): Promise<WorkflowIDs>;
        /* Endpoint path: /rest/api/3/workflow/rule */
        rule: {
          /* Endpoint path: /rest/api/3/workflow/rule/config */
          config: {
            /**
             * Method: get /rest/api/3/workflow/rule/config
             * operationId: getWorkflowTransitionRuleConfigurations
             * sum: Get workflow transition rule configurations
             * doc: Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:
             * 
             *  *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
             *  *  matching one or more transition rule keys.
             * 
             * Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.
             * 
             * Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.
             * 
             * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 403: Returned if the caller is not a Connect or Forge app.
             * 404: Returned if any transition rule type is not supported.
             * 503: Returned if we encounter a problem while trying to access the required data.
             */
            $get(args: {startAt?: number, maxResults?: number, types: Array<string>, keys?: Array<string>, workflowNames?: Array<string>, withTags?: Array<string>, draft?: boolean, expand?: string}): Promise<PageBeanWorkflowTransitionRules>;
            /**
             * Method: put /rest/api/3/workflow/rule/config
             * operationId: updateWorkflowTransitionRuleConfigurations
             * sum: Update workflow transition rule configurations
             * doc: Updates configuration of workflow transition rules. The following rule types are supported:
             * 
             *  *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
             *  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
             *  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
             * 
             * Only rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.
             * 
             * To assist with app migration, this operation can be used to:
             * 
             *  *  Disable a rule.
             *  *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
             * 
             * Rules are enabled if the `disabled` parameter is not provided.
             * 
             * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 403: Returned if the caller is not a Connect or Forge app.
             * 503: Returned if we encounter a problem while trying to access the required data.
             */
            $put(body: WorkflowTransitionRulesUpdate): Promise<WorkflowTransitionRulesUpdateErrors>;
            /* Endpoint path: /rest/api/3/workflow/rule/config/delete */
            delete: {
              /**
               * Method: put /rest/api/3/workflow/rule/config/delete
               * operationId: deleteWorkflowTransitionRuleConfigurations
               * sum: Delete workflow transition rule configurations
               * doc: Deletes workflow transition rules from one or more workflows. These rule types are supported:
               * 
               *  *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
               *  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
               *  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
               * 
               * Only rules created by the calling Connect app can be deleted.
               * 
               * **[Permissions](#permissions) required:** Only Connect apps can use this operation.
               * 200: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 403: Returned if the caller is not a Connect app.
               */
              $put(body: WorkflowsWithTransitionRulesDetails): Promise<WorkflowTransitionRulesUpdateErrors>;
            };
          };
        };
        /* Endpoint path: /rest/api/3/workflow/search */
        search: {
          /**
           * Method: get /rest/api/3/workflow/search
           * operationId: getWorkflowsPaginated
           * sum: Get workflows paginated
           * doc: Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.
           * 
           * This operation does not return next-gen workflows.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $get(args?: {startAt?: number, maxResults?: number, workflowName?: Array<string>, expand?: string, queryString?: string, orderBy?: string, isActive?: boolean}): Promise<PageBeanWorkflow>;
        };
        /* Endpoint path: /rest/api/3/workflow/transitions */
        transitions: {
          /* Endpoint path: /rest/api/3/workflow/transitions/{transitionId} */
          "$"(transitionId: string): {
            /* Endpoint path: /rest/api/3/workflow/transitions/{transitionId}/properties */
            properties: {
              /**
               * Method: get /rest/api/3/workflow/transitions/{transitionId}/properties
               * operationId: getWorkflowTransitionProperties
               * sum: Get workflow transition properties
               * doc: Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: 200 response
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have admin permission
               * 404: Returned if the workflow transition or property is not found.
               */
              $get(args: {includeReservedKeys?: boolean, key?: string, workflowName: string, workflowMode?: string}): Promise<WorkflowTransitionProperty>;
              /**
               * Method: delete /rest/api/3/workflow/transitions/{transitionId}/properties
               * operationId: deleteWorkflowTransitionProperty
               * sum: Delete workflow transition property
               * doc: Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: 200 response
               * 304: Returned if no changes were made by the request. For example, trying to delete a property that cannot be found.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the workflow transition is not found.
               */
              $delete(args: {key: string, workflowName: string, workflowMode?: string}): Promise<unknown>;
              /**
               * Method: post /rest/api/3/workflow/transitions/{transitionId}/properties
               * operationId: createWorkflowTransitionProperty
               * sum: Create workflow transition property
               * doc: Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: 200 response
               * 400: Returned if a workflow property with the same key is present on the transition.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the workflow transition is not found.
               */
              $post(body: WorkflowTransitionProperty): Promise<WorkflowTransitionProperty>;
              /**
               * Method: put /rest/api/3/workflow/transitions/{transitionId}/properties
               * operationId: updateWorkflowTransitionProperty
               * sum: Update workflow transition property
               * doc: Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: 200 response
               * 304: Returned if no changes were made by the request. For example, attempting to update a property with its current value.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the workflow transition is not found.
               */
              $put(body: WorkflowTransitionProperty): Promise<WorkflowTransitionProperty>;
            };
          };
        };
        /* Endpoint path: /rest/api/3/workflow/{entityId} */
        "$"(entityId: string): {
          /**
           * Method: delete /rest/api/3/workflow/{entityId}
           * operationId: deleteInactiveWorkflow
           * sum: Delete inactive workflow
           * doc: Deletes a workflow.
           * 
           * The workflow cannot be deleted if it is:
           * 
           *  *  an active workflow.
           *  *  a system workflow.
           *  *  associated with any workflow scheme.
           *  *  associated with any draft workflow scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the workflow is deleted.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the workflow is not found.
           */
          $delete(): Promise<unknown>;
        };
      };
      /* Endpoint path: /rest/api/3/workflows */
      workflows: {
        /**
         * Method: post /rest/api/3/workflows
         * operationId: readWorkflows
         * sum: Bulk get workflows
         * doc: Returns a list of workflows and related statuses by providing workflow names, workflow IDs, or project and issue types.
         * 
         * **[Permissions](#permissions) required:**
         * 
         *  *  *Administer Jira* global permission to access all, including project-scoped, workflows
         *  *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows
         * 200: Returned if the request is successful.
         * 400: Returned if the request is not valid.
         * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
         */
        $post(body: WorkflowReadRequest): Promise<WorkflowReadResponse>;
        /* Endpoint path: /rest/api/3/workflows/capabilities */
        capabilities: {
          /**
           * Method: get /rest/api/3/workflows/capabilities
           * operationId: workflowCapabilities
           * sum: Get available workflow capabilities
           * doc: Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* project permission to access all, including global-scoped, workflows
           *  *  *Administer projects* project permissions to access project-scoped workflows
           * 
           * The current list of Atlassian-provided rules:
           * 
           * #### Validators ####
           * 
           * A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
           * 
           * ##### Permission validator #####
           * 
           * A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
           * 
           *     {
           *        "ruleKey": "system:check-permission-validator",
           *        "parameters": {
           *          "permissionKey": "ADMINISTER_PROJECTS"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
           * 
           * ##### Parent or child blocking validator #####
           * 
           * A validator to block the child issue\\u2019s transition depending on the parent issue\\u2019s status.
           * 
           *     {
           *        "ruleKey" : "system:parent-or-child-blocking-validator"
           *        "parameters" : {
           *          "blocker" : "PARENT"
           *          "statusIds" : "1,2,3"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `blocker` currently only supports `PARENT`.
           *  *  `statusIds` a comma-separated list of status IDs.
           * 
           * ##### Previous status validator #####
           * 
           * A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.
           * 
           *     {
           *        "ruleKey": "system:previous-status-validator",
           *        "parameters": {
           *          "previousStatusIds": "10014",
           *          "mostRecentStatusOnly": "true"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID.
           *  *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
           * 
           * ##### Validate a field value #####
           * 
           * A validation that ensures a specific field's value meets the defined criteria before allowing an issue to transition in the workflow.
           * 
           * Depending on the rule type, the result will vary:
           * 
           * ###### Field required ######
           * 
           *     {
           *        "ruleKey": "system:validate-field-value",
           *        "parameters": {
           *          "ruleType": "fieldRequired",
           *          "fieldsRequired": "assignee",
           *          "ignoreContext": "true",
           *          "errorMessage": "An assignee must be set!"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`.
           *  *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn't check a required field if its context isn't configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`.
           *  *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
           * 
           * ###### Field changed ######
           * 
           *     {
           *        "ruleKey": "system:validate-field-value",
           *        "parameters": {
           *          "ruleType": "fieldChanged",
           *          "groupsExemptFromValidation": "6862ac20-8672-4f68-896d-4854f5efb79e",
           *          "fieldKey": "versions",
           *          "errorMessage": "Affect versions must be modified before transition"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation.
           *  *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`.
           *  *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
           * 
           * ###### Field has a single value ######
           * 
           *     {
           *        "ruleKey": "system:validate-field-value",
           *        "parameters": {
           *          "ruleType": "fieldHasSingleValue",
           *          "fieldKey": "created",
           *          "excludeSubtasks": "true"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
           *  *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.
           * 
           * ###### Field matches regular expression ######
           * 
           *     {
           *        "ruleKey": "system:validate-field-value",
           *        "parameters": {
           *          "ruleType": "fieldMatchesRegularExpression",
           *          "regexp": "[0-9]{4}",
           *          "fieldKey": "description"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `regexp` the regular expression used to validate the field\\u2019s content.
           *  *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
           * 
           * ###### Date field comparison ######
           * 
           *     {
           *        "ruleKey": "system:validate-field-value",
           *        "parameters": {
           *          "ruleType": "dateFieldComparison",
           *          "date1FieldKey": "duedate",
           *          "date2FieldKey": "customfield_10054",
           *          "includeTime": "true",
           *          "conditionSelected": ">="
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
           *  *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
           *  *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`.
           *  *  `conditionSelected` the condition to compare with. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
           * 
           * ###### Date range comparison ######
           * 
           *     {
           *        "ruleKey": "system:validate-field-value",
           *        "parameters": {
           *          "ruleType": "windowDateComparison",
           *          "date1FieldKey": "customfield_10009",
           *          "date2FieldKey": "customfield_10054",
           *          "numberOfDays": "3"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
           *  *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
           *  *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.
           * 
           * This rule is composed by aggregating the following legacy rules:
           * 
           *  *  FieldRequiredValidator
           *  *  FieldChangedValidator
           *  *  FieldHasSingleValueValidator
           *  *  RegexpFieldValidator
           *  *  DateFieldValidator
           *  *  WindowsDateValidator
           * 
           * ##### Proforma: Forms attached validator #####
           * 
           * Validates that one or more forms are attached to the issue.
           * 
           *     {
           *        "ruleKey" : "system:proforma-forms-attached"
           *        "parameters" : {}
           *      }
           * 
           * ##### Proforma: Forms submitted validator #####
           * 
           * Validates that all forms attached to the issue have been submitted.
           * 
           *     {
           *        "ruleKey" : "system:proforma-forms-submitted"
           *        "parameters" : {}
           *      }
           * 
           * #### Conditions ####
           * 
           * Conditions enable workflow rules that govern whether a transition can execute.
           * 
           * ##### Check field value #####
           * 
           * A condition rule evaluates as true if a specific field's value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field's value matches the desired condition.
           * 
           *     {
           *        "ruleKey": "system:check-field-value",
           *        "parameters": {
           *          "fieldId": "description",
           *          "fieldValue": "[\"Done\"]",
           *          "comparator": "=",
           *          "comparisonType": "STRING"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
           *  *  `fieldValue` the list of values to check against the field\\u2019s value.
           *  *  `comparator` The comparison logic. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
           *  *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.
           * 
           * ##### Restrict issue transition #####
           * 
           * This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.
           * 
           *     {
           *        "ruleKey": "system:restrict-issue-transition",
           *        "parameters": {
           *          "accountIds": "allow-reporter,5e68ac137d64450d01a77fa0",
           *          "roleIds": "10002,10004",
           *          "groupIds": "703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4",
           *          "permissionKeys": "ADMINISTER_PROJECTS",
           *          "groupCustomFields": "customfield_10028",
           *          "allowUserCustomFields": "customfield_10072,customfield_10144,customfield_10007",
           *          "denyUserCustomFields": "customfield_10107"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects
           *  *  `roleIds` a comma-separated list of role IDs.
           *  *  `groupIds` a comma-separated list of group IDs.
           *  *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
           *  *  `groupCustomFields` a comma-separated list of group custom field IDs.
           *  *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition.
           *  *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.
           * 
           * This rule is composed by aggregating the following legacy rules:
           * 
           *  *  AllowOnlyAssignee
           *  *  AllowOnlyReporter
           *  *  InAnyProjectRoleCondition
           *  *  InProjectRoleCondition
           *  *  UserInAnyGroupCondition
           *  *  UserInGroupCondition
           *  *  PermissionCondtion
           *  *  InGroupCFCondition
           *  *  UserIsInCustomFieldCondition
           * 
           * ##### Previous status condition #####
           * 
           * A condition that evaluates based on an issue's previous status(es) and specific criteria.
           * 
           *     {
           *        "ruleKey" : "system:previous-status-condition"
           *        "parameters" : {
           *          "previousStatusIds" : "10004",
           *          "not": "true",
           *          "mostRecentStatusOnly" : "true",
           *          "includeCurrentStatus": "true",
           *          "ignoreLoopTransitions": "true"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID.
           *  *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`.
           *  *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
           *  *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`.
           *  *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.
           * 
           * ##### Parent or child blocking condition #####
           * 
           * A condition to block the parent\\u2019s issue transition depending on the child\\u2019s issue status.
           * 
           *     {
           *        "ruleKey" : "system:parent-or-child-blocking-condition"
           *        "parameters" : {
           *          "blocker" : "CHILD",
           *          "statusIds" : "1,2,3"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `blocker` currently only supports `CHILD`.
           *  *  `statusIds` a comma-separated list of status IDs.
           * 
           * ##### Separation of duties #####
           * 
           * A condition preventing the user from performing, if the user has already performed a transition on the issue.
           * 
           *     {
           *        "ruleKey": "system:separation-of-duties",
           *        "parameters": {
           *          "fromStatusId": "10161",
           *          "toStatusId": "10160"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status.
           *  *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.
           * 
           * ##### Restrict transitions #####
           * 
           * A condition preventing all users from transitioning the issue can also optionally include APIs as well.
           * 
           *     {
           *        "ruleKey": "system:restrict-from-all-users",
           *        "parameters": {
           *          "restrictMode": "users"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `"users"`, `"usersAndAPI"`.
           * 
           * ##### Jira Service Management block until approved #####
           * 
           * Block an issue transition until approval. Note: This is only supported in team-managed projects.
           * 
           *     {
           *        "ruleKey": "system:jsd-approvals-block-until-approved",
           *        "parameters": {
           *          "approvalConfigurationJson": "{"statusExternalUuid...}"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
           * 
           * ##### Jira Service Management block until rejected #####
           * 
           * Block an issue transition until rejected. Note: This is only supported in team-managed projects.
           * 
           *     {
           *        "ruleKey": "system:jsd-approvals-block-until-rejected",
           *        "parameters": {
           *          "approvalConfigurationJson": "{"statusExternalUuid...}"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
           * 
           * ##### Block in progress approval #####
           * 
           * Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.
           * 
           *     {
           *        "ruleKey": "system:block-in-progress-approval",
           *        "parameters": {}
           *      }
           * 
           * #### Post functions ####
           * 
           * Post functions carry out any additional processing required after a workflow transition is executed.
           * 
           * ##### Change assignee #####
           * 
           * A post function rule that changes the assignee of an issue after a transition.
           * 
           *     {
           *        "ruleKey": "system:change-assignee",
           *        "parameters": {
           *          "type": "to-selected-user",
           *          "accountId": "example-account-id"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user`
           *  *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `"to-selected-user"`.
           * 
           * ##### Copy field value #####
           * 
           * A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.
           * 
           *     {
           *        "ruleKey": "system:copy-value-from-other-field",
           *        "parameters": {
           *          "sourceFieldKey": "description",
           *          "targetFieldKey": "components",
           *          "issueSource": "SAME"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123`
           *  *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123`
           *  *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.
           * 
           * ##### Update field #####
           * 
           * A post function that updates or appends a specific field with the given value.
           * 
           *     {
           *        "ruleKey": "system:update-field",
           *        "parameters": {
           *          "field": "customfield_10056",
           *          "value": "asdf",
           *          "mode": "append"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123`
           *  *  `value` the value to update the field with.
           *  *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.
           * 
           * ##### Trigger webhook #####
           * 
           * A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.
           * 
           *     {
           *        "ruleKey": "system:trigger-webhook",
           *        "parameters": {
           *          "webhookId": "1"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `webhookId` the ID of the webhook.
           * 
           * #### Screen ####
           * 
           * ##### Remind people to update fields #####
           * 
           * A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.
           * 
           *     {
           *        "ruleKey": "system:remind-people-to-update-fields",
           *        "params": {
           *          "remindingFieldIds": "assignee,customfield_10025",
           *          "remindingMessage": "The message",
           *          "remindingAlwaysAsk": "true"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
           *  *  `remindingMessage` the message to display when prompting the users to update the fields.
           *  *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.
           * 
           * ##### Shared transition screen #####
           * 
           * A common screen that is shared between transitions in a workflow.
           * 
           *     {
           *        "ruleKey": "system:transition-screen",
           *        "params": {
           *          "screenId": "3"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `screenId` the ID of the screen.
           * 
           * #### Connect & Forge ####
           * 
           * ##### Connect rules #####
           * 
           * Validator/Condition/Post function for Connect app.
           * 
           *     {
           *        "ruleKey": "connect:expression-validator",
           *        "parameters": {
           *          "appKey": "com.atlassian.app",
           *          "config": "",
           *          "id": "90ce590f-e90c-4cd3-8281-165ce41f2ac3",
           *          "disabled": "false",
           *          "tag": ""
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function`
           *  *  `appKey` the reference to the Connect app
           *  *  `config` a JSON payload string describing the configuration
           *  *  `id` the ID of the rule
           *  *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`.
           *  *  `tag` additional tags for the Connect app
           * 
           * ##### Forge rules #####
           * 
           * Validator/Condition/Post function for Forge app.
           * 
           *     {
           *        "ruleKey": "forge:expression-validator",
           *        "parameters": {
           *          "key": "ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}",
           *          "config": "{"searchString":"workflow validator"}",
           *          "id": "a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2"
           *        }
           *      }
           * 
           * Parameters:
           * 
           *  *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function`
           *  *  `key` the identifier for the Forge app
           *  *  `config` the persistent stringified JSON configuration for the Forge rule
           *  *  `id` the ID of the Forge rule
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
           */
          $get(args?: {workflowId?: string, projectId?: string, issueTypeId?: string}): Promise<WorkflowCapabilities>;
        };
        /* Endpoint path: /rest/api/3/workflows/create */
        create: {
          /**
           * Method: post /rest/api/3/workflows/create
           * operationId: createWorkflows
           * sum: Bulk create workflows
           * doc: Create workflows and related statuses.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
           *  *  *Administer projects* project permissions to create project-scoped workflows
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
           */
          $post(body: WorkflowCreateRequest): Promise<WorkflowCreateResponse>;
          /* Endpoint path: /rest/api/3/workflows/create/validation */
          validation: {
            /**
             * Method: post /rest/api/3/workflows/create/validation
             * operationId: validateCreateWorkflows
             * sum: Validate create workflows
             * doc: Validate the payload for bulk create workflows.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
             *  *  *Administer projects* project permissions to create project-scoped workflows
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
             */
            $post(body: WorkflowCreateValidateRequest): Promise<WorkflowValidationErrorList>;
          };
        };
        /* Endpoint path: /rest/api/3/workflows/update */
        update: {
          /**
           * Method: post /rest/api/3/workflows/update
           * operationId: updateWorkflows
           * sum: Bulk update workflows
           * doc: Update workflows and related statuses.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
           *  *  *Administer projects* project permissions to create project-scoped workflows
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
           */
          $post(body: WorkflowUpdateRequest): Promise<WorkflowUpdateResponse>;
          /* Endpoint path: /rest/api/3/workflows/update/validation */
          validation: {
            /**
             * Method: post /rest/api/3/workflows/update/validation
             * operationId: validateUpdateWorkflows
             * sum: Validate update workflows
             * doc: Validate the payload for bulk update workflows.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
             *  *  *Administer projects* project permissions to create project-scoped workflows
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
             */
            $post(body: WorkflowUpdateValidateRequestBean): Promise<WorkflowValidationErrorList>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/workflowscheme */
      workflowscheme: {
        /**
         * Method: get /rest/api/3/workflowscheme
         * operationId: getAllWorkflowSchemes
         * sum: Get all workflow schemes
         * doc: Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 200: Returned if the request is successful.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $get(args?: {startAt?: number, maxResults?: number}): Promise<PageBeanWorkflowScheme>;
        /**
         * Method: post /rest/api/3/workflowscheme
         * operationId: createWorkflowScheme
         * sum: Create workflow scheme
         * doc: Creates a workflow scheme.
         * 
         * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         * 201: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 401: Returned if the authentication credentials are incorrect or missing.
         * 403: Returned if the user does not have the necessary permission.
         */
        $post(body: WorkflowScheme): Promise<WorkflowScheme>;
        /* Endpoint path: /rest/api/3/workflowscheme/project */
        project: {
          /**
           * Method: get /rest/api/3/workflowscheme/project
           * operationId: getWorkflowSchemeProjectAssociations
           * sum: Get workflow scheme project associations
           * doc: Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.
           * 
           * If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           */
          $get(args: {projectId: Array<number>}): Promise<ContainerOfWorkflowSchemeAssociations>;
          /**
           * Method: put /rest/api/3/workflowscheme/project
           * operationId: assignSchemeToProject
           * sum: Assign workflow scheme to project
           * doc: Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.
           * 
           * Workflow schemes can only be assigned to classic projects.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the required permissions.
           * 404: Returned if the workflow scheme or the project are not found.
           */
          $put(body: WorkflowSchemeProjectAssociation): Promise<unknown>;
        };
        /* Endpoint path: /rest/api/3/workflowscheme/read */
        read: {
          /**
           * Method: post /rest/api/3/workflowscheme/read
           * operationId: readWorkflowSchemes
           * sum: Bulk get workflow schemes
           * doc: Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes
           *  *  *Administer projects* project permissions to access project-scoped workflow schemes
           * 200: Returned if the request is successful.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
           */
          $post(body: WorkflowSchemeReadRequest): Promise<Array<WorkflowSchemeReadResponse>>;
        };
        /* Endpoint path: /rest/api/3/workflowscheme/update */
        update: {
          /**
           * Method: post /rest/api/3/workflowscheme/update
           * operationId: updateSchemes
           * sum: Update workflow scheme
           * doc: Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.
           * 
           * **[Permissions](#permissions) required:**
           * 
           *  *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.
           *  *  *Administer projects* project permission to update project-scoped workflow schemes.
           * 200: Returned if the request is successful and there is no asynchronous task.
           * 303: Returned if the request is successful and there is an asynchronous task for the migrations.
           * 400: Returned if the request is not valid.
           * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
           */
          $post(body: WorkflowSchemeUpdateRequest): Promise<unknown>;
          /* Endpoint path: /rest/api/3/workflowscheme/update/mappings */
          mappings: {
            /**
             * Method: post /rest/api/3/workflowscheme/update/mappings
             * operationId: updateWorkflowSchemeMappings
             * sum: Get required status mappings for workflow scheme update
             * doc: Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.
             * 
             * **[Permissions](#permissions) required:**
             * 
             *  *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.
             *  *  *Administer projects* project permission to update project-scoped workflow schemes.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 401: Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.
             */
            $post(body: WorkflowSchemeUpdateRequiredMappingsRequest): Promise<WorkflowSchemeUpdateRequiredMappingsResponse>;
          };
        };
        /* Endpoint path: /rest/api/3/workflowscheme/{id} */
        "$"(id: string): {
          /**
           * Method: get /rest/api/3/workflowscheme/{id}
           * operationId: getWorkflowScheme
           * sum: Get workflow scheme
           * doc: Returns a workflow scheme.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the workflow scheme is not found.
           */
          $get(args?: {returnDraftIfExists?: boolean}): Promise<WorkflowScheme>;
          /**
           * Method: delete /rest/api/3/workflowscheme/{id}
           * operationId: deleteWorkflowScheme
           * sum: Delete workflow scheme
           * doc: Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 204: Returned if the request is successful.
           * 400: Returned if the scheme is active.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the workflow scheme is not found.
           */
          $delete(): Promise<unknown>;
          /**
           * Method: put /rest/api/3/workflowscheme/{id}
           * operationId: updateWorkflowScheme
           * sum: Classic update workflow scheme
           * doc: Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.
           * 
           * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 401: Returned if the authentication credentials are incorrect or missing.
           * 403: Returned if the user does not have the necessary permission.
           * 404: Returned if the workflow scheme is not found.
           */
          $put(body: WorkflowScheme): Promise<WorkflowScheme>;
          /* Endpoint path: /rest/api/3/workflowscheme/{id}/createdraft */
          createdraft: {
            /**
             * Method: post /rest/api/3/workflowscheme/{id}/createdraft
             * operationId: createWorkflowSchemeDraftFromParent
             * sum: Create draft workflow scheme
             * doc: Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 201: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             */
            $post(): Promise<WorkflowScheme>;
          };
          /* Endpoint path: /rest/api/3/workflowscheme/{id}/default */
          default: {
            /**
             * Method: get /rest/api/3/workflowscheme/{id}/default
             * operationId: getDefaultWorkflow
             * sum: Get default workflow
             * doc: Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the workflow scheme is not found.
             */
            $get(args?: {returnDraftIfExists?: boolean}): Promise<DefaultWorkflow>;
            /**
             * Method: delete /rest/api/3/workflowscheme/{id}/default
             * operationId: deleteDefaultWorkflow
             * sum: Delete default workflow
             * doc: Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
             * 
             * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the workflow scheme is not found.
             */
            $delete(args?: {updateDraftIfNeeded?: boolean}): Promise<WorkflowScheme>;
            /**
             * Method: put /rest/api/3/workflowscheme/{id}/default
             * operationId: updateDefaultWorkflow
             * sum: Update default workflow
             * doc: Sets the default workflow for a workflow scheme.
             * 
             * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if the workflow scheme is not found.
             */
            $put(body: DefaultWorkflow): Promise<WorkflowScheme>;
          };
          /* Endpoint path: /rest/api/3/workflowscheme/{id}/draft */
          draft: {
            /**
             * Method: get /rest/api/3/workflowscheme/{id}/draft
             * operationId: getWorkflowSchemeDraft
             * sum: Get draft workflow scheme
             * doc: Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.  
             * Note that:
             * 
             *  *  Only active workflow schemes can have draft workflow schemes.
             *  *  An active workflow scheme can only have one draft workflow scheme.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if:
             * 
             *  *  the original active workflow scheme is not found.
             *  *  the original active workflow scheme does not have a draft.
             */
            $get(): Promise<WorkflowScheme>;
            /**
             * Method: delete /rest/api/3/workflowscheme/{id}/draft
             * operationId: deleteWorkflowSchemeDraft
             * sum: Delete draft workflow scheme
             * doc: Deletes a draft workflow scheme.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 204: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission..
             * 404: Returned if:
             * 
             *  *  the original active workflow scheme is not found.
             *  *  the original active workflow scheme does not have a draft.
             */
            $delete(): Promise<unknown>;
            /**
             * Method: put /rest/api/3/workflowscheme/{id}/draft
             * operationId: updateWorkflowSchemeDraft
             * sum: Update draft workflow scheme
             * doc: Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if:
             * 
             *  *  the original active workflow scheme is not found.
             *  *  the original active workflow scheme does not have a draft.
             */
            $put(body: WorkflowScheme): Promise<WorkflowScheme>;
            /* Endpoint path: /rest/api/3/workflowscheme/{id}/draft/default */
            default: {
              /**
               * Method: get /rest/api/3/workflowscheme/{id}/draft/default
               * operationId: getDraftDefaultWorkflow
               * sum: Get draft default workflow
               * doc: Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission..
               * 404: Returned if any of the following is true:
               * 
               *  *  The workflow scheme is not found.
               *  *  The workflow scheme does not have a draft.
               */
              $get(): Promise<DefaultWorkflow>;
              /**
               * Method: delete /rest/api/3/workflowscheme/{id}/draft/default
               * operationId: deleteDraftDefaultWorkflow
               * sum: Delete draft default workflow
               * doc: Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if any of the following is true:
               * 
               *  *  The workflow scheme is not found.
               *  *  The workflow scheme does not have a draft.
               */
              $delete(): Promise<WorkflowScheme>;
              /**
               * Method: put /rest/api/3/workflowscheme/{id}/draft/default
               * operationId: updateDraftDefaultWorkflow
               * sum: Update draft default workflow
               * doc: Sets the default workflow for a workflow scheme's draft.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if any of the following is true:
               * 
               *  *  The workflow scheme is not found.
               *  *  The workflow scheme does not have a draft.
               */
              $put(body: DefaultWorkflow): Promise<WorkflowScheme>;
            };
            /* Endpoint path: /rest/api/3/workflowscheme/{id}/draft/issuetype */
            issuetype: {
              /* Endpoint path: /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType} */
              "$"(issueType: string): {
                /**
                 * Method: get /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}
                 * operationId: getWorkflowSchemeDraftIssueType
                 * sum: Get workflow for issue type in draft workflow scheme
                 * doc: Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 200: Returned if the request is successful.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the workflow scheme or issue type is not found.
                 */
                $get(): Promise<IssueTypeWorkflowMapping>;
                /**
                 * Method: delete /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}
                 * operationId: deleteWorkflowSchemeDraftIssueType
                 * sum: Delete workflow for issue type in draft workflow scheme
                 * doc: Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 200: Returned if the request is successful.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the workflow scheme or issue type is not found.
                 */
                $delete(): Promise<WorkflowScheme>;
                /**
                 * Method: put /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}
                 * operationId: setWorkflowSchemeDraftIssueType
                 * sum: Set workflow for issue type in draft workflow scheme
                 * doc: Sets the workflow for an issue type in a workflow scheme's draft.
                 * 
                 * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
                 * 200: Returned if the request is successful.
                 * 400: Returned if the request is invalid.
                 * 401: Returned if the authentication credentials are incorrect or missing.
                 * 403: Returned if the user does not have the necessary permission.
                 * 404: Returned if the workflow scheme or issue type is not found.
                 */
                $put(body: IssueTypeWorkflowMapping): Promise<WorkflowScheme>;
              };
            };
            /* Endpoint path: /rest/api/3/workflowscheme/{id}/draft/publish */
            publish: {
              /**
               * Method: post /rest/api/3/workflowscheme/{id}/draft/publish
               * operationId: publishDraftWorkflowScheme
               * sum: Publish draft workflow scheme
               * doc: Publishes a draft workflow scheme.
               * 
               * Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.
               * 
               * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 204: Returned if the request is only for validation and is successful.
               * 303: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if any of these are true:
               * 
               *  *  The workflow scheme is not found.
               *  *  The workflow scheme does not have a draft.
               *  *  A new status in the draft workflow scheme is not found.
               */
              $post(body: PublishDraftWorkflowScheme): Promise<unknown>;
            };
            /* Endpoint path: /rest/api/3/workflowscheme/{id}/draft/workflow */
            workflow: {
              /**
               * Method: get /rest/api/3/workflowscheme/{id}/draft/workflow
               * operationId: getDraftWorkflow
               * sum: Get issue types for workflows in draft workflow scheme
               * doc: Returns the workflow-issue type mappings for a workflow scheme's draft.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if either the workflow scheme or workflow (if specified) is not found. session.
               */
              $get(args?: {workflowName?: string}): Promise<IssueTypesWorkflowMapping>;
              /**
               * Method: delete /rest/api/3/workflowscheme/{id}/draft/workflow
               * operationId: deleteDraftWorkflowMapping
               * sum: Delete issue types for workflow in draft workflow scheme
               * doc: Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if any of the following is true:
               * 
               *  *  The workflow scheme is not found.
               *  *  The workflow scheme does not have a draft.
               *  *  The workflow is not found.
               *  *  The workflow is not specified.
               */
              $delete(args: {workflowName: string}): Promise<unknown>;
              /**
               * Method: put /rest/api/3/workflowscheme/{id}/draft/workflow
               * operationId: updateDraftWorkflowMapping
               * sum: Set issue types for workflow in workflow scheme
               * doc: Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 400: Returned if the request is invalid.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if any of the following is true:
               * 
               *  *  The workflow scheme is not found.
               *  *  The workflow scheme does not have a draft.
               *  *  The workflow is not found.
               *  *  The workflow is not specified.
               */
              $put(body: IssueTypesWorkflowMapping): Promise<WorkflowScheme>;
            };
          };
          /* Endpoint path: /rest/api/3/workflowscheme/{id}/issuetype */
          issuetype: {
            /* Endpoint path: /rest/api/3/workflowscheme/{id}/issuetype/{issueType} */
            "$"(issueType: string): {
              /**
               * Method: get /rest/api/3/workflowscheme/{id}/issuetype/{issueType}
               * operationId: getWorkflowSchemeIssueType
               * sum: Get workflow for issue type in workflow scheme
               * doc: Returns the issue type-workflow mapping for an issue type in a workflow scheme.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the workflow scheme or issue type is not found.
               */
              $get(args?: {returnDraftIfExists?: boolean}): Promise<IssueTypeWorkflowMapping>;
              /**
               * Method: delete /rest/api/3/workflowscheme/{id}/issuetype/{issueType}
               * operationId: deleteWorkflowSchemeIssueType
               * sum: Delete workflow for issue type in workflow scheme
               * doc: Deletes the issue type-workflow mapping for an issue type in a workflow scheme.
               * 
               * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 400: Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the workflow scheme or issue type is not found.
               */
              $delete(args?: {updateDraftIfNeeded?: boolean}): Promise<WorkflowScheme>;
              /**
               * Method: put /rest/api/3/workflowscheme/{id}/issuetype/{issueType}
               * operationId: setWorkflowSchemeIssueType
               * sum: Set workflow for issue type in workflow scheme
               * doc: Sets the workflow for an issue type in a workflow scheme.
               * 
               * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.
               * 
               * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
               * 200: Returned if the request is successful.
               * 400: Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 403: Returned if the user does not have the necessary permission.
               * 404: Returned if the workflow scheme or issue type is not found.
               */
              $put(body: IssueTypeWorkflowMapping): Promise<WorkflowScheme>;
            };
          };
          /* Endpoint path: /rest/api/3/workflowscheme/{id}/workflow */
          workflow: {
            /**
             * Method: get /rest/api/3/workflowscheme/{id}/workflow
             * operationId: getWorkflow
             * sum: Get issue types for workflows in workflow scheme
             * doc: Returns the workflow-issue type mappings for a workflow scheme.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if either the workflow scheme or workflow is not found.
             */
            $get(args?: {workflowName?: string, returnDraftIfExists?: boolean}): Promise<IssueTypesWorkflowMapping>;
            /**
             * Method: delete /rest/api/3/workflowscheme/{id}/workflow
             * operationId: deleteWorkflowMapping
             * sum: Delete issue types for workflow in workflow scheme
             * doc: Deletes the workflow-issue type mapping for a workflow in a workflow scheme.
             * 
             * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the workflow cannot be edited and `updateDraftIfNeeded` is not true.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if any of the following is true:
             * 
             *  *  The workflow scheme is not found.
             *  *  The workflow is not found.
             *  *  The workflow is not specified.
             */
            $delete(args: {workflowName: string, updateDraftIfNeeded?: boolean}): Promise<unknown>;
            /**
             * Method: put /rest/api/3/workflowscheme/{id}/workflow
             * operationId: updateWorkflowMapping
             * sum: Set issue types for workflow in workflow scheme
             * doc: Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.
             * 
             * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.
             * 
             * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             * 200: Returned if the request is successful.
             * 400: Returned if the request is invalid.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the user does not have the necessary permission.
             * 404: Returned if any of the following is true:
             * 
             *  *  The workflow scheme is not found.
             *  *  The workflow is not found.
             *  *  The workflow is not specified.
             */
            $put(body: IssueTypesWorkflowMapping): Promise<WorkflowScheme>;
          };
        };
      };
      /* Endpoint path: /rest/api/3/worklog */
      worklog: {
        /* Endpoint path: /rest/api/3/worklog/deleted */
        deleted: {
          /**
           * Method: get /rest/api/3/worklog/deleted
           * operationId: getIdsOfWorklogsDeletedSince
           * sum: Get IDs of deleted worklogs
           * doc: Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.
           * 
           * This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
           * 
           * This resource does not return worklogs deleted during the minute preceding the request.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {since?: number}): Promise<ChangedWorklogs>;
        };
        /* Endpoint path: /rest/api/3/worklog/list */
        list: {
          /**
           * Method: post /rest/api/3/worklog/list
           * operationId: getWorklogsForIds
           * sum: Get worklogs
           * doc: Returns worklog details for a list of worklog IDs.
           * 
           * The returned list of worklogs is limited to 1000 items.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
           * 
           *  *  the worklog is set as *Viewable by All Users*.
           *  *  the user is a member of a project role or group with permission to view the worklog.
           * 200: Returned if the request is successful.
           * 400: Returned if the request contains more than 1000 worklog IDs or is empty.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $post(body: WorklogIdsRequestBean): Promise<Array<Worklog>>;
        };
        /* Endpoint path: /rest/api/3/worklog/updated */
        updated: {
          /**
           * Method: get /rest/api/3/worklog/updated
           * operationId: getIdsOfWorklogsModifiedSince
           * sum: Get IDs of updated worklogs
           * doc: Returns a list of IDs and update timestamps for worklogs updated after a date and time.
           * 
           * This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
           * 
           * This resource does not return worklogs updated during the minute preceding the request.
           * 
           * **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
           * 
           *  *  the worklog is set as *Viewable by All Users*.
           *  *  the user is a member of a project role or group with permission to view the worklog.
           * 200: Returned if the request is successful.
           * 401: Returned if the authentication credentials are incorrect or missing.
           */
          $get(args?: {since?: number, expand?: string}): Promise<ChangedWorklogs>;
        };
      };
    };
  };
  /* Endpoint path: /rest/atlassian-connect */
  "atlassian-connect": {
    /* Endpoint path: /rest/atlassian-connect/1 */
    1: {
      /* Endpoint path: /rest/atlassian-connect/1/addons */
      addons: {
        /* Endpoint path: /rest/atlassian-connect/1/addons/{addonKey} */
        "$"(addonKey: string): {
          /* Endpoint path: /rest/atlassian-connect/1/addons/{addonKey}/properties */
          properties: {
            /**
             * Method: get /rest/atlassian-connect/1/addons/{addonKey}/properties
             * operationId: AddonPropertiesResource.getAddonProperties_get
             * sum: Get app properties
             * doc: Gets all the properties of an app.
             * 
             * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
             * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
             * 200: Returned if the request is successful.
             * 401: Returned if the authentication credentials are incorrect or missing.
             */
            $get(): Promise<PropertyKeys>;
            /* Endpoint path: /rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey} */
            "$"(propertyKey: string): {
              /**
               * Method: get /rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}
               * operationId: AddonPropertiesResource.getAddonProperty_get
               * sum: Get app property
               * doc: Returns the key and value of an app's property.
               * 
               * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
               * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
               * 200: Returned if the request is successful.
               * 400: Returned if the property key is longer than 127 characters.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the property is not found or doesn't belong to the app.
               */
              $get(): Promise<EntityProperty>;
              /**
               * Method: delete /rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}
               * operationId: AddonPropertiesResource.deleteAddonProperty_delete
               * sum: Delete app property
               * doc: Deletes an app's property.
               * 
               * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
               * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
               * 204: Returned if the request is successful.
               * 400: Returned if the property key is longer than 127 characters.
               * 401: Returned if the authentication credentials are incorrect or missing.
               * 404: Returned if the property is not found or doesn't belong to the app.
               */
              $delete(): Promise<unknown>;
              /**
               * Method: put /rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}
               * operationId: AddonPropertiesResource.putAddonProperty_put
               * sum: Set app property
               * doc: Sets the value of an app's property. Use this resource to store custom data for your app.
               * 
               * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
               * 
               * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
               * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
               * 200: Returned if the property is updated.
               * 201: Returned is the property is created.
               * 400: Returned if:
               *   * the property key is longer than 127 characters.
               *   * the value is not valid JSON.
               *   * the value is longer than 32768 characters.
               * 401: Returned if the authentication credentials are incorrect or missing.
               */
              $put(body: any /* 264 */): Promise<OperationMessage>;
            };
          };
        };
      };
      /* Endpoint path: /rest/atlassian-connect/1/app */
      app: {
        /* Endpoint path: /rest/atlassian-connect/1/app/module */
        module: {
          /* Endpoint path: /rest/atlassian-connect/1/app/module/dynamic */
          dynamic: {
            /**
             * Method: get /rest/atlassian-connect/1/app/module/dynamic
             * operationId: DynamicModulesResource.getModules_get
             * sum: Get modules
             * doc: Returns all modules registered dynamically by the calling app.
             * 
             * **[Permissions](#permissions) required:** Only Connect apps can make this request.
             * 200: Returned if the request is successful.
             * 401: Returned if the call is not from a Connect app.
             */
            $get(): Promise<ConnectModules>;
            /**
             * Method: delete /rest/atlassian-connect/1/app/module/dynamic
             * operationId: DynamicModulesResource.removeModules_delete
             * sum: Remove modules
             * doc: Remove all or a list of modules registered by the calling app.
             * 
             * **[Permissions](#permissions) required:** Only Connect apps can make this request.
             * 204: Returned if the request is successful.
             * 401: Returned if the call is not from a Connect app.
             */
            $delete(args?: {moduleKey?: Array<string>}): Promise<unknown>;
            /**
             * Method: post /rest/atlassian-connect/1/app/module/dynamic
             * operationId: DynamicModulesResource.registerModules_post
             * sum: Register modules
             * doc: Registers a list of modules.
             * 
             * **[Permissions](#permissions) required:** Only Connect apps can make this request.
             * 200: Returned if the request is successful.
             * 400: Returned if:
             * * any of the provided modules is invalid. For example, required properties are missing.
             * * any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.
             * 
             * Details of the issues encountered are included in the error message.
             * 401: Returned if the call is not from a Connect app.
             */
            $post(body: ConnectModules): Promise<unknown>;
          };
        };
      };
      /* Endpoint path: /rest/atlassian-connect/1/migration */
      migration: {
        /* Endpoint path: /rest/atlassian-connect/1/migration/field */
        field: {
          /**
           * Method: put /rest/atlassian-connect/1/migration/field
           * operationId: AppIssueFieldValueUpdateResource.updateIssueFields_put
           * sum: Bulk update custom field value
           * doc: Updates the value of a custom field added by Connect apps on one or more issues.
           * The values of up to 200 custom fields can be updated.
           * 
           * **[Permissions](#permissions) required:** Only Connect apps can make this request
           * 200: Returned if the request is successful.
           * 400: Returned if the request is invalid.
           * 403: Returned if:
           * * the transfer ID is not found.
           * * the authorisation credentials are incorrect or missing.
           */
          $put(body: ConnectCustomFieldValues): Promise<unknown>;
        };
        /* Endpoint path: /rest/atlassian-connect/1/migration/properties */
        properties: {
          /* Endpoint path: /rest/atlassian-connect/1/migration/properties/{entityType} */
          "$"(entityType: string): {
            /**
             * Method: put /rest/atlassian-connect/1/migration/properties/{entityType}
             * operationId: MigrationResource.updateEntityPropertiesValue_put
             * sum: Bulk update entity properties
             * doc: Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.
             * 200: Returned if the request is successful.
             * 400: Returned if the request is not valid.
             * 403: Returned if the authorisation credentials are incorrect or missing.
             */
            $put(body: Array<EntityPropertyDetails>): Promise<unknown>;
          };
        };
        /* Endpoint path: /rest/atlassian-connect/1/migration/workflow */
        workflow: {
          /* Endpoint path: /rest/atlassian-connect/1/migration/workflow/rule */
          rule: {
            /* Endpoint path: /rest/atlassian-connect/1/migration/workflow/rule/search */
            search: {
              /**
               * Method: post /rest/atlassian-connect/1/migration/workflow/rule/search
               * operationId: MigrationResource.workflowRuleSearch_post
               * sum: Get workflow transition rule configurations
               * doc: Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.
               * 200: Returned if the request is successful.
               * 400: Returned if the request is not valid.
               * 403: Returned if the authorisation credentials are incorrect or missing.
               */
              $post(body: WorkflowRulesSearch): Promise<WorkflowRulesSearchDetails>;
            };
          };
        };
      };
      /* Endpoint path: /rest/atlassian-connect/1/service-registry */
      "service-registry": {
        /**
         * Method: get /rest/atlassian-connect/1/service-registry
         * operationId: ServiceRegistryResource.services_get
         * sum: Retrieve the attributes of service registries
         * doc: Retrieve the attributes of given service registries.
         * 
         * **[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting
         * 200: Returned if the request is successful.
         * 400: Returned if the request is invalid.
         * 401: The request needs to be authenticated.
         * 403: The request isn't authorized.
         * 500: The endpoint failed internally.
         * 501: The endpoint isn't ready for receiving requests.
         * 504: The upstream service is busy.
         */
        $get(args: {serviceIds: Array<string>}): Promise<Array<ServiceRegistry>>;
      };
    };
  };
  /* Endpoint path: /rest/forge */
  forge: {
    /* Endpoint path: /rest/forge/1 */
    1: {
      /* Endpoint path: /rest/forge/1/app */
      app: {
        /* Endpoint path: /rest/forge/1/app/properties */
        properties: {
          /* Endpoint path: /rest/forge/1/app/properties/{propertyKey} */
          "$"(propertyKey: string): {
            /**
             * Method: delete /rest/forge/1/app/properties/{propertyKey}
             * operationId: deleteForgeAppProperty
             * sum: Delete app property (Forge)
             * doc: Deletes a Forge app's property.
             * 
             * **[Permissions](#permissions) required:** Only Forge apps can make this request.
             * 204: Returned if the request is successful.
             * 400: Returned if the property key is longer than 127 characters.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the request isn't made directly by an app or if it's an impersonated request.
             * 404: Returned if the property isn't found or doesn't belong to the app.
             */
            $delete(): Promise<unknown>;
            /**
             * Method: put /rest/forge/1/app/properties/{propertyKey}
             * operationId: putForgeAppProperty
             * sum: Set app property (Forge)
             * doc: Sets the value of a Forge app's property.
             * These values can be retrieved in [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)
             * through the `app` [context variable](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables).
             * 
             * For other use cases, use the [Storage API](https://developer.atlassian.com/platform/forge/runtime-reference/storage-api/).
             * 
             * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
             * 
             * **[Permissions](#permissions) required:** Only Forge apps can make this request.
             * 200: Returned if the property is updated.
             * 201: Returned is the property is created.
             * 400: Returned if:
             *   * the property key is longer than 127 characters.
             *   * the value isn't valid JSON.
             *   * the value is longer than 32768 characters.
             * 401: Returned if the authentication credentials are incorrect or missing.
             * 403: Returned if the request isn't made directly by an app or if it's an impersonated request.
             */
            $put(body: any /* 264 */): Promise<OperationMessage>;
          };
        };
      };
    };
  };
}

/**
 * END API Models
 */
export function proxyAtlassianV3(apiEngine: ApiRequestable): AtlassianV3 {
  return buildProxy(apiEngine, '');
}
export default proxyAtlassianV3;
